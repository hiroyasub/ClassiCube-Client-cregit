begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|com
operator|.
name|mojang
operator|.
name|net
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|SocketChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|Minecraft
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|gui
operator|.
name|ErrorScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|net
operator|.
name|NetworkManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|net
operator|.
name|PacketType
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|NetworkHandler
block|{
specifier|public
specifier|volatile
name|boolean
name|connected
decl_stmt|;
specifier|public
name|SocketChannel
name|channel
decl_stmt|;
specifier|public
name|ByteBuffer
name|in
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|1048576
argument_list|)
decl_stmt|;
specifier|public
name|ByteBuffer
name|out
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|1048576
argument_list|)
decl_stmt|;
specifier|public
name|NetworkManager
name|netManager
decl_stmt|;
specifier|private
name|Socket
name|sock
decl_stmt|;
specifier|private
name|byte
index|[]
name|stringBytes
init|=
operator|new
name|byte
index|[
literal|64
index|]
decl_stmt|;
specifier|protected
name|int
name|soTrafficClass
init|=
literal|0x04
operator||
literal|0x08
operator||
literal|0x010
decl_stmt|;
specifier|public
name|NetworkHandler
parameter_list|(
name|String
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|Minecraft
name|m
parameter_list|)
block|{
try|try
block|{
name|channel
operator|=
name|SocketChannel
operator|.
name|open
argument_list|()
expr_stmt|;
name|channel
operator|.
name|connect
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|var1
argument_list|,
name|var2
argument_list|)
argument_list|)
expr_stmt|;
name|channel
operator|.
name|configureBlocking
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
comment|/*sock = channel.socket(); 			sock.setTcpNoDelay(true); 			sock.setTrafficClass(soTrafficClass); 			sock.setKeepAlive(false); 			sock.setReuseAddress(false); 			sock.setSoTimeout(100); 			sock.getInetAddress().toString();*/
name|connected
operator|=
literal|true
expr_stmt|;
name|in
operator|.
name|clear
argument_list|()
expr_stmt|;
name|out
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|m
operator|.
name|setCurrentScreen
argument_list|(
operator|new
name|ErrorScreen
argument_list|(
literal|"Failed to connect"
argument_list|,
literal|"You failed to connect to the server. It\'s probably down!"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|isOnline
operator|=
literal|false
expr_stmt|;
name|m
operator|.
name|networkManager
operator|=
literal|null
expr_stmt|;
name|netManager
operator|.
name|successful
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|public
specifier|final
name|void
name|close
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|out
operator|.
name|position
argument_list|()
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|flip
argument_list|()
expr_stmt|;
name|channel
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|compact
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|var2
parameter_list|)
block|{
empty_stmt|;
block|}
name|connected
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|channel
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|var1
parameter_list|)
block|{
empty_stmt|;
block|}
name|sock
operator|=
literal|null
expr_stmt|;
name|channel
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|public
name|Object
name|readObject
parameter_list|(
name|Class
name|var1
parameter_list|)
block|{
if|if
condition|(
operator|!
name|connected
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
try|try
block|{
if|if
condition|(
name|var1
operator|==
name|Long
operator|.
name|TYPE
condition|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|in
operator|.
name|getLong
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|var1
operator|==
name|Integer
operator|.
name|TYPE
condition|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|in
operator|.
name|getInt
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|var1
operator|==
name|Short
operator|.
name|TYPE
condition|)
block|{
return|return
name|Short
operator|.
name|valueOf
argument_list|(
name|in
operator|.
name|getShort
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|var1
operator|==
name|Byte
operator|.
name|TYPE
condition|)
block|{
return|return
name|Byte
operator|.
name|valueOf
argument_list|(
name|in
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|var1
operator|==
name|Double
operator|.
name|TYPE
condition|)
block|{
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|in
operator|.
name|getDouble
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|var1
operator|==
name|Float
operator|.
name|TYPE
condition|)
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|in
operator|.
name|getFloat
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|var1
operator|==
name|String
operator|.
name|class
condition|)
block|{
name|in
operator|.
name|get
argument_list|(
name|stringBytes
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|stringBytes
argument_list|,
literal|"UTF-8"
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
if|else if
condition|(
name|var1
operator|==
name|byte
index|[]
operator|.
name|class
condition|)
block|{
name|byte
index|[]
name|var3
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|in
operator|.
name|get
argument_list|(
name|var3
argument_list|)
expr_stmt|;
return|return
name|var3
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|var2
parameter_list|)
block|{
name|netManager
operator|.
name|error
argument_list|(
name|var2
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|public
specifier|final
name|void
name|send
parameter_list|(
name|PacketType
name|packetType
parameter_list|,
name|Object
modifier|...
name|object
parameter_list|)
block|{
if|if
condition|(
name|connected
condition|)
block|{
name|out
operator|.
name|put
argument_list|(
name|packetType
operator|.
name|opcode
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|object
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|Class
name|packetClass
init|=
name|packetType
operator|.
name|params
index|[
name|i
index|]
decl_stmt|;
name|Object
name|packetObject
init|=
name|object
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|connected
condition|)
block|{
try|try
block|{
if|if
condition|(
name|packetClass
operator|==
name|Long
operator|.
name|TYPE
condition|)
block|{
name|out
operator|.
name|putLong
argument_list|(
operator|(
operator|(
name|Long
operator|)
name|packetObject
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|packetClass
operator|==
name|Integer
operator|.
name|TYPE
condition|)
block|{
name|out
operator|.
name|putInt
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|packetObject
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|packetClass
operator|==
name|Short
operator|.
name|TYPE
condition|)
block|{
name|out
operator|.
name|putShort
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|packetObject
operator|)
operator|.
name|shortValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|packetClass
operator|==
name|Byte
operator|.
name|TYPE
condition|)
block|{
name|out
operator|.
name|put
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|packetObject
operator|)
operator|.
name|byteValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|packetClass
operator|==
name|Double
operator|.
name|TYPE
condition|)
block|{
name|out
operator|.
name|putDouble
argument_list|(
operator|(
operator|(
name|Double
operator|)
name|packetObject
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|packetClass
operator|==
name|Float
operator|.
name|TYPE
condition|)
block|{
name|out
operator|.
name|putFloat
argument_list|(
operator|(
operator|(
name|Float
operator|)
name|packetObject
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byte
index|[]
name|var9
decl_stmt|;
if|if
condition|(
name|packetClass
operator|!=
name|String
operator|.
name|class
condition|)
block|{
if|if
condition|(
name|packetClass
operator|==
name|byte
index|[]
operator|.
name|class
condition|)
block|{
if|if
condition|(
operator|(
name|var9
operator|=
operator|(
name|byte
index|[]
operator|)
name|packetObject
operator|)
operator|.
name|length
operator|<
literal|1024
condition|)
block|{
name|var9
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|var9
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|put
argument_list|(
name|var9
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|var9
operator|=
operator|(
operator|(
name|String
operator|)
name|packetObject
operator|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|stringBytes
argument_list|,
operator|(
name|byte
operator|)
literal|32
argument_list|)
expr_stmt|;
name|int
name|var8
decl_stmt|;
for|for
control|(
name|var8
operator|=
literal|0
init|;
name|var8
operator|<
literal|64
operator|&&
name|var8
operator|<
name|var9
operator|.
name|length
condition|;
operator|++
name|var8
control|)
block|{
name|stringBytes
index|[
name|var8
index|]
operator|=
name|var9
index|[
name|var8
index|]
expr_stmt|;
block|}
for|for
control|(
name|var8
operator|=
name|var9
operator|.
name|length
init|;
name|var8
operator|<
literal|64
condition|;
operator|++
name|var8
control|)
block|{
name|stringBytes
index|[
name|var8
index|]
operator|=
literal|32
expr_stmt|;
block|}
name|out
operator|.
name|put
argument_list|(
name|stringBytes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|netManager
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

