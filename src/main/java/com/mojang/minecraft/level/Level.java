begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|level
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|ColorCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|Minecraft
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|MovingObjectPosition
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|level
operator|.
name|liquid
operator|.
name|LiquidType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|level
operator|.
name|tile
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|model
operator|.
name|Vec3D
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|particle
operator|.
name|ParticleManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|phys
operator|.
name|AABB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|render
operator|.
name|LevelRenderer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|sound
operator|.
name|AudioInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|sound
operator|.
name|EntitySoundPos
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|sound
operator|.
name|LevelSoundPos
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|util
operator|.
name|MathHelper
import|;
end_import

begin_class
specifier|public
class|class
name|Level
implements|implements
name|Serializable
block|{
specifier|public
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0L
decl_stmt|;
specifier|public
name|int
name|width
decl_stmt|;
specifier|public
name|int
name|length
decl_stmt|;
specifier|public
name|int
name|height
decl_stmt|;
specifier|public
name|byte
index|[]
name|blocks
decl_stmt|;
specifier|public
name|String
name|name
decl_stmt|;
specifier|public
name|String
name|creator
decl_stmt|;
specifier|public
name|long
name|createTime
decl_stmt|;
specifier|public
name|int
name|xSpawn
decl_stmt|;
specifier|public
name|int
name|ySpawn
decl_stmt|;
specifier|public
name|int
name|zSpawn
decl_stmt|;
specifier|public
name|float
name|rotSpawn
decl_stmt|;
specifier|private
specifier|transient
name|ArrayList
argument_list|<
name|LevelRenderer
argument_list|>
name|listeners
init|=
operator|new
name|ArrayList
argument_list|<
name|LevelRenderer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|transient
name|int
index|[]
name|blockers
decl_stmt|;
specifier|public
specifier|transient
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
specifier|transient
name|int
name|randId
decl_stmt|;
specifier|private
specifier|transient
name|ArrayList
argument_list|<
name|NextTickListEntry
argument_list|>
name|tickList
decl_stmt|;
specifier|public
name|BlockMap
name|blockMap
decl_stmt|;
specifier|private
name|boolean
name|networkMode
decl_stmt|;
specifier|public
specifier|transient
name|Minecraft
name|rendererContext$5cd64a7f
decl_stmt|;
specifier|public
name|boolean
name|creativeMode
decl_stmt|;
specifier|public
name|int
name|cloudLevel
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|int
name|waterLevel
decl_stmt|;
specifier|public
name|int
name|skyColor
decl_stmt|;
specifier|public
name|int
name|fogColor
decl_stmt|;
specifier|public
name|int
name|cloudColor
decl_stmt|;
name|int
name|unprocessed
decl_stmt|;
specifier|private
name|int
name|tickCount
decl_stmt|;
specifier|public
name|Entity
name|player
decl_stmt|;
specifier|public
specifier|transient
name|ParticleManager
name|particleEngine
decl_stmt|;
specifier|public
specifier|transient
name|Object
name|font
decl_stmt|;
specifier|public
name|boolean
name|growTrees
decl_stmt|;
specifier|public
name|ColorCache
name|customShadowColour
decl_stmt|;
specifier|public
name|ColorCache
name|customLightColour
decl_stmt|;
specifier|public
name|short
index|[]
name|desiredSpawn
decl_stmt|;
specifier|public
name|Level
parameter_list|()
block|{
name|randId
operator|=
name|random
operator|.
name|nextInt
argument_list|()
expr_stmt|;
name|tickList
operator|=
operator|new
name|ArrayList
argument_list|<
name|NextTickListEntry
argument_list|>
argument_list|()
expr_stmt|;
name|networkMode
operator|=
literal|false
expr_stmt|;
name|unprocessed
operator|=
literal|0
expr_stmt|;
name|tickCount
operator|=
literal|0
expr_stmt|;
name|growTrees
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|void
name|addEntity
parameter_list|(
name|Entity
name|var1
parameter_list|)
block|{
name|blockMap
operator|.
name|insert
argument_list|(
name|var1
argument_list|)
expr_stmt|;
name|var1
operator|.
name|setLevel
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addListener
parameter_list|(
name|LevelRenderer
name|var1
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|var1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addToTickNextTick
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|int
name|var3
parameter_list|,
name|int
name|var4
parameter_list|)
block|{
if|if
condition|(
operator|!
name|networkMode
condition|)
block|{
name|NextTickListEntry
name|var5
init|=
operator|new
name|NextTickListEntry
argument_list|(
name|var1
argument_list|,
name|var2
argument_list|,
name|var3
argument_list|,
name|var4
argument_list|)
decl_stmt|;
if|if
condition|(
name|var4
operator|>
literal|0
condition|)
block|{
name|var3
operator|=
name|Block
operator|.
name|blocks
index|[
name|var4
index|]
operator|.
name|getTickDelay
argument_list|()
expr_stmt|;
name|var5
operator|.
name|ticks
operator|=
name|var3
expr_stmt|;
block|}
name|tickList
operator|.
name|add
argument_list|(
name|var5
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|calcLightDepths
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|int
name|var3
parameter_list|,
name|int
name|var4
parameter_list|)
block|{
for|for
control|(
name|int
name|var5
init|=
name|var1
init|;
name|var5
operator|<
name|var1
operator|+
name|var3
condition|;
operator|++
name|var5
control|)
block|{
for|for
control|(
name|int
name|var6
init|=
name|var2
init|;
name|var6
operator|<
name|var2
operator|+
name|var4
condition|;
operator|++
name|var6
control|)
block|{
name|int
name|var7
init|=
name|blockers
index|[
name|var5
operator|+
name|var6
operator|*
name|width
index|]
decl_stmt|;
name|int
name|var8
decl_stmt|;
for|for
control|(
name|var8
operator|=
name|height
operator|-
literal|1
init|;
name|var8
operator|>
literal|0
operator|&&
operator|!
name|isLightBlocker
argument_list|(
name|var5
argument_list|,
name|var8
argument_list|,
name|var6
argument_list|)
condition|;
operator|--
name|var8
control|)
block|{
empty_stmt|;
block|}
name|blockers
index|[
name|var5
operator|+
name|var6
operator|*
name|width
index|]
operator|=
name|var8
expr_stmt|;
if|if
condition|(
name|var7
operator|!=
name|var8
condition|)
block|{
name|int
name|var9
init|=
name|var7
operator|<
name|var8
condition|?
name|var7
else|:
name|var8
decl_stmt|;
name|var7
operator|=
name|var7
operator|>
name|var8
condition|?
name|var7
else|:
name|var8
expr_stmt|;
for|for
control|(
name|var8
operator|=
literal|0
init|;
name|var8
operator|<
name|listeners
operator|.
name|size
argument_list|()
condition|;
operator|++
name|var8
control|)
block|{
name|listeners
operator|.
name|get
argument_list|(
name|var8
argument_list|)
operator|.
name|queueChunks
argument_list|(
name|var5
operator|-
literal|1
argument_list|,
name|var9
operator|-
literal|1
argument_list|,
name|var6
operator|-
literal|1
argument_list|,
name|var5
operator|+
literal|1
argument_list|,
name|var7
operator|+
literal|1
argument_list|,
name|var6
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
name|MovingObjectPosition
name|clip
parameter_list|(
name|Vec3D
name|var1
parameter_list|,
name|Vec3D
name|var2
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Float
operator|.
name|isNaN
argument_list|(
name|var1
operator|.
name|x
argument_list|)
operator|&&
operator|!
name|Float
operator|.
name|isNaN
argument_list|(
name|var1
operator|.
name|y
argument_list|)
operator|&&
operator|!
name|Float
operator|.
name|isNaN
argument_list|(
name|var1
operator|.
name|z
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|Float
operator|.
name|isNaN
argument_list|(
name|var2
operator|.
name|x
argument_list|)
operator|&&
operator|!
name|Float
operator|.
name|isNaN
argument_list|(
name|var2
operator|.
name|y
argument_list|)
operator|&&
operator|!
name|Float
operator|.
name|isNaN
argument_list|(
name|var2
operator|.
name|z
argument_list|)
condition|)
block|{
name|int
name|var3
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|var2
operator|.
name|x
argument_list|)
decl_stmt|;
name|int
name|var4
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|var2
operator|.
name|y
argument_list|)
decl_stmt|;
name|int
name|var5
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|var2
operator|.
name|z
argument_list|)
decl_stmt|;
name|int
name|var6
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|var1
operator|.
name|x
argument_list|)
decl_stmt|;
name|int
name|var7
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|var1
operator|.
name|y
argument_list|)
decl_stmt|;
name|int
name|var8
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|var1
operator|.
name|z
argument_list|)
decl_stmt|;
name|int
name|var9
init|=
literal|20
decl_stmt|;
while|while
condition|(
name|var9
operator|--
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|Float
operator|.
name|isNaN
argument_list|(
name|var1
operator|.
name|x
argument_list|)
operator|||
name|Float
operator|.
name|isNaN
argument_list|(
name|var1
operator|.
name|y
argument_list|)
operator|||
name|Float
operator|.
name|isNaN
argument_list|(
name|var1
operator|.
name|z
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|var6
operator|==
name|var3
operator|&&
name|var7
operator|==
name|var4
operator|&&
name|var8
operator|==
name|var5
condition|)
block|{
return|return
literal|null
return|;
block|}
name|float
name|var10
init|=
literal|999.0F
decl_stmt|;
name|float
name|var11
init|=
literal|999.0F
decl_stmt|;
name|float
name|var12
init|=
literal|999.0F
decl_stmt|;
if|if
condition|(
name|var3
operator|>
name|var6
condition|)
block|{
name|var10
operator|=
name|var6
operator|+
literal|1.0F
expr_stmt|;
block|}
if|if
condition|(
name|var3
operator|<
name|var6
condition|)
block|{
name|var10
operator|=
name|var6
expr_stmt|;
block|}
if|if
condition|(
name|var4
operator|>
name|var7
condition|)
block|{
name|var11
operator|=
name|var7
operator|+
literal|1.0F
expr_stmt|;
block|}
if|if
condition|(
name|var4
operator|<
name|var7
condition|)
block|{
name|var11
operator|=
name|var7
expr_stmt|;
block|}
if|if
condition|(
name|var5
operator|>
name|var8
condition|)
block|{
name|var12
operator|=
name|var8
operator|+
literal|1.0F
expr_stmt|;
block|}
if|if
condition|(
name|var5
operator|<
name|var8
condition|)
block|{
name|var12
operator|=
name|var8
expr_stmt|;
block|}
name|float
name|var13
init|=
literal|999.0F
decl_stmt|;
name|float
name|var14
init|=
literal|999.0F
decl_stmt|;
name|float
name|var15
init|=
literal|999.0F
decl_stmt|;
name|float
name|var16
init|=
name|var2
operator|.
name|x
operator|-
name|var1
operator|.
name|x
decl_stmt|;
name|float
name|var17
init|=
name|var2
operator|.
name|y
operator|-
name|var1
operator|.
name|y
decl_stmt|;
name|float
name|var18
init|=
name|var2
operator|.
name|z
operator|-
name|var1
operator|.
name|z
decl_stmt|;
if|if
condition|(
name|var10
operator|!=
literal|999.0F
condition|)
block|{
name|var13
operator|=
operator|(
name|var10
operator|-
name|var1
operator|.
name|x
operator|)
operator|/
name|var16
expr_stmt|;
block|}
if|if
condition|(
name|var11
operator|!=
literal|999.0F
condition|)
block|{
name|var14
operator|=
operator|(
name|var11
operator|-
name|var1
operator|.
name|y
operator|)
operator|/
name|var17
expr_stmt|;
block|}
if|if
condition|(
name|var12
operator|!=
literal|999.0F
condition|)
block|{
name|var15
operator|=
operator|(
name|var12
operator|-
name|var1
operator|.
name|z
operator|)
operator|/
name|var18
expr_stmt|;
block|}
name|byte
name|var24
decl_stmt|;
if|if
condition|(
name|var13
operator|<
name|var14
operator|&&
name|var13
operator|<
name|var15
condition|)
block|{
if|if
condition|(
name|var3
operator|>
name|var6
condition|)
block|{
name|var24
operator|=
literal|4
expr_stmt|;
block|}
else|else
block|{
name|var24
operator|=
literal|5
expr_stmt|;
block|}
name|var1
operator|.
name|x
operator|=
name|var10
expr_stmt|;
name|var1
operator|.
name|y
operator|+=
name|var17
operator|*
name|var13
expr_stmt|;
name|var1
operator|.
name|z
operator|+=
name|var18
operator|*
name|var13
expr_stmt|;
block|}
if|else if
condition|(
name|var14
operator|<
name|var15
condition|)
block|{
if|if
condition|(
name|var4
operator|>
name|var7
condition|)
block|{
name|var24
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|var24
operator|=
literal|1
expr_stmt|;
block|}
name|var1
operator|.
name|x
operator|+=
name|var16
operator|*
name|var14
expr_stmt|;
name|var1
operator|.
name|y
operator|=
name|var11
expr_stmt|;
name|var1
operator|.
name|z
operator|+=
name|var18
operator|*
name|var14
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|var5
operator|>
name|var8
condition|)
block|{
name|var24
operator|=
literal|2
expr_stmt|;
block|}
else|else
block|{
name|var24
operator|=
literal|3
expr_stmt|;
block|}
name|var1
operator|.
name|x
operator|+=
name|var16
operator|*
name|var15
expr_stmt|;
name|var1
operator|.
name|y
operator|+=
name|var17
operator|*
name|var15
expr_stmt|;
name|var1
operator|.
name|z
operator|=
name|var12
expr_stmt|;
block|}
name|Vec3D
name|var20
decl_stmt|;
name|var6
operator|=
operator|(
name|int
operator|)
operator|(
operator|(
name|var20
operator|=
operator|new
name|Vec3D
argument_list|(
name|var1
operator|.
name|x
argument_list|,
name|var1
operator|.
name|y
argument_list|,
name|var1
operator|.
name|z
argument_list|)
operator|)
operator|.
name|x
operator|=
operator|(
name|float
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|var1
operator|.
name|x
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|var24
operator|==
literal|5
condition|)
block|{
operator|--
name|var6
expr_stmt|;
operator|++
name|var20
operator|.
name|x
expr_stmt|;
block|}
name|var7
operator|=
operator|(
name|int
operator|)
operator|(
name|var20
operator|.
name|y
operator|=
operator|(
name|float
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|var1
operator|.
name|y
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|var24
operator|==
literal|1
condition|)
block|{
operator|--
name|var7
expr_stmt|;
operator|++
name|var20
operator|.
name|y
expr_stmt|;
block|}
name|var8
operator|=
operator|(
name|int
operator|)
operator|(
name|var20
operator|.
name|z
operator|=
operator|(
name|float
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|var1
operator|.
name|z
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|var24
operator|==
literal|3
condition|)
block|{
operator|--
name|var8
expr_stmt|;
operator|++
name|var20
operator|.
name|z
expr_stmt|;
block|}
name|int
name|var22
init|=
name|getTile
argument_list|(
name|var6
argument_list|,
name|var7
argument_list|,
name|var8
argument_list|)
decl_stmt|;
name|Block
name|var21
init|=
name|Block
operator|.
name|blocks
index|[
name|var22
index|]
decl_stmt|;
if|if
condition|(
name|var22
operator|>
literal|0
operator|&&
name|var21
operator|.
name|getLiquidType
argument_list|()
operator|==
name|LiquidType
operator|.
name|notLiquid
condition|)
block|{
name|MovingObjectPosition
name|var23
decl_stmt|;
if|if
condition|(
name|var21
operator|.
name|isCube
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|var23
operator|=
name|var21
operator|.
name|clip
argument_list|(
name|var6
argument_list|,
name|var7
argument_list|,
name|var8
argument_list|,
name|var1
argument_list|,
name|var2
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
return|return
name|var23
return|;
block|}
block|}
if|else if
condition|(
operator|(
name|var23
operator|=
name|var21
operator|.
name|clip
argument_list|(
name|var6
argument_list|,
name|var7
argument_list|,
name|var8
argument_list|,
name|var1
argument_list|,
name|var2
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
return|return
name|var23
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|boolean
name|containsAnyLiquid
parameter_list|(
name|AABB
name|var1
parameter_list|)
block|{
name|int
name|var2
init|=
operator|(
name|int
operator|)
name|var1
operator|.
name|x0
decl_stmt|;
name|int
name|var3
init|=
operator|(
name|int
operator|)
name|var1
operator|.
name|x1
operator|+
literal|1
decl_stmt|;
name|int
name|var4
init|=
operator|(
name|int
operator|)
name|var1
operator|.
name|y0
decl_stmt|;
name|int
name|var5
init|=
operator|(
name|int
operator|)
name|var1
operator|.
name|y1
operator|+
literal|1
decl_stmt|;
name|int
name|var6
init|=
operator|(
name|int
operator|)
name|var1
operator|.
name|z0
decl_stmt|;
name|int
name|var7
init|=
operator|(
name|int
operator|)
name|var1
operator|.
name|z1
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|var1
operator|.
name|x0
operator|<
literal|0.0F
condition|)
block|{
operator|--
name|var2
expr_stmt|;
block|}
if|if
condition|(
name|var1
operator|.
name|y0
operator|<
literal|0.0F
condition|)
block|{
operator|--
name|var4
expr_stmt|;
block|}
if|if
condition|(
name|var1
operator|.
name|z0
operator|<
literal|0.0F
condition|)
block|{
operator|--
name|var6
expr_stmt|;
block|}
if|if
condition|(
name|var2
operator|<
literal|0
condition|)
block|{
name|var2
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|var4
operator|<
literal|0
condition|)
block|{
name|var4
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|var6
operator|<
literal|0
condition|)
block|{
name|var6
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|var3
operator|>
name|width
condition|)
block|{
name|var3
operator|=
name|width
expr_stmt|;
block|}
if|if
condition|(
name|var5
operator|>
name|height
condition|)
block|{
name|var5
operator|=
name|height
expr_stmt|;
block|}
if|if
condition|(
name|var7
operator|>
name|length
condition|)
block|{
name|var7
operator|=
name|length
expr_stmt|;
block|}
for|for
control|(
name|int
name|var10
init|=
name|var2
init|;
name|var10
operator|<
name|var3
condition|;
operator|++
name|var10
control|)
block|{
for|for
control|(
name|var2
operator|=
name|var4
init|;
name|var2
operator|<
name|var5
condition|;
operator|++
name|var2
control|)
block|{
for|for
control|(
name|int
name|var8
init|=
name|var6
init|;
name|var8
operator|<
name|var7
condition|;
operator|++
name|var8
control|)
block|{
name|Block
name|var9
decl_stmt|;
if|if
condition|(
operator|(
name|var9
operator|=
name|Block
operator|.
name|blocks
index|[
name|getTile
argument_list|(
name|var10
argument_list|,
name|var2
argument_list|,
name|var8
argument_list|)
index|]
operator|)
operator|!=
literal|null
operator|&&
name|var9
operator|.
name|getLiquidType
argument_list|()
operator|!=
name|LiquidType
operator|.
name|notLiquid
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|containsBlock
parameter_list|(
name|AABB
name|var1
parameter_list|,
name|Block
name|var2
parameter_list|)
block|{
name|int
name|var3
init|=
operator|(
name|int
operator|)
name|var1
operator|.
name|x0
decl_stmt|;
name|int
name|var4
init|=
operator|(
name|int
operator|)
name|var1
operator|.
name|x1
operator|+
literal|1
decl_stmt|;
name|int
name|var5
init|=
operator|(
name|int
operator|)
name|var1
operator|.
name|y0
decl_stmt|;
name|int
name|var6
init|=
operator|(
name|int
operator|)
name|var1
operator|.
name|y1
operator|+
literal|1
decl_stmt|;
name|int
name|var7
init|=
operator|(
name|int
operator|)
name|var1
operator|.
name|z0
decl_stmt|;
name|int
name|var8
init|=
operator|(
name|int
operator|)
name|var1
operator|.
name|z1
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|var1
operator|.
name|x0
operator|<
literal|0.0F
condition|)
block|{
operator|--
name|var3
expr_stmt|;
block|}
if|if
condition|(
name|var1
operator|.
name|y0
operator|<
literal|0.0F
condition|)
block|{
operator|--
name|var5
expr_stmt|;
block|}
if|if
condition|(
name|var1
operator|.
name|z0
operator|<
literal|0.0F
condition|)
block|{
operator|--
name|var7
expr_stmt|;
block|}
if|if
condition|(
name|var3
operator|<
literal|0
condition|)
block|{
name|var3
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|var5
operator|<
literal|0
condition|)
block|{
name|var5
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|var7
operator|<
literal|0
condition|)
block|{
name|var7
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|var4
operator|>
name|width
condition|)
block|{
name|var4
operator|=
name|width
expr_stmt|;
block|}
if|if
condition|(
name|var6
operator|>
name|height
condition|)
block|{
name|var6
operator|=
name|height
expr_stmt|;
block|}
if|if
condition|(
name|var8
operator|>
name|length
condition|)
block|{
name|var8
operator|=
name|length
expr_stmt|;
block|}
for|for
control|(
name|int
name|var11
init|=
name|var3
init|;
name|var11
operator|<
name|var4
condition|;
operator|++
name|var11
control|)
block|{
for|for
control|(
name|var3
operator|=
name|var5
init|;
name|var3
operator|<
name|var6
condition|;
operator|++
name|var3
control|)
block|{
for|for
control|(
name|int
name|var9
init|=
name|var7
init|;
name|var9
operator|<
name|var8
condition|;
operator|++
name|var9
control|)
block|{
name|Block
name|var10
decl_stmt|;
if|if
condition|(
operator|(
name|var10
operator|=
name|Block
operator|.
name|blocks
index|[
name|getTile
argument_list|(
name|var11
argument_list|,
name|var3
argument_list|,
name|var9
argument_list|)
index|]
operator|)
operator|!=
literal|null
operator|&&
name|var10
operator|==
name|var2
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|containsLiquid
parameter_list|(
name|AABB
name|var1
parameter_list|,
name|LiquidType
name|var2
parameter_list|)
block|{
name|int
name|var3
init|=
operator|(
name|int
operator|)
name|var1
operator|.
name|x0
decl_stmt|;
name|int
name|var4
init|=
operator|(
name|int
operator|)
name|var1
operator|.
name|x1
operator|+
literal|1
decl_stmt|;
name|int
name|var5
init|=
operator|(
name|int
operator|)
name|var1
operator|.
name|y0
decl_stmt|;
name|int
name|var6
init|=
operator|(
name|int
operator|)
name|var1
operator|.
name|y1
operator|+
literal|1
decl_stmt|;
name|int
name|var7
init|=
operator|(
name|int
operator|)
name|var1
operator|.
name|z0
decl_stmt|;
name|int
name|var8
init|=
operator|(
name|int
operator|)
name|var1
operator|.
name|z1
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|var1
operator|.
name|x0
operator|<
literal|0.0F
condition|)
block|{
operator|--
name|var3
expr_stmt|;
block|}
if|if
condition|(
name|var1
operator|.
name|y0
operator|<
literal|0.0F
condition|)
block|{
operator|--
name|var5
expr_stmt|;
block|}
if|if
condition|(
name|var1
operator|.
name|z0
operator|<
literal|0.0F
condition|)
block|{
operator|--
name|var7
expr_stmt|;
block|}
if|if
condition|(
name|var3
operator|<
literal|0
condition|)
block|{
name|var3
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|var5
operator|<
literal|0
condition|)
block|{
name|var5
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|var7
operator|<
literal|0
condition|)
block|{
name|var7
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|var4
operator|>
name|width
condition|)
block|{
name|var4
operator|=
name|width
expr_stmt|;
block|}
if|if
condition|(
name|var6
operator|>
name|height
condition|)
block|{
name|var6
operator|=
name|height
expr_stmt|;
block|}
if|if
condition|(
name|var8
operator|>
name|length
condition|)
block|{
name|var8
operator|=
name|length
expr_stmt|;
block|}
for|for
control|(
name|int
name|var11
init|=
name|var3
init|;
name|var11
operator|<
name|var4
condition|;
operator|++
name|var11
control|)
block|{
for|for
control|(
name|var3
operator|=
name|var5
init|;
name|var3
operator|<
name|var6
condition|;
operator|++
name|var3
control|)
block|{
for|for
control|(
name|int
name|var9
init|=
name|var7
init|;
name|var9
operator|<
name|var8
condition|;
operator|++
name|var9
control|)
block|{
name|Block
name|var10
decl_stmt|;
if|if
condition|(
operator|(
name|var10
operator|=
name|Block
operator|.
name|blocks
index|[
name|getTile
argument_list|(
name|var11
argument_list|,
name|var3
argument_list|,
name|var9
argument_list|)
index|]
operator|)
operator|!=
literal|null
operator|&&
name|var10
operator|.
name|getLiquidType
argument_list|()
operator|==
name|var2
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|byte
index|[]
name|copyBlocks
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|blocks
argument_list|,
name|blocks
operator|.
name|length
argument_list|)
return|;
block|}
specifier|public
name|int
name|countInstanceOf
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|var1
parameter_list|)
block|{
name|int
name|var2
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|var3
init|=
literal|0
init|;
name|var3
operator|<
name|blockMap
operator|.
name|all
operator|.
name|size
argument_list|()
condition|;
operator|++
name|var3
control|)
block|{
name|Entity
name|var4
init|=
name|blockMap
operator|.
name|all
operator|.
name|get
argument_list|(
name|var3
argument_list|)
decl_stmt|;
if|if
condition|(
name|var1
operator|.
name|isAssignableFrom
argument_list|(
name|var4
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
operator|++
name|var2
expr_stmt|;
block|}
block|}
return|return
name|var2
return|;
block|}
specifier|public
name|void
name|explode
parameter_list|(
name|Entity
name|var1
parameter_list|,
name|float
name|var2
parameter_list|,
name|float
name|var3
parameter_list|,
name|float
name|var4
parameter_list|,
name|float
name|var5
parameter_list|)
block|{
name|int
name|var6
init|=
operator|(
name|int
operator|)
operator|(
name|var2
operator|-
name|var5
operator|-
literal|1.0F
operator|)
decl_stmt|;
name|int
name|var7
init|=
operator|(
name|int
operator|)
operator|(
name|var2
operator|+
name|var5
operator|+
literal|1.0F
operator|)
decl_stmt|;
name|int
name|var8
init|=
operator|(
name|int
operator|)
operator|(
name|var3
operator|-
name|var5
operator|-
literal|1.0F
operator|)
decl_stmt|;
name|int
name|var9
init|=
operator|(
name|int
operator|)
operator|(
name|var3
operator|+
name|var5
operator|+
literal|1.0F
operator|)
decl_stmt|;
name|int
name|var10
init|=
operator|(
name|int
operator|)
operator|(
name|var4
operator|-
name|var5
operator|-
literal|1.0F
operator|)
decl_stmt|;
name|int
name|var11
init|=
operator|(
name|int
operator|)
operator|(
name|var4
operator|+
name|var5
operator|+
literal|1.0F
operator|)
decl_stmt|;
name|int
name|var13
decl_stmt|;
name|float
name|var15
decl_stmt|;
name|float
name|var16
decl_stmt|;
for|for
control|(
name|int
name|var12
init|=
name|var6
init|;
name|var12
operator|<
name|var7
condition|;
operator|++
name|var12
control|)
block|{
for|for
control|(
name|var13
operator|=
name|var9
operator|-
literal|1
init|;
name|var13
operator|>=
name|var8
condition|;
operator|--
name|var13
control|)
block|{
for|for
control|(
name|int
name|var14
init|=
name|var10
init|;
name|var14
operator|<
name|var11
condition|;
operator|++
name|var14
control|)
block|{
name|var15
operator|=
name|var12
operator|+
literal|0.5F
operator|-
name|var2
expr_stmt|;
name|var16
operator|=
name|var13
operator|+
literal|0.5F
operator|-
name|var3
expr_stmt|;
name|float
name|var17
init|=
name|var14
operator|+
literal|0.5F
operator|-
name|var4
decl_stmt|;
name|int
name|var19
decl_stmt|;
if|if
condition|(
name|var12
operator|>=
literal|0
operator|&&
name|var13
operator|>=
literal|0
operator|&&
name|var14
operator|>=
literal|0
operator|&&
name|var12
operator|<
name|width
operator|&&
name|var13
operator|<
name|height
operator|&&
name|var14
operator|<
name|length
operator|&&
name|var15
operator|*
name|var15
operator|+
name|var16
operator|*
name|var16
operator|+
name|var17
operator|*
name|var17
operator|<
name|var5
operator|*
name|var5
operator|&&
operator|(
name|var19
operator|=
name|getTile
argument_list|(
name|var12
argument_list|,
name|var13
argument_list|,
name|var14
argument_list|)
operator|)
operator|>
literal|0
operator|&&
name|Block
operator|.
name|blocks
index|[
name|var19
index|]
operator|.
name|canExplode
argument_list|()
condition|)
block|{
name|Block
operator|.
name|blocks
index|[
name|var19
index|]
operator|.
name|dropItems
argument_list|(
name|this
argument_list|,
name|var12
argument_list|,
name|var13
argument_list|,
name|var14
argument_list|,
literal|0.3F
argument_list|)
expr_stmt|;
name|setTile
argument_list|(
name|var12
argument_list|,
name|var13
argument_list|,
name|var14
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Block
operator|.
name|blocks
index|[
name|var19
index|]
operator|.
name|explode
argument_list|(
name|this
argument_list|,
name|var12
argument_list|,
name|var13
argument_list|,
name|var14
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|List
argument_list|<
name|?
argument_list|>
name|var18
init|=
name|blockMap
operator|.
name|getEntities
argument_list|(
name|var1
argument_list|,
name|var6
argument_list|,
name|var8
argument_list|,
name|var10
argument_list|,
name|var7
argument_list|,
name|var9
argument_list|,
name|var11
argument_list|)
decl_stmt|;
for|for
control|(
name|var13
operator|=
literal|0
init|;
name|var13
operator|<
name|var18
operator|.
name|size
argument_list|()
condition|;
operator|++
name|var13
control|)
block|{
name|Entity
name|var20
decl_stmt|;
if|if
condition|(
operator|(
name|var15
operator|=
operator|(
name|var20
operator|=
operator|(
name|Entity
operator|)
name|var18
operator|.
name|get
argument_list|(
name|var13
argument_list|)
operator|)
operator|.
name|distanceTo
argument_list|(
name|var2
argument_list|,
name|var3
argument_list|,
name|var4
argument_list|)
operator|/
name|var5
operator|)
operator|<=
literal|1.0F
condition|)
block|{
name|var16
operator|=
literal|1.0F
operator|-
name|var15
expr_stmt|;
name|var20
operator|.
name|hurt
argument_list|(
name|var1
argument_list|,
operator|(
name|int
operator|)
operator|(
name|var16
operator|*
literal|15.0F
operator|+
literal|1.0F
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|finalize
parameter_list|()
block|{
block|}
specifier|public
name|List
argument_list|<
name|Entity
argument_list|>
name|findEntities
parameter_list|(
name|Entity
name|var1
parameter_list|,
name|AABB
name|var2
parameter_list|)
block|{
return|return
name|blockMap
operator|.
name|getEntities
argument_list|(
name|var1
argument_list|,
name|var2
argument_list|)
return|;
block|}
specifier|public
name|void
name|findSpawn
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|desiredSpawn
operator|!=
literal|null
condition|)
block|{
name|xSpawn
operator|=
name|this
operator|.
name|desiredSpawn
index|[
literal|0
index|]
expr_stmt|;
name|ySpawn
operator|=
name|this
operator|.
name|desiredSpawn
index|[
literal|1
index|]
expr_stmt|;
name|zSpawn
operator|=
name|this
operator|.
name|desiredSpawn
index|[
literal|2
index|]
expr_stmt|;
name|this
operator|.
name|desiredSpawn
operator|=
literal|null
expr_stmt|;
return|return;
block|}
name|Random
name|var1
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|var2
init|=
literal|0
decl_stmt|;
name|int
name|var3
decl_stmt|;
name|int
name|var4
decl_stmt|;
name|int
name|var5
decl_stmt|;
do|do
block|{
operator|++
name|var2
expr_stmt|;
name|var3
operator|=
name|var1
operator|.
name|nextInt
argument_list|(
name|width
operator|/
literal|2
argument_list|)
operator|+
name|width
operator|/
literal|4
expr_stmt|;
name|var4
operator|=
name|var1
operator|.
name|nextInt
argument_list|(
name|length
operator|/
literal|2
argument_list|)
operator|+
name|length
operator|/
literal|4
expr_stmt|;
name|var5
operator|=
name|getHighestTile
argument_list|(
name|var3
argument_list|,
name|var4
argument_list|)
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|var2
operator|==
literal|10000
condition|)
block|{
name|xSpawn
operator|=
name|var3
expr_stmt|;
name|ySpawn
operator|=
operator|-
literal|100
expr_stmt|;
name|zSpawn
operator|=
name|var4
expr_stmt|;
return|return;
block|}
block|}
do|while
condition|(
name|var5
operator|<=
name|getWaterLevel
argument_list|()
condition|)
do|;
name|xSpawn
operator|=
name|var3
expr_stmt|;
name|ySpawn
operator|=
name|var5
expr_stmt|;
name|zSpawn
operator|=
name|var4
expr_stmt|;
block|}
specifier|public
name|Entity
name|findSubclassOf
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|var1
parameter_list|)
block|{
for|for
control|(
name|int
name|var2
init|=
literal|0
init|;
name|var2
operator|<
name|blockMap
operator|.
name|all
operator|.
name|size
argument_list|()
condition|;
operator|++
name|var2
control|)
block|{
name|Entity
name|var3
init|=
name|blockMap
operator|.
name|all
operator|.
name|get
argument_list|(
name|var2
argument_list|)
decl_stmt|;
if|if
condition|(
name|var1
operator|.
name|isAssignableFrom
argument_list|(
name|var3
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|var3
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|float
name|getBrightness
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|int
name|var3
parameter_list|)
block|{
return|return
name|isLit
argument_list|(
name|var1
argument_list|,
name|var2
argument_list|,
name|var3
argument_list|)
condition|?
literal|1.0F
else|:
literal|0.6F
return|;
block|}
specifier|public
name|ColorCache
name|getBrightnessColor
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|int
name|var3
parameter_list|)
block|{
name|float
name|a
init|=
literal|0.6F
decl_stmt|,
name|b
init|=
literal|0.6F
decl_stmt|,
name|c
init|=
literal|0.6F
decl_stmt|;
name|float
name|d
init|=
literal|1.0F
decl_stmt|,
name|e
init|=
literal|1.0F
decl_stmt|,
name|f
init|=
literal|1.0F
decl_stmt|;
if|if
condition|(
name|customShadowColour
operator|!=
literal|null
condition|)
block|{
name|a
operator|=
name|customShadowColour
operator|.
name|R
expr_stmt|;
name|b
operator|=
name|customShadowColour
operator|.
name|G
expr_stmt|;
name|c
operator|=
name|customShadowColour
operator|.
name|B
expr_stmt|;
block|}
if|if
condition|(
name|customLightColour
operator|!=
literal|null
condition|)
block|{
name|d
operator|=
name|customLightColour
operator|.
name|R
expr_stmt|;
name|e
operator|=
name|customLightColour
operator|.
name|G
expr_stmt|;
name|f
operator|=
name|customLightColour
operator|.
name|B
expr_stmt|;
block|}
return|return
name|isLit
argument_list|(
name|var1
argument_list|,
name|var2
argument_list|,
name|var3
argument_list|)
condition|?
operator|new
name|ColorCache
argument_list|(
name|d
argument_list|,
name|e
argument_list|,
name|f
argument_list|)
else|:
operator|new
name|ColorCache
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
return|;
block|}
specifier|public
name|float
name|getCaveness
parameter_list|(
name|Entity
name|var1
parameter_list|)
block|{
name|float
name|var2
init|=
name|MathHelper
operator|.
name|cos
argument_list|(
operator|-
name|var1
operator|.
name|yRot
operator|*
literal|0.017453292F
operator|+
literal|3.1415927F
argument_list|)
decl_stmt|;
name|float
name|var3
init|=
name|MathHelper
operator|.
name|sin
argument_list|(
operator|-
name|var1
operator|.
name|yRot
operator|*
literal|0.017453292F
operator|+
literal|3.1415927F
argument_list|)
decl_stmt|;
name|float
name|var4
init|=
name|MathHelper
operator|.
name|cos
argument_list|(
operator|-
name|var1
operator|.
name|xRot
operator|*
literal|0.017453292F
argument_list|)
decl_stmt|;
name|float
name|var5
init|=
name|MathHelper
operator|.
name|sin
argument_list|(
operator|-
name|var1
operator|.
name|xRot
operator|*
literal|0.017453292F
argument_list|)
decl_stmt|;
name|float
name|var6
init|=
name|var1
operator|.
name|x
decl_stmt|;
name|float
name|var7
init|=
name|var1
operator|.
name|y
decl_stmt|;
name|float
name|var21
init|=
name|var1
operator|.
name|z
decl_stmt|;
name|float
name|var8
init|=
literal|1.6F
decl_stmt|;
name|float
name|var9
init|=
literal|0.0F
decl_stmt|;
name|float
name|var10
init|=
literal|0.0F
decl_stmt|;
for|for
control|(
name|int
name|var11
init|=
literal|0
init|;
name|var11
operator|<=
literal|200
condition|;
operator|++
name|var11
control|)
block|{
name|float
name|var12
init|=
operator|(
operator|(
name|float
operator|)
name|var11
operator|/
operator|(
name|float
operator|)
literal|200
operator|-
literal|0.5F
operator|)
operator|*
literal|2.0F
decl_stmt|;
name|int
name|var13
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|var13
operator|<=
literal|200
condition|)
block|{
name|float
name|var14
init|=
operator|(
operator|(
name|float
operator|)
name|var13
operator|/
operator|(
name|float
operator|)
literal|200
operator|-
literal|0.5F
operator|)
operator|*
name|var8
decl_stmt|;
name|float
name|var16
init|=
name|var4
operator|*
name|var14
operator|+
name|var5
decl_stmt|;
name|var14
operator|=
name|var4
operator|-
name|var5
operator|*
name|var14
expr_stmt|;
name|float
name|var17
init|=
name|var2
operator|*
name|var12
operator|+
name|var3
operator|*
name|var14
decl_stmt|;
name|var14
operator|=
name|var2
operator|*
name|var14
operator|-
name|var3
operator|*
name|var12
expr_stmt|;
name|int
name|var15
init|=
literal|0
decl_stmt|;
comment|// here
if|if
condition|(
name|var15
operator|<
literal|10
condition|)
block|{
name|float
name|var18
init|=
name|var6
operator|+
name|var17
operator|*
name|var15
operator|*
literal|0.8F
decl_stmt|;
name|float
name|var19
init|=
name|var7
operator|+
name|var16
operator|*
name|var15
operator|*
literal|0.8F
decl_stmt|;
name|float
name|var20
init|=
name|var21
operator|+
name|var14
operator|*
name|var15
operator|*
literal|0.8F
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|isSolid
argument_list|(
name|var18
argument_list|,
name|var19
argument_list|,
name|var20
argument_list|)
condition|)
block|{
operator|++
name|var9
expr_stmt|;
if|if
condition|(
name|isLit
argument_list|(
operator|(
name|int
operator|)
name|var18
argument_list|,
operator|(
name|int
operator|)
name|var19
argument_list|,
operator|(
name|int
operator|)
name|var20
argument_list|)
condition|)
block|{
operator|++
name|var10
expr_stmt|;
block|}
operator|++
name|var15
expr_stmt|;
block|}
block|}
operator|++
name|var13
expr_stmt|;
block|}
block|}
if|if
condition|(
name|var9
operator|==
literal|0.0F
condition|)
block|{
return|return
literal|0.0F
return|;
block|}
else|else
block|{
name|float
name|var22
decl_stmt|;
if|if
condition|(
operator|(
name|var22
operator|=
name|var10
operator|/
name|var9
operator|/
literal|0.1F
operator|)
operator|>
literal|1.0F
condition|)
block|{
name|var22
operator|=
literal|1.0F
expr_stmt|;
block|}
name|var22
operator|=
literal|1.0F
operator|-
name|var22
expr_stmt|;
return|return
literal|1.0F
operator|-
name|var22
operator|*
name|var22
operator|*
name|var22
return|;
block|}
block|}
specifier|public
name|float
name|getCaveness
parameter_list|(
name|float
name|var1
parameter_list|,
name|float
name|var2
parameter_list|,
name|float
name|var3
parameter_list|,
name|float
name|var4
parameter_list|)
block|{
name|int
name|var5
init|=
operator|(
name|int
operator|)
name|var1
decl_stmt|;
name|int
name|var14
init|=
operator|(
name|int
operator|)
name|var2
decl_stmt|;
name|int
name|var6
init|=
operator|(
name|int
operator|)
name|var3
decl_stmt|;
name|float
name|var7
init|=
literal|0.0F
decl_stmt|;
name|float
name|var8
init|=
literal|0.0F
decl_stmt|;
for|for
control|(
name|int
name|var9
init|=
name|var5
operator|-
literal|6
init|;
name|var9
operator|<=
name|var5
operator|+
literal|6
condition|;
operator|++
name|var9
control|)
block|{
for|for
control|(
name|int
name|var10
init|=
name|var6
operator|-
literal|6
init|;
name|var10
operator|<=
name|var6
operator|+
literal|6
condition|;
operator|++
name|var10
control|)
block|{
if|if
condition|(
name|isInBounds
argument_list|(
name|var9
argument_list|,
name|var14
argument_list|,
name|var10
argument_list|)
operator|&&
operator|!
name|isSolidTile
argument_list|(
name|var9
argument_list|,
name|var14
argument_list|,
name|var10
argument_list|)
condition|)
block|{
name|float
name|var11
init|=
name|var9
operator|+
literal|0.5F
operator|-
name|var1
decl_stmt|;
name|float
name|var12
decl_stmt|;
name|float
name|var13
decl_stmt|;
for|for
control|(
name|var13
operator|=
operator|(
name|float
operator|)
operator|(
name|Math
operator|.
name|atan2
argument_list|(
name|var12
operator|=
name|var10
operator|+
literal|0.5F
operator|-
name|var3
argument_list|,
name|var11
argument_list|)
operator|-
name|var4
operator|*
literal|3.1415927F
operator|/
literal|180.0F
operator|+
literal|1.5707963705062866D
operator|)
init|;
name|var13
operator|<
operator|-
literal|3.1415927F
condition|;
name|var13
operator|+=
literal|6.2831855F
control|)
block|{
empty_stmt|;
block|}
while|while
condition|(
name|var13
operator|>=
literal|3.1415927F
condition|)
block|{
name|var13
operator|-=
literal|6.2831855F
expr_stmt|;
block|}
if|if
condition|(
name|var13
operator|<
literal|0.0F
condition|)
block|{
name|var13
operator|=
operator|-
name|var13
expr_stmt|;
block|}
name|var11
operator|=
name|MathHelper
operator|.
name|sqrt
argument_list|(
name|var11
operator|*
name|var11
operator|+
literal|4.0F
operator|+
name|var12
operator|*
name|var12
argument_list|)
expr_stmt|;
name|var11
operator|=
literal|1.0F
operator|/
name|var11
expr_stmt|;
if|if
condition|(
name|var13
operator|>
literal|1.0F
condition|)
block|{
name|var11
operator|=
literal|0.0F
expr_stmt|;
block|}
if|if
condition|(
name|var11
operator|<
literal|0.0F
condition|)
block|{
name|var11
operator|=
literal|0.0F
expr_stmt|;
block|}
name|var8
operator|+=
name|var11
expr_stmt|;
if|if
condition|(
name|isLit
argument_list|(
name|var9
argument_list|,
name|var14
argument_list|,
name|var10
argument_list|)
condition|)
block|{
name|var7
operator|+=
name|var11
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|var8
operator|==
literal|0.0F
condition|)
block|{
return|return
literal|0.0F
return|;
block|}
else|else
block|{
return|return
name|var7
operator|/
name|var8
return|;
block|}
block|}
specifier|public
name|ArrayList
argument_list|<
name|AABB
argument_list|>
name|getCubes
parameter_list|(
name|AABB
name|var1
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|AABB
argument_list|>
name|var2
init|=
operator|new
name|ArrayList
argument_list|<
name|AABB
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|var3
init|=
operator|(
name|int
operator|)
name|var1
operator|.
name|x0
decl_stmt|;
name|int
name|var4
init|=
operator|(
name|int
operator|)
name|var1
operator|.
name|x1
operator|+
literal|1
decl_stmt|;
name|int
name|var5
init|=
operator|(
name|int
operator|)
name|var1
operator|.
name|y0
decl_stmt|;
name|int
name|var6
init|=
operator|(
name|int
operator|)
name|var1
operator|.
name|y1
operator|+
literal|1
decl_stmt|;
name|int
name|var7
init|=
operator|(
name|int
operator|)
name|var1
operator|.
name|z0
decl_stmt|;
name|int
name|var8
init|=
operator|(
name|int
operator|)
name|var1
operator|.
name|z1
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|var1
operator|.
name|x0
operator|<
literal|0.0F
condition|)
block|{
operator|--
name|var3
expr_stmt|;
block|}
if|if
condition|(
name|var1
operator|.
name|y0
operator|<
literal|0.0F
condition|)
block|{
operator|--
name|var5
expr_stmt|;
block|}
if|if
condition|(
name|var1
operator|.
name|z0
operator|<
literal|0.0F
condition|)
block|{
operator|--
name|var7
expr_stmt|;
block|}
for|for
control|(
init|;
name|var3
operator|<
name|var4
condition|;
operator|++
name|var3
control|)
block|{
for|for
control|(
name|int
name|var9
init|=
name|var5
init|;
name|var9
operator|<
name|var6
condition|;
operator|++
name|var9
control|)
block|{
for|for
control|(
name|int
name|var10
init|=
name|var7
init|;
name|var10
operator|<
name|var8
condition|;
operator|++
name|var10
control|)
block|{
name|AABB
name|var11
decl_stmt|;
if|if
condition|(
name|var3
operator|>=
literal|0
operator|&&
name|var9
operator|>=
literal|0
operator|&&
name|var10
operator|>=
literal|0
operator|&&
name|var3
operator|<
name|width
operator|&&
name|var9
operator|<
name|height
operator|&&
name|var10
operator|<
name|length
condition|)
block|{
name|Block
name|var12
decl_stmt|;
if|if
condition|(
operator|(
name|var12
operator|=
name|Block
operator|.
name|blocks
index|[
name|getTile
argument_list|(
name|var3
argument_list|,
name|var9
argument_list|,
name|var10
argument_list|)
index|]
operator|)
operator|!=
literal|null
operator|&&
operator|(
name|var11
operator|=
name|var12
operator|.
name|getCollisionBox
argument_list|(
name|var3
argument_list|,
name|var9
argument_list|,
name|var10
argument_list|)
operator|)
operator|!=
literal|null
operator|&&
name|var1
operator|.
name|intersectsInner
argument_list|(
name|var11
argument_list|)
condition|)
block|{
name|var2
operator|.
name|add
argument_list|(
name|var11
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|var3
operator|<
literal|0
operator|||
name|var9
operator|<
literal|0
operator|||
name|var10
operator|<
literal|0
operator|||
name|var3
operator|>=
name|width
operator|||
name|var10
operator|>=
name|length
operator|)
operator|&&
operator|(
name|var11
operator|=
name|Block
operator|.
name|BEDROCK
operator|.
name|getCollisionBox
argument_list|(
name|var3
argument_list|,
name|var9
argument_list|,
name|var10
argument_list|)
operator|)
operator|!=
literal|null
operator|&&
name|var1
operator|.
name|intersectsInner
argument_list|(
name|var11
argument_list|)
condition|)
block|{
name|var2
operator|.
name|add
argument_list|(
name|var11
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|var2
return|;
block|}
specifier|public
name|float
name|getGroundLevel
parameter_list|()
block|{
return|return
name|getWaterLevel
argument_list|()
operator|-
literal|2.0F
return|;
block|}
specifier|public
name|int
name|getHighestTile
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|)
block|{
name|int
name|var3
decl_stmt|;
for|for
control|(
name|var3
operator|=
name|height
init|;
operator|(
name|getTile
argument_list|(
name|var1
argument_list|,
name|var3
operator|-
literal|1
argument_list|,
name|var2
argument_list|)
operator|==
literal|0
operator|||
name|Block
operator|.
name|blocks
index|[
name|getTile
argument_list|(
name|var1
argument_list|,
name|var3
operator|-
literal|1
argument_list|,
name|var2
argument_list|)
index|]
operator|.
name|getLiquidType
argument_list|()
operator|!=
name|LiquidType
operator|.
name|notLiquid
operator|)
operator|&&
name|var3
operator|>
literal|0
condition|;
operator|--
name|var3
control|)
block|{
empty_stmt|;
block|}
return|return
name|var3
return|;
block|}
specifier|public
name|LiquidType
name|getLiquid
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|int
name|var3
parameter_list|)
block|{
name|int
name|var4
decl_stmt|;
return|return
operator|(
name|var4
operator|=
name|getTile
argument_list|(
name|var1
argument_list|,
name|var2
argument_list|,
name|var3
argument_list|)
operator|)
operator|==
literal|0
condition|?
name|LiquidType
operator|.
name|notLiquid
else|:
name|Block
operator|.
name|blocks
index|[
name|var4
index|]
operator|.
name|getLiquidType
argument_list|()
return|;
block|}
specifier|public
name|Entity
name|getPlayer
parameter_list|()
block|{
return|return
name|player
return|;
block|}
specifier|public
name|int
name|getTile
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|int
name|var3
parameter_list|)
block|{
return|return
name|var1
operator|>=
literal|0
operator|&&
name|var2
operator|>=
literal|0
operator|&&
name|var3
operator|>=
literal|0
operator|&&
name|var1
operator|<
name|width
operator|&&
name|var2
operator|<
name|height
operator|&&
name|var3
operator|<
name|length
condition|?
name|blocks
index|[
operator|(
name|var2
operator|*
name|length
operator|+
name|var3
operator|)
operator|*
name|width
operator|+
name|var1
index|]
operator|&
literal|255
else|:
literal|0
return|;
block|}
specifier|public
name|float
name|getWaterLevel
parameter_list|()
block|{
return|return
name|waterLevel
return|;
block|}
specifier|public
name|void
name|initTransient
parameter_list|()
block|{
if|if
condition|(
name|blocks
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The level is corrupt!"
argument_list|)
throw|;
block|}
else|else
block|{
name|listeners
operator|=
operator|new
name|ArrayList
argument_list|<
name|LevelRenderer
argument_list|>
argument_list|()
expr_stmt|;
name|blockers
operator|=
operator|new
name|int
index|[
name|width
operator|*
name|length
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|blockers
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|calcLightDepths
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|random
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
name|randId
operator|=
name|random
operator|.
name|nextInt
argument_list|()
expr_stmt|;
name|tickList
operator|=
operator|new
name|ArrayList
argument_list|<
name|NextTickListEntry
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|waterLevel
operator|==
literal|0
condition|)
block|{
name|waterLevel
operator|=
name|height
operator|/
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|skyColor
operator|==
literal|0
condition|)
block|{
name|skyColor
operator|=
literal|10079487
expr_stmt|;
block|}
if|if
condition|(
name|fogColor
operator|==
literal|0
condition|)
block|{
name|fogColor
operator|=
literal|16777215
expr_stmt|;
block|}
if|if
condition|(
name|cloudColor
operator|==
literal|0
condition|)
block|{
name|cloudColor
operator|=
literal|16777215
expr_stmt|;
block|}
if|if
condition|(
name|xSpawn
operator|==
literal|0
operator|&&
name|ySpawn
operator|==
literal|0
operator|&&
name|zSpawn
operator|==
literal|0
condition|)
block|{
name|findSpawn
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|blockMap
operator|==
literal|null
condition|)
block|{
name|blockMap
operator|=
operator|new
name|BlockMap
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|isFree
parameter_list|(
name|AABB
name|var1
parameter_list|)
block|{
return|return
name|blockMap
operator|.
name|getEntities
argument_list|(
operator|(
name|Entity
operator|)
literal|null
argument_list|,
name|var1
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
specifier|public
name|boolean
name|isInBounds
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|int
name|var3
parameter_list|)
block|{
return|return
name|var1
operator|>=
literal|0
operator|&&
name|var2
operator|>=
literal|0
operator|&&
name|var3
operator|>=
literal|0
operator|&&
name|var1
operator|<
name|width
operator|&&
name|var2
operator|<
name|height
operator|&&
name|var3
operator|<
name|length
return|;
block|}
specifier|public
name|boolean
name|isLightBlocker
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|int
name|var3
parameter_list|)
block|{
name|Block
name|var4
decl_stmt|;
return|return
operator|(
name|var4
operator|=
name|Block
operator|.
name|blocks
index|[
name|getTile
argument_list|(
name|var1
argument_list|,
name|var2
argument_list|,
name|var3
argument_list|)
index|]
operator|)
operator|==
literal|null
condition|?
literal|false
else|:
name|var4
operator|.
name|isOpaque
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isLit
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|int
name|var3
parameter_list|)
block|{
return|return
name|var1
operator|>=
literal|0
operator|&&
name|var2
operator|>=
literal|0
operator|&&
name|var3
operator|>=
literal|0
operator|&&
name|var1
operator|<
name|width
operator|&&
name|var2
operator|<
name|height
operator|&&
name|var3
operator|<
name|length
condition|?
name|var2
operator|>=
name|blockers
index|[
name|var1
operator|+
name|var3
operator|*
name|width
index|]
else|:
literal|true
return|;
block|}
specifier|private
name|boolean
name|isSolid
parameter_list|(
name|float
name|var1
parameter_list|,
name|float
name|var2
parameter_list|,
name|float
name|var3
parameter_list|)
block|{
name|int
name|var4
decl_stmt|;
return|return
operator|(
name|var4
operator|=
name|getTile
argument_list|(
operator|(
name|int
operator|)
name|var1
argument_list|,
operator|(
name|int
operator|)
name|var2
argument_list|,
operator|(
name|int
operator|)
name|var3
argument_list|)
operator|)
operator|>
literal|0
operator|&&
name|Block
operator|.
name|blocks
index|[
name|var4
index|]
operator|.
name|isSolid
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isSolid
parameter_list|(
name|float
name|var1
parameter_list|,
name|float
name|var2
parameter_list|,
name|float
name|var3
parameter_list|,
name|float
name|var4
parameter_list|)
block|{
return|return
name|this
operator|.
name|isSolid
argument_list|(
name|var1
operator|-
name|var4
argument_list|,
name|var2
operator|-
name|var4
argument_list|,
name|var3
operator|-
name|var4
argument_list|)
condition|?
literal|true
else|:
name|this
operator|.
name|isSolid
argument_list|(
name|var1
operator|-
name|var4
argument_list|,
name|var2
operator|-
name|var4
argument_list|,
name|var3
operator|+
name|var4
argument_list|)
condition|?
literal|true
else|:
name|this
operator|.
name|isSolid
argument_list|(
name|var1
operator|-
name|var4
argument_list|,
name|var2
operator|+
name|var4
argument_list|,
name|var3
operator|-
name|var4
argument_list|)
condition|?
literal|true
else|:
name|this
operator|.
name|isSolid
argument_list|(
name|var1
operator|-
name|var4
argument_list|,
name|var2
operator|+
name|var4
argument_list|,
name|var3
operator|+
name|var4
argument_list|)
condition|?
literal|true
else|:
name|this
operator|.
name|isSolid
argument_list|(
name|var1
operator|+
name|var4
argument_list|,
name|var2
operator|-
name|var4
argument_list|,
name|var3
operator|-
name|var4
argument_list|)
condition|?
literal|true
else|:
name|this
operator|.
name|isSolid
argument_list|(
name|var1
operator|+
name|var4
argument_list|,
name|var2
operator|-
name|var4
argument_list|,
name|var3
operator|+
name|var4
argument_list|)
condition|?
literal|true
else|:
name|this
operator|.
name|isSolid
argument_list|(
name|var1
operator|+
name|var4
argument_list|,
name|var2
operator|+
name|var4
argument_list|,
name|var3
operator|-
name|var4
argument_list|)
condition|?
literal|true
else|:
name|this
operator|.
name|isSolid
argument_list|(
name|var1
operator|+
name|var4
argument_list|,
name|var2
operator|+
name|var4
argument_list|,
name|var3
operator|+
name|var4
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isSolidTile
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|int
name|var3
parameter_list|)
block|{
name|Block
name|var4
decl_stmt|;
return|return
operator|(
name|var4
operator|=
name|Block
operator|.
name|blocks
index|[
name|getTile
argument_list|(
name|var1
argument_list|,
name|var2
argument_list|,
name|var3
argument_list|)
index|]
operator|)
operator|==
literal|null
condition|?
literal|false
else|:
name|var4
operator|.
name|isSolid
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isWater
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|int
name|var3
parameter_list|)
block|{
name|int
name|var4
decl_stmt|;
return|return
operator|(
name|var4
operator|=
name|getTile
argument_list|(
name|var1
argument_list|,
name|var2
argument_list|,
name|var3
argument_list|)
operator|)
operator|>
literal|0
operator|&&
name|Block
operator|.
name|blocks
index|[
name|var4
index|]
operator|.
name|getLiquidType
argument_list|()
operator|==
name|LiquidType
operator|.
name|water
return|;
block|}
specifier|public
name|boolean
name|maybeGrowTree
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|int
name|var3
parameter_list|)
block|{
name|int
name|var4
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|+
literal|4
decl_stmt|;
name|boolean
name|var5
init|=
literal|true
decl_stmt|;
name|int
name|var6
decl_stmt|;
name|int
name|var8
decl_stmt|;
name|int
name|var9
decl_stmt|;
for|for
control|(
name|var6
operator|=
name|var2
init|;
name|var6
operator|<=
name|var2
operator|+
literal|1
operator|+
name|var4
condition|;
operator|++
name|var6
control|)
block|{
name|byte
name|var7
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|var6
operator|==
name|var2
condition|)
block|{
name|var7
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|var6
operator|>=
name|var2
operator|+
literal|1
operator|+
name|var4
operator|-
literal|2
condition|)
block|{
name|var7
operator|=
literal|2
expr_stmt|;
block|}
for|for
control|(
name|var8
operator|=
name|var1
operator|-
name|var7
init|;
name|var8
operator|<=
name|var1
operator|+
name|var7
operator|&&
name|var5
condition|;
operator|++
name|var8
control|)
block|{
for|for
control|(
name|var9
operator|=
name|var3
operator|-
name|var7
init|;
name|var9
operator|<=
name|var3
operator|+
name|var7
operator|&&
name|var5
condition|;
operator|++
name|var9
control|)
block|{
if|if
condition|(
name|var8
operator|>=
literal|0
operator|&&
name|var6
operator|>=
literal|0
operator|&&
name|var9
operator|>=
literal|0
operator|&&
name|var8
operator|<
name|width
operator|&&
name|var6
operator|<
name|height
operator|&&
name|var9
operator|<
name|length
condition|)
block|{
if|if
condition|(
operator|(
name|blocks
index|[
operator|(
name|var6
operator|*
name|length
operator|+
name|var9
operator|)
operator|*
name|width
operator|+
name|var8
index|]
operator|&
literal|255
operator|)
operator|!=
literal|0
condition|)
block|{
name|var5
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|var5
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|var5
condition|)
block|{
return|return
literal|false
return|;
block|}
if|else if
condition|(
operator|(
name|blocks
index|[
operator|(
operator|(
name|var2
operator|-
literal|1
operator|)
operator|*
name|length
operator|+
name|var3
operator|)
operator|*
name|width
operator|+
name|var1
index|]
operator|&
literal|255
operator|)
operator|==
name|Block
operator|.
name|GRASS
operator|.
name|id
operator|&&
name|var2
operator|<
name|height
operator|-
name|var4
operator|-
literal|1
condition|)
block|{
name|setTile
argument_list|(
name|var1
argument_list|,
name|var2
operator|-
literal|1
argument_list|,
name|var3
argument_list|,
name|Block
operator|.
name|DIRT
operator|.
name|id
argument_list|)
expr_stmt|;
name|int
name|var13
decl_stmt|;
for|for
control|(
name|var13
operator|=
name|var2
operator|-
literal|3
operator|+
name|var4
init|;
name|var13
operator|<=
name|var2
operator|+
name|var4
condition|;
operator|++
name|var13
control|)
block|{
name|var8
operator|=
name|var13
operator|-
operator|(
name|var2
operator|+
name|var4
operator|)
expr_stmt|;
name|var9
operator|=
literal|1
operator|-
name|var8
operator|/
literal|2
expr_stmt|;
for|for
control|(
name|int
name|var10
init|=
name|var1
operator|-
name|var9
init|;
name|var10
operator|<=
name|var1
operator|+
name|var9
condition|;
operator|++
name|var10
control|)
block|{
name|int
name|var12
init|=
name|var10
operator|-
name|var1
decl_stmt|;
for|for
control|(
name|var6
operator|=
name|var3
operator|-
name|var9
init|;
name|var6
operator|<=
name|var3
operator|+
name|var9
condition|;
operator|++
name|var6
control|)
block|{
name|int
name|var11
init|=
name|var6
operator|-
name|var3
decl_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|var12
argument_list|)
operator|!=
name|var9
operator|||
name|Math
operator|.
name|abs
argument_list|(
name|var11
argument_list|)
operator|!=
name|var9
operator|||
name|random
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
operator|!=
literal|0
operator|&&
name|var8
operator|!=
literal|0
condition|)
block|{
name|setTile
argument_list|(
name|var10
argument_list|,
name|var13
argument_list|,
name|var6
argument_list|,
name|Block
operator|.
name|LEAVES
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|var13
operator|=
literal|0
init|;
name|var13
operator|<
name|var4
condition|;
operator|++
name|var13
control|)
block|{
name|setTile
argument_list|(
name|var1
argument_list|,
name|var2
operator|+
name|var13
argument_list|,
name|var3
argument_list|,
name|Block
operator|.
name|LOG
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|netSetTile
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|int
name|var3
parameter_list|,
name|int
name|var4
parameter_list|)
block|{
if|if
condition|(
name|netSetTileNoNeighborChange
argument_list|(
name|var1
argument_list|,
name|var2
argument_list|,
name|var3
argument_list|,
name|var4
argument_list|)
condition|)
block|{
name|updateNeighborsAt
argument_list|(
name|var1
argument_list|,
name|var2
argument_list|,
name|var3
argument_list|,
name|var4
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|netSetTileNoNeighborChange
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|int
name|var3
parameter_list|,
name|int
name|var4
parameter_list|)
block|{
if|if
condition|(
name|var1
operator|>=
literal|0
operator|&&
name|var2
operator|>=
literal|0
operator|&&
name|var3
operator|>=
literal|0
operator|&&
name|var1
operator|<
name|width
operator|&&
name|var2
operator|<
name|height
operator|&&
name|var3
operator|<
name|length
condition|)
block|{
if|if
condition|(
name|var4
operator|==
name|blocks
index|[
operator|(
name|var2
operator|*
name|length
operator|+
name|var3
operator|)
operator|*
name|width
operator|+
name|var1
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
if|if
condition|(
name|var4
operator|==
literal|0
operator|&&
operator|(
name|var1
operator|==
literal|0
operator|||
name|var3
operator|==
literal|0
operator|||
name|var1
operator|==
name|width
operator|-
literal|1
operator|||
name|var3
operator|==
name|length
operator|-
literal|1
operator|)
operator|&&
name|var2
operator|>=
name|getGroundLevel
argument_list|()
operator|&&
name|var2
operator|<
name|getWaterLevel
argument_list|()
operator|&&
operator|!
name|networkMode
condition|)
block|{
name|var4
operator|=
name|Block
operator|.
name|WATER
operator|.
name|id
expr_stmt|;
block|}
name|byte
name|var5
init|=
name|blocks
index|[
operator|(
name|var2
operator|*
name|length
operator|+
name|var3
operator|)
operator|*
name|width
operator|+
name|var1
index|]
decl_stmt|;
name|blocks
index|[
operator|(
name|var2
operator|*
name|length
operator|+
name|var3
operator|)
operator|*
name|width
operator|+
name|var1
index|]
operator|=
operator|(
name|byte
operator|)
name|var4
expr_stmt|;
if|if
condition|(
name|var5
operator|!=
literal|0
condition|)
block|{
name|Block
operator|.
name|blocks
index|[
name|var5
index|]
operator|.
name|onRemoved
argument_list|(
name|this
argument_list|,
name|var1
argument_list|,
name|var2
argument_list|,
name|var3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|var4
operator|!=
literal|0
condition|)
block|{
name|Block
operator|.
name|blocks
index|[
name|var4
index|]
operator|.
name|onAdded
argument_list|(
name|this
argument_list|,
name|var1
argument_list|,
name|var2
argument_list|,
name|var3
argument_list|)
expr_stmt|;
block|}
name|calcLightDepths
argument_list|(
name|var1
argument_list|,
name|var3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|var4
operator|=
literal|0
init|;
name|var4
operator|<
name|listeners
operator|.
name|size
argument_list|()
condition|;
operator|++
name|var4
control|)
block|{
name|listeners
operator|.
name|get
argument_list|(
name|var4
argument_list|)
operator|.
name|queueChunks
argument_list|(
name|var1
operator|-
literal|1
argument_list|,
name|var2
operator|-
literal|1
argument_list|,
name|var3
operator|-
literal|1
argument_list|,
name|var1
operator|+
literal|1
argument_list|,
name|var2
operator|+
literal|1
argument_list|,
name|var3
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|void
name|playSound
parameter_list|(
name|String
name|var1
parameter_list|,
name|Entity
name|var2
parameter_list|,
name|float
name|var3
parameter_list|,
name|float
name|var4
parameter_list|,
name|boolean
name|footStep
parameter_list|)
block|{
if|if
condition|(
name|rendererContext$5cd64a7f
operator|!=
literal|null
condition|)
block|{
name|Minecraft
name|var5
decl_stmt|;
if|if
condition|(
operator|(
name|var5
operator|=
name|rendererContext$5cd64a7f
operator|)
operator|.
name|soundPlayer
operator|==
literal|null
operator|||
operator|!
name|var5
operator|.
name|settings
operator|.
name|sound
condition|)
block|{
return|return;
block|}
name|AudioInfo
name|var6
decl_stmt|;
if|if
condition|(
name|var2
operator|.
name|distanceToSqr
argument_list|(
name|var5
operator|.
name|player
argument_list|)
operator|<
literal|1024.0F
operator|&&
operator|(
name|var6
operator|=
name|var5
operator|.
name|sound
operator|.
name|getAudioInfo
argument_list|(
name|var1
argument_list|,
name|var3
argument_list|,
name|var4
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|var5
operator|.
name|soundPlayer
operator|.
name|play
argument_list|(
name|var6
argument_list|,
operator|new
name|EntitySoundPos
argument_list|(
name|var2
argument_list|,
name|var5
operator|.
name|player
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|playSound
parameter_list|(
name|String
name|var1
parameter_list|,
name|float
name|var2
parameter_list|,
name|float
name|var3
parameter_list|,
name|float
name|var4
parameter_list|,
name|float
name|var5
parameter_list|,
name|float
name|var6
parameter_list|)
block|{
if|if
condition|(
name|rendererContext$5cd64a7f
operator|!=
literal|null
condition|)
block|{
name|Minecraft
name|var7
decl_stmt|;
if|if
condition|(
operator|(
name|var7
operator|=
name|rendererContext$5cd64a7f
operator|)
operator|.
name|soundPlayer
operator|==
literal|null
operator|||
operator|!
name|var7
operator|.
name|settings
operator|.
name|sound
condition|)
block|{
return|return;
block|}
name|AudioInfo
name|var8
decl_stmt|;
if|if
condition|(
operator|(
name|var8
operator|=
name|var7
operator|.
name|sound
operator|.
name|getAudioInfo
argument_list|(
name|var1
argument_list|,
name|var5
argument_list|,
name|var6
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|var7
operator|.
name|soundPlayer
operator|.
name|play
argument_list|(
name|var8
argument_list|,
operator|new
name|LevelSoundPos
argument_list|(
name|var2
argument_list|,
name|var3
argument_list|,
name|var4
argument_list|,
name|var7
operator|.
name|player
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|removeAllNonCreativeModeEntities
parameter_list|()
block|{
name|blockMap
operator|.
name|removeAllNonCreativeModeEntities
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|removeEntity
parameter_list|(
name|Entity
name|var1
parameter_list|)
block|{
name|blockMap
operator|.
name|remove
argument_list|(
name|var1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeListener
parameter_list|(
name|LevelRenderer
name|var1
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|var1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setData
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|int
name|var3
parameter_list|,
name|byte
index|[]
name|var4
parameter_list|)
block|{
name|width
operator|=
name|var1
expr_stmt|;
name|length
operator|=
name|var3
expr_stmt|;
name|height
operator|=
name|var2
expr_stmt|;
name|blocks
operator|=
name|var4
expr_stmt|;
name|blockers
operator|=
operator|new
name|int
index|[
name|var1
operator|*
name|var3
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|blockers
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|calcLightDepths
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|var1
argument_list|,
name|var3
argument_list|)
expr_stmt|;
for|for
control|(
name|var1
operator|=
literal|0
init|;
name|var1
operator|<
name|listeners
operator|.
name|size
argument_list|()
condition|;
operator|++
name|var1
control|)
block|{
name|listeners
operator|.
name|get
argument_list|(
name|var1
argument_list|)
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
name|tickList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|findSpawn
argument_list|()
expr_stmt|;
name|initTransient
argument_list|()
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setNetworkMode
parameter_list|(
name|boolean
name|var1
parameter_list|)
block|{
name|networkMode
operator|=
name|var1
expr_stmt|;
block|}
specifier|public
name|void
name|setSpawnPos
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|int
name|var3
parameter_list|,
name|float
name|var4
parameter_list|)
block|{
name|xSpawn
operator|=
name|var1
expr_stmt|;
name|ySpawn
operator|=
name|var2
expr_stmt|;
name|zSpawn
operator|=
name|var3
expr_stmt|;
name|rotSpawn
operator|=
name|var4
expr_stmt|;
block|}
specifier|public
name|boolean
name|setTile
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|int
name|var3
parameter_list|,
name|int
name|var4
parameter_list|)
block|{
if|if
condition|(
name|networkMode
condition|)
block|{
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|setTileNoNeighborChange
argument_list|(
name|var1
argument_list|,
name|var2
argument_list|,
name|var3
argument_list|,
name|var4
argument_list|)
condition|)
block|{
name|updateNeighborsAt
argument_list|(
name|var1
argument_list|,
name|var2
argument_list|,
name|var3
argument_list|,
name|var4
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|setTileNoNeighborChange
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|int
name|var3
parameter_list|,
name|int
name|var4
parameter_list|)
block|{
return|return
name|networkMode
condition|?
literal|false
else|:
name|netSetTileNoNeighborChange
argument_list|(
name|var1
argument_list|,
name|var2
argument_list|,
name|var3
argument_list|,
name|var4
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|setTileNoUpdate
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|int
name|var3
parameter_list|,
name|int
name|var4
parameter_list|)
block|{
if|if
condition|(
name|var1
operator|>=
literal|0
operator|&&
name|var2
operator|>=
literal|0
operator|&&
name|var3
operator|>=
literal|0
operator|&&
name|var1
operator|<
name|width
operator|&&
name|var2
operator|<
name|height
operator|&&
name|var3
operator|<
name|length
condition|)
block|{
if|if
condition|(
name|var4
operator|==
name|blocks
index|[
operator|(
name|var2
operator|*
name|length
operator|+
name|var3
operator|)
operator|*
name|width
operator|+
name|var1
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|blocks
index|[
operator|(
name|var2
operator|*
name|length
operator|+
name|var3
operator|)
operator|*
name|width
operator|+
name|var1
index|]
operator|=
operator|(
name|byte
operator|)
name|var4
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|void
name|swap
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|int
name|var3
parameter_list|,
name|int
name|var4
parameter_list|,
name|int
name|var5
parameter_list|,
name|int
name|var6
parameter_list|)
block|{
if|if
condition|(
operator|!
name|networkMode
condition|)
block|{
name|int
name|var7
init|=
name|getTile
argument_list|(
name|var1
argument_list|,
name|var2
argument_list|,
name|var3
argument_list|)
decl_stmt|;
name|int
name|var8
init|=
name|getTile
argument_list|(
name|var4
argument_list|,
name|var5
argument_list|,
name|var6
argument_list|)
decl_stmt|;
name|setTileNoNeighborChange
argument_list|(
name|var1
argument_list|,
name|var2
argument_list|,
name|var3
argument_list|,
name|var8
argument_list|)
expr_stmt|;
name|setTileNoNeighborChange
argument_list|(
name|var4
argument_list|,
name|var5
argument_list|,
name|var6
argument_list|,
name|var7
argument_list|)
expr_stmt|;
name|updateNeighborsAt
argument_list|(
name|var1
argument_list|,
name|var2
argument_list|,
name|var3
argument_list|,
name|var8
argument_list|)
expr_stmt|;
name|updateNeighborsAt
argument_list|(
name|var4
argument_list|,
name|var5
argument_list|,
name|var6
argument_list|,
name|var7
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|tick
parameter_list|()
block|{
operator|++
name|tickCount
expr_stmt|;
name|int
name|var1
init|=
literal|1
decl_stmt|;
name|int
name|var2
decl_stmt|;
for|for
control|(
name|var2
operator|=
literal|1
init|;
literal|1
operator|<<
name|var1
operator|<
name|width
condition|;
operator|++
name|var1
control|)
block|{
empty_stmt|;
block|}
while|while
condition|(
literal|1
operator|<<
name|var2
operator|<
name|length
condition|)
block|{
operator|++
name|var2
expr_stmt|;
block|}
name|int
name|var3
init|=
name|length
operator|-
literal|1
decl_stmt|;
name|int
name|var4
init|=
name|width
operator|-
literal|1
decl_stmt|;
name|int
name|var5
init|=
name|height
operator|-
literal|1
decl_stmt|;
name|int
name|var6
decl_stmt|;
name|int
name|var7
decl_stmt|;
if|if
condition|(
name|tickCount
operator|%
literal|5
operator|==
literal|0
condition|)
block|{
name|var6
operator|=
name|tickList
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|var7
operator|=
literal|0
init|;
name|var7
operator|<
name|var6
condition|;
operator|++
name|var7
control|)
block|{
name|NextTickListEntry
name|var8
decl_stmt|;
if|if
condition|(
operator|(
name|var8
operator|=
name|tickList
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|ticks
operator|>
literal|0
condition|)
block|{
operator|--
name|var8
operator|.
name|ticks
expr_stmt|;
name|tickList
operator|.
name|add
argument_list|(
name|var8
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byte
name|var9
decl_stmt|;
if|if
condition|(
name|isInBounds
argument_list|(
name|var8
operator|.
name|x
argument_list|,
name|var8
operator|.
name|y
argument_list|,
name|var8
operator|.
name|z
argument_list|)
operator|&&
operator|(
name|var9
operator|=
name|blocks
index|[
operator|(
name|var8
operator|.
name|y
operator|*
name|length
operator|+
name|var8
operator|.
name|z
operator|)
operator|*
name|width
operator|+
name|var8
operator|.
name|x
index|]
operator|)
operator|==
name|var8
operator|.
name|block
operator|&&
name|var9
operator|>
literal|0
condition|)
block|{
name|Block
operator|.
name|blocks
index|[
name|var9
index|]
operator|.
name|update
argument_list|(
name|this
argument_list|,
name|var8
operator|.
name|x
argument_list|,
name|var8
operator|.
name|y
argument_list|,
name|var8
operator|.
name|z
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|unprocessed
operator|+=
name|width
operator|*
name|length
operator|*
name|height
expr_stmt|;
name|var6
operator|=
name|unprocessed
operator|/
literal|200
expr_stmt|;
name|unprocessed
operator|-=
name|var6
operator|*
literal|200
expr_stmt|;
for|for
control|(
name|var7
operator|=
literal|0
init|;
name|var7
operator|<
name|var6
condition|;
operator|++
name|var7
control|)
block|{
name|randId
operator|=
name|randId
operator|*
literal|3
operator|+
literal|1013904223
expr_stmt|;
name|int
name|var12
decl_stmt|;
name|int
name|var13
init|=
operator|(
name|var12
operator|=
name|randId
operator|>>
literal|2
operator|)
operator|&
name|var4
decl_stmt|;
name|int
name|var10
init|=
name|var12
operator|>>
name|var1
operator|&
name|var3
decl_stmt|;
name|var12
operator|=
name|var12
operator|>>
name|var1
operator|+
name|var2
operator|&
name|var5
expr_stmt|;
name|byte
name|var11
init|=
name|blocks
index|[
operator|(
name|var12
operator|*
name|length
operator|+
name|var10
operator|)
operator|*
name|width
operator|+
name|var13
index|]
decl_stmt|;
if|if
condition|(
name|Block
operator|.
name|physics
index|[
name|var11
index|]
condition|)
block|{
name|Block
operator|.
name|blocks
index|[
name|var11
index|]
operator|.
name|update
argument_list|(
name|this
argument_list|,
name|var13
argument_list|,
name|var12
argument_list|,
name|var10
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|tickEntities
parameter_list|()
block|{
name|blockMap
operator|.
name|tickAll
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|updateNeighborsAt
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|int
name|var3
parameter_list|,
name|int
name|var4
parameter_list|)
block|{
name|updateTile
argument_list|(
name|var1
operator|-
literal|1
argument_list|,
name|var2
argument_list|,
name|var3
argument_list|,
name|var4
argument_list|)
expr_stmt|;
name|updateTile
argument_list|(
name|var1
operator|+
literal|1
argument_list|,
name|var2
argument_list|,
name|var3
argument_list|,
name|var4
argument_list|)
expr_stmt|;
name|updateTile
argument_list|(
name|var1
argument_list|,
name|var2
operator|-
literal|1
argument_list|,
name|var3
argument_list|,
name|var4
argument_list|)
expr_stmt|;
name|updateTile
argument_list|(
name|var1
argument_list|,
name|var2
operator|+
literal|1
argument_list|,
name|var3
argument_list|,
name|var4
argument_list|)
expr_stmt|;
name|updateTile
argument_list|(
name|var1
argument_list|,
name|var2
argument_list|,
name|var3
operator|-
literal|1
argument_list|,
name|var4
argument_list|)
expr_stmt|;
name|updateTile
argument_list|(
name|var1
argument_list|,
name|var2
argument_list|,
name|var3
operator|+
literal|1
argument_list|,
name|var4
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updateTile
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|int
name|var3
parameter_list|,
name|int
name|var4
parameter_list|)
block|{
if|if
condition|(
name|var1
operator|>=
literal|0
operator|&&
name|var2
operator|>=
literal|0
operator|&&
name|var3
operator|>=
literal|0
operator|&&
name|var1
operator|<
name|width
operator|&&
name|var2
operator|<
name|height
operator|&&
name|var3
operator|<
name|length
condition|)
block|{
name|Block
name|var5
decl_stmt|;
if|if
condition|(
operator|(
name|var5
operator|=
name|Block
operator|.
name|blocks
index|[
name|blocks
index|[
operator|(
name|var2
operator|*
name|length
operator|+
name|var3
operator|)
operator|*
name|width
operator|+
name|var1
index|]
index|]
operator|)
operator|!=
literal|null
condition|)
block|{
name|var5
operator|.
name|onNeighborChange
argument_list|(
name|this
argument_list|,
name|var1
argument_list|,
name|var2
argument_list|,
name|var3
argument_list|,
name|var4
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

