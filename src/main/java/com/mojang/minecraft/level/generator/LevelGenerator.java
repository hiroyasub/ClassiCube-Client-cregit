begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|level
operator|.
name|generator
package|;
end_package

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|LogUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|ProgressBarDisplay
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|level
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|level
operator|.
name|generator
operator|.
name|noise
operator|.
name|CombinedNoise
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|level
operator|.
name|generator
operator|.
name|noise
operator|.
name|OctaveNoise
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|level
operator|.
name|tile
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|util
operator|.
name|MathHelper
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|LevelGenerator
block|{
specifier|private
name|ProgressBarDisplay
name|progressBar
decl_stmt|;
specifier|private
name|int
name|width
decl_stmt|;
specifier|private
name|int
name|depth
decl_stmt|;
specifier|private
name|int
name|height
decl_stmt|;
specifier|private
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
name|byte
index|[]
name|blocks
decl_stmt|;
specifier|private
name|int
name|waterLevel
decl_stmt|;
specifier|private
name|int
index|[]
name|h
init|=
operator|new
name|int
index|[
literal|1048576
index|]
decl_stmt|;
specifier|public
name|LevelGenerator
parameter_list|(
name|ProgressBarDisplay
name|var1
parameter_list|)
block|{
name|progressBar
operator|=
name|var1
expr_stmt|;
block|}
specifier|private
name|long
name|flood
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|int
name|var3
parameter_list|,
name|int
name|var5
parameter_list|)
block|{
name|byte
name|var20
init|=
operator|(
name|byte
operator|)
name|var5
decl_stmt|;
name|ArrayList
argument_list|<
name|int
index|[]
argument_list|>
name|var21
init|=
operator|new
name|ArrayList
argument_list|<
name|int
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|byte
name|var6
init|=
literal|0
decl_stmt|;
name|int
name|var7
init|=
literal|1
decl_stmt|;
name|int
name|var8
decl_stmt|;
for|for
control|(
name|var8
operator|=
literal|1
init|;
literal|1
operator|<<
name|var7
operator|<
name|width
condition|;
operator|++
name|var7
control|)
block|{
empty_stmt|;
block|}
while|while
condition|(
literal|1
operator|<<
name|var8
operator|<
name|depth
condition|)
block|{
operator|++
name|var8
expr_stmt|;
block|}
name|int
name|var9
init|=
name|depth
operator|-
literal|1
decl_stmt|;
name|int
name|var10
init|=
name|width
operator|-
literal|1
decl_stmt|;
name|int
name|var22
init|=
name|var6
operator|+
literal|1
decl_stmt|;
name|h
index|[
literal|0
index|]
operator|=
operator|(
operator|(
name|var2
operator|<<
name|var8
operator|)
operator|+
name|var3
operator|<<
name|var7
operator|)
operator|+
name|var1
expr_stmt|;
name|long
name|var11
init|=
literal|0L
decl_stmt|;
name|var1
operator|=
name|width
operator|*
name|depth
expr_stmt|;
while|while
condition|(
name|var22
operator|>
literal|0
condition|)
block|{
operator|--
name|var22
expr_stmt|;
name|var2
operator|=
name|h
index|[
name|var22
index|]
expr_stmt|;
if|if
condition|(
name|var22
operator|==
literal|0
operator|&&
name|var21
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|h
operator|=
name|var21
operator|.
name|remove
argument_list|(
name|var21
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|var22
operator|=
name|h
operator|.
name|length
expr_stmt|;
block|}
name|var3
operator|=
name|var2
operator|>>
name|var7
operator|&
name|var9
expr_stmt|;
name|int
name|var13
init|=
name|var2
operator|>>
name|var7
operator|+
name|var8
decl_stmt|;
name|int
name|var14
decl_stmt|;
name|int
name|var15
decl_stmt|;
for|for
control|(
name|var15
operator|=
name|var14
operator|=
name|var2
operator|&
name|var10
init|;
name|var14
operator|>
literal|0
operator|&&
name|blocks
index|[
name|var2
operator|-
literal|1
index|]
operator|==
literal|0
condition|;
operator|--
name|var2
control|)
block|{
operator|--
name|var14
expr_stmt|;
block|}
while|while
condition|(
name|var15
operator|<
name|width
operator|&&
name|blocks
index|[
name|var2
operator|+
name|var15
operator|-
name|var14
index|]
operator|==
literal|0
condition|)
block|{
operator|++
name|var15
expr_stmt|;
block|}
name|int
name|var16
init|=
name|var2
operator|>>
name|var7
operator|&
name|var9
decl_stmt|;
name|int
name|var17
init|=
name|var2
operator|>>
name|var7
operator|+
name|var8
decl_stmt|;
if|if
condition|(
name|var16
operator|!=
name|var3
operator|||
name|var17
operator|!=
name|var13
condition|)
block|{
name|LogUtil
operator|.
name|logWarning
argument_list|(
literal|"Diagonal flood!?"
argument_list|)
expr_stmt|;
block|}
name|boolean
name|var23
init|=
literal|false
decl_stmt|;
name|boolean
name|var24
init|=
literal|false
decl_stmt|;
name|boolean
name|var18
init|=
literal|false
decl_stmt|;
name|var11
operator|+=
name|var15
operator|-
name|var14
expr_stmt|;
for|for
control|(
init|;
name|var14
operator|<
name|var15
condition|;
operator|++
name|var14
control|)
block|{
name|blocks
index|[
name|var2
index|]
operator|=
name|var20
expr_stmt|;
name|boolean
name|var19
decl_stmt|;
if|if
condition|(
name|var3
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|(
name|var19
operator|=
name|blocks
index|[
name|var2
operator|-
name|width
index|]
operator|==
literal|0
operator|)
operator|&&
operator|!
name|var23
condition|)
block|{
if|if
condition|(
name|var22
operator|==
name|h
operator|.
name|length
condition|)
block|{
name|var21
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|h
operator|=
operator|new
name|int
index|[
literal|1048576
index|]
expr_stmt|;
name|var22
operator|=
literal|0
expr_stmt|;
block|}
name|h
index|[
name|var22
operator|++
index|]
operator|=
name|var2
operator|-
name|width
expr_stmt|;
block|}
name|var23
operator|=
name|var19
expr_stmt|;
block|}
if|if
condition|(
name|var3
operator|<
name|depth
operator|-
literal|1
condition|)
block|{
if|if
condition|(
operator|(
name|var19
operator|=
name|blocks
index|[
name|var2
operator|+
name|width
index|]
operator|==
literal|0
operator|)
operator|&&
operator|!
name|var24
condition|)
block|{
if|if
condition|(
name|var22
operator|==
name|h
operator|.
name|length
condition|)
block|{
name|var21
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|h
operator|=
operator|new
name|int
index|[
literal|1048576
index|]
expr_stmt|;
name|var22
operator|=
literal|0
expr_stmt|;
block|}
name|h
index|[
name|var22
operator|++
index|]
operator|=
name|var2
operator|+
name|width
expr_stmt|;
block|}
name|var24
operator|=
name|var19
expr_stmt|;
block|}
if|if
condition|(
name|var13
operator|>
literal|0
condition|)
block|{
name|byte
name|var25
init|=
name|blocks
index|[
name|var2
operator|-
name|var1
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|var20
operator|==
name|Block
operator|.
name|LAVA
operator|.
name|id
operator|||
name|var20
operator|==
name|Block
operator|.
name|STATIONARY_LAVA
operator|.
name|id
operator|)
operator|&&
operator|(
name|var25
operator|==
name|Block
operator|.
name|WATER
operator|.
name|id
operator|||
name|var25
operator|==
name|Block
operator|.
name|STATIONARY_WATER
operator|.
name|id
operator|)
condition|)
block|{
name|blocks
index|[
name|var2
operator|-
name|var1
index|]
operator|=
operator|(
name|byte
operator|)
name|Block
operator|.
name|STONE
operator|.
name|id
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|var19
operator|=
name|var25
operator|==
literal|0
operator|)
operator|&&
operator|!
name|var18
condition|)
block|{
if|if
condition|(
name|var22
operator|==
name|h
operator|.
name|length
condition|)
block|{
name|var21
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|h
operator|=
operator|new
name|int
index|[
literal|1048576
index|]
expr_stmt|;
name|var22
operator|=
literal|0
expr_stmt|;
block|}
name|h
index|[
name|var22
operator|++
index|]
operator|=
name|var2
operator|-
name|var1
expr_stmt|;
block|}
name|var18
operator|=
name|var19
expr_stmt|;
block|}
operator|++
name|var2
expr_stmt|;
block|}
block|}
return|return
name|var11
return|;
block|}
specifier|public
specifier|final
name|Level
name|generate
parameter_list|(
name|String
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|int
name|var3
parameter_list|,
name|int
name|var4
parameter_list|)
block|{
name|progressBar
operator|.
name|setTitle
argument_list|(
literal|"Generating level"
argument_list|)
expr_stmt|;
name|width
operator|=
name|var2
expr_stmt|;
name|depth
operator|=
name|var3
expr_stmt|;
name|height
operator|=
literal|64
expr_stmt|;
name|waterLevel
operator|=
literal|32
expr_stmt|;
name|blocks
operator|=
operator|new
name|byte
index|[
name|var2
operator|*
name|var3
operator|<<
literal|6
index|]
expr_stmt|;
name|progressBar
operator|.
name|setText
argument_list|(
literal|"Raising.."
argument_list|)
expr_stmt|;
name|LevelGenerator
name|var5
init|=
name|this
decl_stmt|;
name|CombinedNoise
name|var6
init|=
operator|new
name|CombinedNoise
argument_list|(
operator|new
name|OctaveNoise
argument_list|(
name|random
argument_list|,
literal|8
argument_list|)
argument_list|,
operator|new
name|OctaveNoise
argument_list|(
name|random
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|CombinedNoise
name|var7
init|=
operator|new
name|CombinedNoise
argument_list|(
operator|new
name|OctaveNoise
argument_list|(
name|random
argument_list|,
literal|8
argument_list|)
argument_list|,
operator|new
name|OctaveNoise
argument_list|(
name|random
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|OctaveNoise
name|var8
init|=
operator|new
name|OctaveNoise
argument_list|(
name|random
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|int
index|[]
name|var9
init|=
operator|new
name|int
index|[
name|width
operator|*
name|depth
index|]
decl_stmt|;
name|float
name|var10
init|=
literal|1.3F
decl_stmt|;
name|int
name|var11
decl_stmt|;
name|int
name|var12
decl_stmt|;
for|for
control|(
name|var11
operator|=
literal|0
init|;
name|var11
operator|<
name|var5
operator|.
name|width
condition|;
operator|++
name|var11
control|)
block|{
name|var5
operator|.
name|setProgress
argument_list|(
name|var11
operator|*
literal|100
operator|/
operator|(
name|var5
operator|.
name|width
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|var12
operator|=
literal|0
init|;
name|var12
operator|<
name|var5
operator|.
name|depth
condition|;
operator|++
name|var12
control|)
block|{
name|double
name|var13
init|=
name|var6
operator|.
name|compute
argument_list|(
name|var11
operator|*
name|var10
argument_list|,
name|var12
operator|*
name|var10
argument_list|)
operator|/
literal|6D
operator|+
operator|-
literal|4
decl_stmt|;
name|double
name|var15
init|=
name|var7
operator|.
name|compute
argument_list|(
name|var11
operator|*
name|var10
argument_list|,
name|var12
operator|*
name|var10
argument_list|)
operator|/
literal|5D
operator|+
literal|10D
operator|+
operator|-
literal|4
decl_stmt|;
if|if
condition|(
name|var8
operator|.
name|compute
argument_list|(
name|var11
argument_list|,
name|var12
argument_list|)
operator|/
literal|8D
operator|>
literal|0D
condition|)
block|{
name|var15
operator|=
name|var13
expr_stmt|;
block|}
name|double
name|var19
decl_stmt|;
if|if
condition|(
operator|(
name|var19
operator|=
name|Math
operator|.
name|max
argument_list|(
name|var13
argument_list|,
name|var15
argument_list|)
operator|/
literal|2D
operator|)
operator|<
literal|0D
condition|)
block|{
name|var19
operator|*=
literal|0.8D
expr_stmt|;
block|}
name|var9
index|[
name|var11
operator|+
name|var12
operator|*
name|var5
operator|.
name|width
index|]
operator|=
operator|(
name|int
operator|)
name|var19
expr_stmt|;
block|}
block|}
name|progressBar
operator|.
name|setText
argument_list|(
literal|"Eroding.."
argument_list|)
expr_stmt|;
name|int
index|[]
name|var42
init|=
name|var9
decl_stmt|;
name|var5
operator|=
name|this
expr_stmt|;
name|var7
operator|=
operator|new
name|CombinedNoise
argument_list|(
operator|new
name|OctaveNoise
argument_list|(
name|random
argument_list|,
literal|8
argument_list|)
argument_list|,
operator|new
name|OctaveNoise
argument_list|(
name|random
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|CombinedNoise
name|var49
init|=
operator|new
name|CombinedNoise
argument_list|(
operator|new
name|OctaveNoise
argument_list|(
name|random
argument_list|,
literal|8
argument_list|)
argument_list|,
operator|new
name|OctaveNoise
argument_list|(
name|random
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|var23
decl_stmt|;
name|int
name|var51
decl_stmt|;
name|int
name|var54
decl_stmt|;
for|for
control|(
name|var51
operator|=
literal|0
init|;
name|var51
operator|<
name|var5
operator|.
name|width
condition|;
operator|++
name|var51
control|)
block|{
name|var5
operator|.
name|setProgress
argument_list|(
name|var51
operator|*
literal|100
operator|/
operator|(
name|var5
operator|.
name|width
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|var54
operator|=
literal|0
init|;
name|var54
operator|<
name|var5
operator|.
name|depth
condition|;
operator|++
name|var54
control|)
block|{
name|double
name|var21
init|=
name|var7
operator|.
name|compute
argument_list|(
name|var51
operator|<<
literal|1
argument_list|,
name|var54
operator|<<
literal|1
argument_list|)
operator|/
literal|8D
decl_stmt|;
name|var12
operator|=
name|var49
operator|.
name|compute
argument_list|(
name|var51
operator|<<
literal|1
argument_list|,
name|var54
operator|<<
literal|1
argument_list|)
operator|>
literal|0D
condition|?
literal|1
else|:
literal|0
expr_stmt|;
if|if
condition|(
name|var21
operator|>
literal|2D
condition|)
block|{
name|var23
operator|=
operator|(
operator|(
name|var42
index|[
name|var51
operator|+
name|var54
operator|*
name|var5
operator|.
name|width
index|]
operator|-
name|var12
operator|)
operator|/
literal|2
operator|<<
literal|1
operator|)
operator|+
name|var12
expr_stmt|;
name|var42
index|[
name|var51
operator|+
name|var54
operator|*
name|var5
operator|.
name|width
index|]
operator|=
name|var23
expr_stmt|;
block|}
block|}
block|}
name|progressBar
operator|.
name|setText
argument_list|(
literal|"Soiling.."
argument_list|)
expr_stmt|;
name|var42
operator|=
name|var9
expr_stmt|;
name|var5
operator|=
name|this
expr_stmt|;
name|int
name|var46
init|=
name|width
decl_stmt|;
name|int
name|var48
init|=
name|depth
decl_stmt|;
name|var51
operator|=
name|height
expr_stmt|;
name|OctaveNoise
name|var53
init|=
operator|new
name|OctaveNoise
argument_list|(
name|random
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|int
name|var25
decl_stmt|;
name|int
name|var24
decl_stmt|;
name|int
name|var27
decl_stmt|;
name|int
name|var26
decl_stmt|;
name|int
name|var28
decl_stmt|;
for|for
control|(
name|var24
operator|=
literal|0
init|;
name|var24
operator|<
name|var46
condition|;
operator|++
name|var24
control|)
block|{
name|var5
operator|.
name|setProgress
argument_list|(
name|var24
operator|*
literal|100
operator|/
operator|(
name|var5
operator|.
name|width
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|var11
operator|=
literal|0
init|;
name|var11
operator|<
name|var48
condition|;
operator|++
name|var11
control|)
block|{
name|var12
operator|=
operator|(
name|int
operator|)
operator|(
name|var53
operator|.
name|compute
argument_list|(
name|var24
argument_list|,
name|var11
argument_list|)
operator|/
literal|24D
operator|)
operator|-
literal|4
expr_stmt|;
name|var25
operator|=
operator|(
name|var23
operator|=
name|var42
index|[
name|var24
operator|+
name|var11
operator|*
name|var46
index|]
operator|+
name|var5
operator|.
name|waterLevel
operator|)
operator|+
name|var12
expr_stmt|;
name|var42
index|[
name|var24
operator|+
name|var11
operator|*
name|var46
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|var23
argument_list|,
name|var25
argument_list|)
expr_stmt|;
if|if
condition|(
name|var42
index|[
name|var24
operator|+
name|var11
operator|*
name|var46
index|]
operator|>
name|var51
operator|-
literal|2
condition|)
block|{
name|var42
index|[
name|var24
operator|+
name|var11
operator|*
name|var46
index|]
operator|=
name|var51
operator|-
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|var42
index|[
name|var24
operator|+
name|var11
operator|*
name|var46
index|]
operator|<
literal|1
condition|)
block|{
name|var42
index|[
name|var24
operator|+
name|var11
operator|*
name|var46
index|]
operator|=
literal|1
expr_stmt|;
block|}
for|for
control|(
name|var26
operator|=
literal|0
init|;
name|var26
operator|<
name|var51
condition|;
operator|++
name|var26
control|)
block|{
name|var27
operator|=
operator|(
name|var26
operator|*
name|var5
operator|.
name|depth
operator|+
name|var11
operator|)
operator|*
name|var5
operator|.
name|width
operator|+
name|var24
expr_stmt|;
name|var28
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|var26
operator|<=
name|var23
condition|)
block|{
name|var28
operator|=
name|Block
operator|.
name|DIRT
operator|.
name|id
expr_stmt|;
block|}
if|if
condition|(
name|var26
operator|<=
name|var25
condition|)
block|{
name|var28
operator|=
name|Block
operator|.
name|STONE
operator|.
name|id
expr_stmt|;
block|}
if|if
condition|(
name|var26
operator|==
literal|0
condition|)
block|{
name|var28
operator|=
name|Block
operator|.
name|LAVA
operator|.
name|id
expr_stmt|;
block|}
name|var5
operator|.
name|blocks
index|[
name|var27
index|]
operator|=
operator|(
name|byte
operator|)
name|var28
expr_stmt|;
block|}
block|}
block|}
name|progressBar
operator|.
name|setText
argument_list|(
literal|"Carving.."
argument_list|)
expr_stmt|;
name|var5
operator|=
name|this
expr_stmt|;
name|var48
operator|=
name|width
expr_stmt|;
name|var51
operator|=
name|depth
expr_stmt|;
name|var54
operator|=
name|height
expr_stmt|;
name|var24
operator|=
name|var48
operator|*
name|var51
operator|*
name|var54
operator|/
literal|256
operator|/
literal|64
operator|<<
literal|1
expr_stmt|;
for|for
control|(
name|var11
operator|=
literal|0
init|;
name|var11
operator|<
name|var24
condition|;
operator|++
name|var11
control|)
block|{
name|var5
operator|.
name|setProgress
argument_list|(
name|var11
operator|*
literal|100
operator|/
operator|(
name|var24
operator|-
literal|1
operator|)
operator|/
literal|4
argument_list|)
expr_stmt|;
name|float
name|var55
init|=
name|var5
operator|.
name|random
operator|.
name|nextFloat
argument_list|()
operator|*
name|var48
decl_stmt|;
name|float
name|var59
init|=
name|var5
operator|.
name|random
operator|.
name|nextFloat
argument_list|()
operator|*
name|var54
decl_stmt|;
name|float
name|var56
init|=
name|var5
operator|.
name|random
operator|.
name|nextFloat
argument_list|()
operator|*
name|var51
decl_stmt|;
name|var26
operator|=
operator|(
name|int
operator|)
operator|(
operator|(
name|var5
operator|.
name|random
operator|.
name|nextFloat
argument_list|()
operator|+
name|var5
operator|.
name|random
operator|.
name|nextFloat
argument_list|()
operator|)
operator|*
literal|200F
operator|)
expr_stmt|;
name|float
name|var61
init|=
name|var5
operator|.
name|random
operator|.
name|nextFloat
argument_list|()
operator|*
operator|(
name|float
operator|)
name|Math
operator|.
name|PI
operator|*
literal|2F
decl_stmt|;
name|float
name|var64
init|=
literal|0F
decl_stmt|;
name|float
name|var29
init|=
name|var5
operator|.
name|random
operator|.
name|nextFloat
argument_list|()
operator|*
operator|(
name|float
operator|)
name|Math
operator|.
name|PI
operator|*
literal|2F
decl_stmt|;
name|float
name|var30
init|=
literal|0F
decl_stmt|;
name|float
name|var31
init|=
name|var5
operator|.
name|random
operator|.
name|nextFloat
argument_list|()
operator|*
name|var5
operator|.
name|random
operator|.
name|nextFloat
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|var32
init|=
literal|0
init|;
name|var32
operator|<
name|var26
condition|;
operator|++
name|var32
control|)
block|{
name|var55
operator|+=
name|MathHelper
operator|.
name|sin
argument_list|(
name|var61
argument_list|)
operator|*
name|MathHelper
operator|.
name|cos
argument_list|(
name|var29
argument_list|)
expr_stmt|;
name|var56
operator|+=
name|MathHelper
operator|.
name|cos
argument_list|(
name|var61
argument_list|)
operator|*
name|MathHelper
operator|.
name|cos
argument_list|(
name|var29
argument_list|)
expr_stmt|;
name|var59
operator|+=
name|MathHelper
operator|.
name|sin
argument_list|(
name|var29
argument_list|)
expr_stmt|;
name|var61
operator|+=
name|var64
operator|*
literal|0.2F
expr_stmt|;
name|var64
operator|=
operator|(
name|var64
operator|*=
literal|0.9F
operator|)
operator|+
operator|(
name|var5
operator|.
name|random
operator|.
name|nextFloat
argument_list|()
operator|-
name|var5
operator|.
name|random
operator|.
name|nextFloat
argument_list|()
operator|)
expr_stmt|;
name|var29
operator|=
operator|(
name|var29
operator|+
name|var30
operator|*
literal|0.5F
operator|)
operator|*
literal|0.5F
expr_stmt|;
name|var30
operator|=
operator|(
name|var30
operator|*=
literal|0.75F
operator|)
operator|+
operator|(
name|var5
operator|.
name|random
operator|.
name|nextFloat
argument_list|()
operator|-
name|var5
operator|.
name|random
operator|.
name|nextFloat
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|var5
operator|.
name|random
operator|.
name|nextFloat
argument_list|()
operator|>=
literal|0.25F
condition|)
block|{
name|float
name|var43
init|=
name|var55
operator|+
operator|(
name|var5
operator|.
name|random
operator|.
name|nextFloat
argument_list|()
operator|*
literal|4F
operator|-
literal|2F
operator|)
operator|*
literal|0.2F
decl_stmt|;
name|float
name|var50
init|=
name|var59
operator|+
operator|(
name|var5
operator|.
name|random
operator|.
name|nextFloat
argument_list|()
operator|*
literal|4F
operator|-
literal|2F
operator|)
operator|*
literal|0.2F
decl_stmt|;
name|float
name|var33
init|=
name|var56
operator|+
operator|(
name|var5
operator|.
name|random
operator|.
name|nextFloat
argument_list|()
operator|*
literal|4F
operator|-
literal|2F
operator|)
operator|*
literal|0.2F
decl_stmt|;
name|float
name|var34
init|=
operator|(
name|var5
operator|.
name|height
operator|-
name|var50
operator|)
operator|/
name|var5
operator|.
name|height
decl_stmt|;
name|var34
operator|=
literal|1.2F
operator|+
operator|(
name|var34
operator|*
literal|3.5F
operator|+
literal|1F
operator|)
operator|*
name|var31
expr_stmt|;
name|var34
operator|=
name|MathHelper
operator|.
name|sin
argument_list|(
name|var32
operator|*
operator|(
name|float
operator|)
name|Math
operator|.
name|PI
operator|/
name|var26
argument_list|)
operator|*
name|var34
expr_stmt|;
for|for
control|(
name|int
name|var35
init|=
operator|(
name|int
operator|)
operator|(
name|var43
operator|-
name|var34
operator|)
init|;
name|var35
operator|<=
operator|(
name|int
operator|)
operator|(
name|var43
operator|+
name|var34
operator|)
condition|;
operator|++
name|var35
control|)
block|{
for|for
control|(
name|int
name|var36
init|=
operator|(
name|int
operator|)
operator|(
name|var50
operator|-
name|var34
operator|)
init|;
name|var36
operator|<=
operator|(
name|int
operator|)
operator|(
name|var50
operator|+
name|var34
operator|)
condition|;
operator|++
name|var36
control|)
block|{
for|for
control|(
name|int
name|var37
init|=
operator|(
name|int
operator|)
operator|(
name|var33
operator|-
name|var34
operator|)
init|;
name|var37
operator|<=
operator|(
name|int
operator|)
operator|(
name|var33
operator|+
name|var34
operator|)
condition|;
operator|++
name|var37
control|)
block|{
name|float
name|var38
init|=
name|var35
operator|-
name|var43
decl_stmt|;
name|float
name|var39
init|=
name|var36
operator|-
name|var50
decl_stmt|;
name|float
name|var40
init|=
name|var37
operator|-
name|var33
decl_stmt|;
if|if
condition|(
name|var38
operator|*
name|var38
operator|+
name|var39
operator|*
name|var39
operator|*
literal|2F
operator|+
name|var40
operator|*
name|var40
operator|<
name|var34
operator|*
name|var34
operator|&&
name|var35
operator|>=
literal|1
operator|&&
name|var36
operator|>=
literal|1
operator|&&
name|var37
operator|>=
literal|1
operator|&&
name|var35
operator|<
name|var5
operator|.
name|width
operator|-
literal|1
operator|&&
name|var36
operator|<
name|var5
operator|.
name|height
operator|-
literal|1
operator|&&
name|var37
operator|<
name|var5
operator|.
name|depth
operator|-
literal|1
condition|)
block|{
name|int
name|var66
init|=
operator|(
name|var36
operator|*
name|var5
operator|.
name|depth
operator|+
name|var37
operator|)
operator|*
name|var5
operator|.
name|width
operator|+
name|var35
decl_stmt|;
if|if
condition|(
name|var5
operator|.
name|blocks
index|[
name|var66
index|]
operator|==
name|Block
operator|.
name|STONE
operator|.
name|id
condition|)
block|{
name|var5
operator|.
name|blocks
index|[
name|var66
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
name|populateOre
argument_list|(
name|Block
operator|.
name|COAL_ORE
operator|.
name|id
argument_list|,
literal|90
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|populateOre
argument_list|(
name|Block
operator|.
name|IRON_ORE
operator|.
name|id
argument_list|,
literal|70
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|populateOre
argument_list|(
name|Block
operator|.
name|GOLD_ORE
operator|.
name|id
argument_list|,
literal|50
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|progressBar
operator|.
name|setText
argument_list|(
literal|"Watering.."
argument_list|)
expr_stmt|;
name|var5
operator|=
name|this
expr_stmt|;
name|var51
operator|=
name|Block
operator|.
name|STATIONARY_WATER
operator|.
name|id
expr_stmt|;
name|setProgress
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|var54
operator|=
literal|0
init|;
name|var54
operator|<
name|var5
operator|.
name|width
condition|;
operator|++
name|var54
control|)
block|{
name|var5
operator|.
name|flood
argument_list|(
name|var54
argument_list|,
name|var5
operator|.
name|height
operator|/
literal|2
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|var51
argument_list|)
expr_stmt|;
name|var5
operator|.
name|flood
argument_list|(
name|var54
argument_list|,
name|var5
operator|.
name|height
operator|/
literal|2
operator|-
literal|1
argument_list|,
name|var5
operator|.
name|depth
operator|-
literal|1
argument_list|,
name|var51
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|var54
operator|=
literal|0
init|;
name|var54
operator|<
name|var5
operator|.
name|depth
condition|;
operator|++
name|var54
control|)
block|{
name|var5
operator|.
name|flood
argument_list|(
literal|0
argument_list|,
name|var5
operator|.
name|height
operator|/
literal|2
operator|-
literal|1
argument_list|,
name|var54
argument_list|,
name|var51
argument_list|)
expr_stmt|;
name|var5
operator|.
name|flood
argument_list|(
name|var5
operator|.
name|width
operator|-
literal|1
argument_list|,
name|var5
operator|.
name|height
operator|/
literal|2
operator|-
literal|1
argument_list|,
name|var54
argument_list|,
name|var51
argument_list|)
expr_stmt|;
block|}
name|var54
operator|=
name|var5
operator|.
name|width
operator|*
name|var5
operator|.
name|depth
operator|/
literal|8000
expr_stmt|;
for|for
control|(
name|var24
operator|=
literal|0
init|;
name|var24
operator|<
name|var54
condition|;
operator|++
name|var24
control|)
block|{
if|if
condition|(
name|var24
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|var5
operator|.
name|setProgress
argument_list|(
name|var24
operator|*
literal|100
operator|/
operator|(
name|var54
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
name|var11
operator|=
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
name|var5
operator|.
name|width
argument_list|)
expr_stmt|;
name|var12
operator|=
name|var5
operator|.
name|waterLevel
operator|-
literal|1
operator|-
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|var23
operator|=
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
name|var5
operator|.
name|depth
argument_list|)
expr_stmt|;
if|if
condition|(
name|var5
operator|.
name|blocks
index|[
operator|(
name|var12
operator|*
name|var5
operator|.
name|depth
operator|+
name|var23
operator|)
operator|*
name|var5
operator|.
name|width
operator|+
name|var11
index|]
operator|==
literal|0
condition|)
block|{
name|var5
operator|.
name|flood
argument_list|(
name|var11
argument_list|,
name|var12
argument_list|,
name|var23
argument_list|,
name|var51
argument_list|)
expr_stmt|;
block|}
block|}
name|var5
operator|.
name|setProgress
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|progressBar
operator|.
name|setText
argument_list|(
literal|"Melting.."
argument_list|)
expr_stmt|;
name|var5
operator|=
name|this
expr_stmt|;
name|var46
operator|=
name|width
operator|*
name|depth
operator|*
name|height
operator|/
literal|20000
expr_stmt|;
for|for
control|(
name|var48
operator|=
literal|0
init|;
name|var48
operator|<
name|var46
condition|;
operator|++
name|var48
control|)
block|{
if|if
condition|(
name|var48
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|var5
operator|.
name|setProgress
argument_list|(
name|var48
operator|*
literal|100
operator|/
operator|(
name|var46
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
name|var51
operator|=
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
name|var5
operator|.
name|width
argument_list|)
expr_stmt|;
name|var54
operator|=
operator|(
name|int
operator|)
operator|(
name|var5
operator|.
name|random
operator|.
name|nextFloat
argument_list|()
operator|*
name|var5
operator|.
name|random
operator|.
name|nextFloat
argument_list|()
operator|*
operator|(
name|var5
operator|.
name|waterLevel
operator|-
literal|3
operator|)
operator|)
expr_stmt|;
name|var24
operator|=
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
name|var5
operator|.
name|depth
argument_list|)
expr_stmt|;
if|if
condition|(
name|var5
operator|.
name|blocks
index|[
operator|(
name|var54
operator|*
name|var5
operator|.
name|depth
operator|+
name|var24
operator|)
operator|*
name|var5
operator|.
name|width
operator|+
name|var51
index|]
operator|==
literal|0
condition|)
block|{
name|var5
operator|.
name|flood
argument_list|(
name|var51
argument_list|,
name|var54
argument_list|,
name|var24
argument_list|,
name|Block
operator|.
name|STATIONARY_LAVA
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|var5
operator|.
name|setProgress
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|progressBar
operator|.
name|setText
argument_list|(
literal|"Growing.."
argument_list|)
expr_stmt|;
name|var42
operator|=
name|var9
expr_stmt|;
name|var5
operator|=
name|this
expr_stmt|;
name|var46
operator|=
name|width
expr_stmt|;
name|var48
operator|=
name|depth
expr_stmt|;
name|var51
operator|=
name|height
expr_stmt|;
name|var53
operator|=
operator|new
name|OctaveNoise
argument_list|(
name|random
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|OctaveNoise
name|var58
init|=
operator|new
name|OctaveNoise
argument_list|(
name|random
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|int
name|var63
decl_stmt|;
for|for
control|(
name|var11
operator|=
literal|0
init|;
name|var11
operator|<
name|var46
condition|;
operator|++
name|var11
control|)
block|{
name|var5
operator|.
name|setProgress
argument_list|(
name|var11
operator|*
literal|100
operator|/
operator|(
name|var5
operator|.
name|width
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|var12
operator|=
literal|0
init|;
name|var12
operator|<
name|var48
condition|;
operator|++
name|var12
control|)
block|{
name|boolean
name|var60
init|=
name|var53
operator|.
name|compute
argument_list|(
name|var11
argument_list|,
name|var12
argument_list|)
operator|>
literal|8D
decl_stmt|;
name|boolean
name|var57
init|=
name|var58
operator|.
name|compute
argument_list|(
name|var11
argument_list|,
name|var12
argument_list|)
operator|>
literal|12D
decl_stmt|;
name|var27
operator|=
operator|(
operator|(
name|var26
operator|=
name|var42
index|[
name|var11
operator|+
name|var12
operator|*
name|var46
index|]
operator|)
operator|*
name|var5
operator|.
name|depth
operator|+
name|var12
operator|)
operator|*
name|var5
operator|.
name|width
operator|+
name|var11
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|var28
operator|=
name|var5
operator|.
name|blocks
index|[
operator|(
operator|(
name|var26
operator|+
literal|1
operator|)
operator|*
name|var5
operator|.
name|depth
operator|+
name|var12
operator|)
operator|*
name|var5
operator|.
name|width
operator|+
name|var11
index|]
operator|&
literal|255
operator|)
operator|==
name|Block
operator|.
name|WATER
operator|.
name|id
operator|||
name|var28
operator|==
name|Block
operator|.
name|STATIONARY_WATER
operator|.
name|id
operator|)
operator|&&
name|var26
operator|<=
name|var51
operator|/
literal|2
operator|-
literal|1
operator|&&
name|var57
condition|)
block|{
name|var5
operator|.
name|blocks
index|[
name|var27
index|]
operator|=
operator|(
name|byte
operator|)
name|Block
operator|.
name|GRAVEL
operator|.
name|id
expr_stmt|;
block|}
if|if
condition|(
name|var28
operator|==
literal|0
condition|)
block|{
name|var63
operator|=
name|Block
operator|.
name|GRASS
operator|.
name|id
expr_stmt|;
if|if
condition|(
name|var26
operator|<=
name|var51
operator|/
literal|2
operator|-
literal|1
operator|&&
name|var60
condition|)
block|{
name|var63
operator|=
name|Block
operator|.
name|SAND
operator|.
name|id
expr_stmt|;
block|}
name|var5
operator|.
name|blocks
index|[
name|var27
index|]
operator|=
operator|(
name|byte
operator|)
name|var63
expr_stmt|;
block|}
block|}
block|}
name|progressBar
operator|.
name|setText
argument_list|(
literal|"Planting.."
argument_list|)
expr_stmt|;
name|var42
operator|=
name|var9
expr_stmt|;
name|var5
operator|=
name|this
expr_stmt|;
name|var46
operator|=
name|width
expr_stmt|;
name|var48
operator|=
name|width
operator|*
name|depth
operator|/
literal|3000
expr_stmt|;
for|for
control|(
name|var51
operator|=
literal|0
init|;
name|var51
operator|<
name|var48
condition|;
operator|++
name|var51
control|)
block|{
name|var54
operator|=
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|var5
operator|.
name|setProgress
argument_list|(
name|var51
operator|*
literal|50
operator|/
operator|(
name|var48
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|var24
operator|=
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
name|var5
operator|.
name|width
argument_list|)
expr_stmt|;
name|var11
operator|=
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
name|var5
operator|.
name|depth
argument_list|)
expr_stmt|;
for|for
control|(
name|var12
operator|=
literal|0
init|;
name|var12
operator|<
literal|10
condition|;
operator|++
name|var12
control|)
block|{
name|var23
operator|=
name|var24
expr_stmt|;
name|var25
operator|=
name|var11
expr_stmt|;
for|for
control|(
name|var26
operator|=
literal|0
init|;
name|var26
operator|<
literal|5
condition|;
operator|++
name|var26
control|)
block|{
name|var23
operator|+=
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
operator|-
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|var25
operator|+=
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
operator|-
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|var54
operator|<
literal|2
operator|||
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
operator|==
literal|0
operator|)
operator|&&
name|var23
operator|>=
literal|0
operator|&&
name|var25
operator|>=
literal|0
operator|&&
name|var23
operator|<
name|var5
operator|.
name|width
operator|&&
name|var25
operator|<
name|var5
operator|.
name|depth
condition|)
block|{
name|var27
operator|=
name|var42
index|[
name|var23
operator|+
name|var25
operator|*
name|var46
index|]
operator|+
literal|1
expr_stmt|;
if|if
condition|(
operator|(
name|var5
operator|.
name|blocks
index|[
operator|(
name|var27
operator|*
name|var5
operator|.
name|depth
operator|+
name|var25
operator|)
operator|*
name|var5
operator|.
name|width
operator|+
name|var23
index|]
operator|&
literal|255
operator|)
operator|==
literal|0
condition|)
block|{
name|var63
operator|=
operator|(
name|var27
operator|*
name|var5
operator|.
name|depth
operator|+
name|var25
operator|)
operator|*
name|var5
operator|.
name|width
operator|+
name|var23
expr_stmt|;
if|if
condition|(
operator|(
name|var5
operator|.
name|blocks
index|[
operator|(
operator|(
name|var27
operator|-
literal|1
operator|)
operator|*
name|var5
operator|.
name|depth
operator|+
name|var25
operator|)
operator|*
name|var5
operator|.
name|width
operator|+
name|var23
index|]
operator|&
literal|255
operator|)
operator|==
name|Block
operator|.
name|GRASS
operator|.
name|id
condition|)
block|{
if|if
condition|(
name|var54
operator|==
literal|0
condition|)
block|{
name|var5
operator|.
name|blocks
index|[
name|var63
index|]
operator|=
operator|(
name|byte
operator|)
name|Block
operator|.
name|DANDELION
operator|.
name|id
expr_stmt|;
block|}
if|else if
condition|(
name|var54
operator|==
literal|1
condition|)
block|{
name|var5
operator|.
name|blocks
index|[
name|var63
index|]
operator|=
operator|(
name|byte
operator|)
name|Block
operator|.
name|ROSE
operator|.
name|id
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
name|var42
operator|=
name|var9
expr_stmt|;
name|var5
operator|=
name|this
expr_stmt|;
name|var46
operator|=
name|width
expr_stmt|;
name|var51
operator|=
name|width
operator|*
name|depth
operator|*
name|height
operator|/
literal|2000
expr_stmt|;
for|for
control|(
name|var54
operator|=
literal|0
init|;
name|var54
operator|<
name|var51
condition|;
operator|++
name|var54
control|)
block|{
name|var24
operator|=
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|var5
operator|.
name|setProgress
argument_list|(
name|var54
operator|*
literal|50
operator|/
operator|(
name|var51
operator|-
literal|1
operator|)
operator|+
literal|50
argument_list|)
expr_stmt|;
name|var11
operator|=
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
name|var5
operator|.
name|width
argument_list|)
expr_stmt|;
name|var12
operator|=
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
name|var5
operator|.
name|height
argument_list|)
expr_stmt|;
name|var23
operator|=
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
name|var5
operator|.
name|depth
argument_list|)
expr_stmt|;
for|for
control|(
name|var25
operator|=
literal|0
init|;
name|var25
operator|<
literal|20
condition|;
operator|++
name|var25
control|)
block|{
name|var26
operator|=
name|var11
expr_stmt|;
name|var27
operator|=
name|var12
expr_stmt|;
name|var28
operator|=
name|var23
expr_stmt|;
for|for
control|(
name|var63
operator|=
literal|0
init|;
name|var63
operator|<
literal|5
condition|;
operator|++
name|var63
control|)
block|{
name|var26
operator|+=
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
operator|-
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|var27
operator|+=
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
operator|-
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|var28
operator|+=
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
operator|-
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|var24
operator|<
literal|2
operator|||
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
operator|==
literal|0
operator|)
operator|&&
name|var26
operator|>=
literal|0
operator|&&
name|var28
operator|>=
literal|0
operator|&&
name|var27
operator|>=
literal|1
operator|&&
name|var26
operator|<
name|var5
operator|.
name|width
operator|&&
name|var28
operator|<
name|var5
operator|.
name|depth
operator|&&
name|var27
operator|<
name|var42
index|[
name|var26
operator|+
name|var28
operator|*
name|var46
index|]
operator|-
literal|1
operator|&&
operator|(
name|var5
operator|.
name|blocks
index|[
operator|(
name|var27
operator|*
name|var5
operator|.
name|depth
operator|+
name|var28
operator|)
operator|*
name|var5
operator|.
name|width
operator|+
name|var26
index|]
operator|&
literal|255
operator|)
operator|==
literal|0
condition|)
block|{
name|int
name|var62
init|=
operator|(
name|var27
operator|*
name|var5
operator|.
name|depth
operator|+
name|var28
operator|)
operator|*
name|var5
operator|.
name|width
operator|+
name|var26
decl_stmt|;
if|if
condition|(
operator|(
name|var5
operator|.
name|blocks
index|[
operator|(
operator|(
name|var27
operator|-
literal|1
operator|)
operator|*
name|var5
operator|.
name|depth
operator|+
name|var28
operator|)
operator|*
name|var5
operator|.
name|width
operator|+
name|var26
index|]
operator|&
literal|255
operator|)
operator|==
name|Block
operator|.
name|STONE
operator|.
name|id
condition|)
block|{
if|if
condition|(
name|var24
operator|==
literal|0
condition|)
block|{
name|var5
operator|.
name|blocks
index|[
name|var62
index|]
operator|=
operator|(
name|byte
operator|)
name|Block
operator|.
name|BROWN_MUSHROOM
operator|.
name|id
expr_stmt|;
block|}
if|else if
condition|(
name|var24
operator|==
literal|1
condition|)
block|{
name|var5
operator|.
name|blocks
index|[
name|var62
index|]
operator|=
operator|(
name|byte
operator|)
name|Block
operator|.
name|RED_MUSHROOM
operator|.
name|id
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
name|Level
name|var65
decl_stmt|;
operator|(
name|var65
operator|=
operator|new
name|Level
argument_list|()
operator|)
operator|.
name|waterLevel
operator|=
name|waterLevel
expr_stmt|;
name|var65
operator|.
name|setData
argument_list|(
name|var2
argument_list|,
literal|64
argument_list|,
name|var3
argument_list|,
name|blocks
argument_list|)
expr_stmt|;
name|var65
operator|.
name|createTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|var65
operator|.
name|creator
operator|=
name|var1
expr_stmt|;
name|var65
operator|.
name|name
operator|=
literal|"A Nice World"
expr_stmt|;
name|int
index|[]
name|var52
init|=
name|var9
decl_stmt|;
name|Level
name|var47
init|=
name|var65
decl_stmt|;
name|var5
operator|=
name|this
expr_stmt|;
name|var48
operator|=
name|width
expr_stmt|;
name|var51
operator|=
name|width
operator|*
name|depth
operator|/
literal|4000
expr_stmt|;
for|for
control|(
name|var54
operator|=
literal|0
init|;
name|var54
operator|<
name|var51
condition|;
operator|++
name|var54
control|)
block|{
name|var5
operator|.
name|setProgress
argument_list|(
name|var54
operator|*
literal|50
operator|/
operator|(
name|var51
operator|-
literal|1
operator|)
operator|+
literal|50
argument_list|)
expr_stmt|;
name|var24
operator|=
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
name|var5
operator|.
name|width
argument_list|)
expr_stmt|;
name|var11
operator|=
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
name|var5
operator|.
name|depth
argument_list|)
expr_stmt|;
for|for
control|(
name|var12
operator|=
literal|0
init|;
name|var12
operator|<
literal|20
condition|;
operator|++
name|var12
control|)
block|{
name|var23
operator|=
name|var24
expr_stmt|;
name|var25
operator|=
name|var11
expr_stmt|;
for|for
control|(
name|var26
operator|=
literal|0
init|;
name|var26
operator|<
literal|20
condition|;
operator|++
name|var26
control|)
block|{
name|var23
operator|+=
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
operator|-
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|var25
operator|+=
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
operator|-
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
expr_stmt|;
if|if
condition|(
name|var23
operator|>=
literal|0
operator|&&
name|var25
operator|>=
literal|0
operator|&&
name|var23
operator|<
name|var5
operator|.
name|width
operator|&&
name|var25
operator|<
name|var5
operator|.
name|depth
condition|)
block|{
name|var27
operator|=
name|var52
index|[
name|var23
operator|+
name|var25
operator|*
name|var48
index|]
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|var5
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
operator|==
literal|0
condition|)
block|{
name|var47
operator|.
name|maybeGrowTree
argument_list|(
name|var23
argument_list|,
name|var27
argument_list|,
name|var25
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|var65
return|;
block|}
specifier|private
name|void
name|populateOre
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|int
name|var3
parameter_list|,
name|int
name|var4
parameter_list|)
block|{
name|byte
name|var25
init|=
operator|(
name|byte
operator|)
name|var1
decl_stmt|;
name|var4
operator|=
name|width
expr_stmt|;
name|int
name|var5
init|=
name|depth
decl_stmt|;
name|int
name|var6
init|=
name|height
decl_stmt|;
name|int
name|var7
init|=
name|var4
operator|*
name|var5
operator|*
name|var6
operator|/
literal|256
operator|/
literal|64
operator|*
name|var2
operator|/
literal|100
decl_stmt|;
for|for
control|(
name|int
name|var8
init|=
literal|0
init|;
name|var8
operator|<
name|var7
condition|;
operator|++
name|var8
control|)
block|{
name|setProgress
argument_list|(
name|var8
operator|*
literal|100
operator|/
operator|(
name|var7
operator|-
literal|1
operator|)
operator|/
literal|4
operator|+
name|var3
operator|*
literal|100
operator|/
literal|4
argument_list|)
expr_stmt|;
name|float
name|var9
init|=
name|random
operator|.
name|nextFloat
argument_list|()
operator|*
name|var4
decl_stmt|;
name|float
name|var10
init|=
name|random
operator|.
name|nextFloat
argument_list|()
operator|*
name|var6
decl_stmt|;
name|float
name|var11
init|=
name|random
operator|.
name|nextFloat
argument_list|()
operator|*
name|var5
decl_stmt|;
name|int
name|var12
init|=
operator|(
name|int
operator|)
operator|(
operator|(
name|random
operator|.
name|nextFloat
argument_list|()
operator|+
name|random
operator|.
name|nextFloat
argument_list|()
operator|)
operator|*
literal|75F
operator|*
name|var2
operator|/
literal|100F
operator|)
decl_stmt|;
name|float
name|var13
init|=
name|random
operator|.
name|nextFloat
argument_list|()
operator|*
operator|(
name|float
operator|)
name|Math
operator|.
name|PI
operator|*
literal|2F
decl_stmt|;
name|float
name|var14
init|=
literal|0F
decl_stmt|;
name|float
name|var15
init|=
name|random
operator|.
name|nextFloat
argument_list|()
operator|*
operator|(
name|float
operator|)
name|Math
operator|.
name|PI
operator|*
literal|2F
decl_stmt|;
name|float
name|var16
init|=
literal|0F
decl_stmt|;
for|for
control|(
name|int
name|var17
init|=
literal|0
init|;
name|var17
operator|<
name|var12
condition|;
operator|++
name|var17
control|)
block|{
name|var9
operator|+=
name|MathHelper
operator|.
name|sin
argument_list|(
name|var13
argument_list|)
operator|*
name|MathHelper
operator|.
name|cos
argument_list|(
name|var15
argument_list|)
expr_stmt|;
name|var11
operator|+=
name|MathHelper
operator|.
name|cos
argument_list|(
name|var13
argument_list|)
operator|*
name|MathHelper
operator|.
name|cos
argument_list|(
name|var15
argument_list|)
expr_stmt|;
name|var10
operator|+=
name|MathHelper
operator|.
name|sin
argument_list|(
name|var15
argument_list|)
expr_stmt|;
name|var13
operator|+=
name|var14
operator|*
literal|0.2F
expr_stmt|;
name|var14
operator|=
operator|(
name|var14
operator|*=
literal|0.9F
operator|)
operator|+
operator|(
name|random
operator|.
name|nextFloat
argument_list|()
operator|-
name|random
operator|.
name|nextFloat
argument_list|()
operator|)
expr_stmt|;
name|var15
operator|=
operator|(
name|var15
operator|+
name|var16
operator|*
literal|0.5F
operator|)
operator|*
literal|0.5F
expr_stmt|;
name|var16
operator|=
operator|(
name|var16
operator|*=
literal|0.9F
operator|)
operator|+
operator|(
name|random
operator|.
name|nextFloat
argument_list|()
operator|-
name|random
operator|.
name|nextFloat
argument_list|()
operator|)
expr_stmt|;
name|float
name|var18
init|=
name|MathHelper
operator|.
name|sin
argument_list|(
name|var17
operator|*
operator|(
name|float
operator|)
name|Math
operator|.
name|PI
operator|/
name|var12
argument_list|)
operator|*
name|var2
operator|/
literal|100F
operator|+
literal|1F
decl_stmt|;
for|for
control|(
name|int
name|var19
init|=
operator|(
name|int
operator|)
operator|(
name|var9
operator|-
name|var18
operator|)
init|;
name|var19
operator|<=
operator|(
name|int
operator|)
operator|(
name|var9
operator|+
name|var18
operator|)
condition|;
operator|++
name|var19
control|)
block|{
for|for
control|(
name|int
name|var20
init|=
operator|(
name|int
operator|)
operator|(
name|var10
operator|-
name|var18
operator|)
init|;
name|var20
operator|<=
operator|(
name|int
operator|)
operator|(
name|var10
operator|+
name|var18
operator|)
condition|;
operator|++
name|var20
control|)
block|{
for|for
control|(
name|int
name|var21
init|=
operator|(
name|int
operator|)
operator|(
name|var11
operator|-
name|var18
operator|)
init|;
name|var21
operator|<=
operator|(
name|int
operator|)
operator|(
name|var11
operator|+
name|var18
operator|)
condition|;
operator|++
name|var21
control|)
block|{
name|float
name|var22
init|=
name|var19
operator|-
name|var9
decl_stmt|;
name|float
name|var23
init|=
name|var20
operator|-
name|var10
decl_stmt|;
name|float
name|var24
init|=
name|var21
operator|-
name|var11
decl_stmt|;
if|if
condition|(
name|var22
operator|*
name|var22
operator|+
name|var23
operator|*
name|var23
operator|*
literal|2F
operator|+
name|var24
operator|*
name|var24
operator|<
name|var18
operator|*
name|var18
operator|&&
name|var19
operator|>=
literal|1
operator|&&
name|var20
operator|>=
literal|1
operator|&&
name|var21
operator|>=
literal|1
operator|&&
name|var19
operator|<
name|width
operator|-
literal|1
operator|&&
name|var20
operator|<
name|height
operator|-
literal|1
operator|&&
name|var21
operator|<
name|depth
operator|-
literal|1
condition|)
block|{
name|int
name|var26
init|=
operator|(
name|var20
operator|*
name|depth
operator|+
name|var21
operator|)
operator|*
name|width
operator|+
name|var19
decl_stmt|;
if|if
condition|(
name|blocks
index|[
name|var26
index|]
operator|==
name|Block
operator|.
name|STONE
operator|.
name|id
condition|)
block|{
name|blocks
index|[
name|var26
index|]
operator|=
name|var25
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|setProgress
parameter_list|(
name|int
name|var1
parameter_list|)
block|{
name|progressBar
operator|.
name|setProgress
argument_list|(
name|var1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

