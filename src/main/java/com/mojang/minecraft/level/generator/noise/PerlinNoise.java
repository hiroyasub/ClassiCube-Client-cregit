begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|level
operator|.
name|generator
operator|.
name|noise
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_class
specifier|public
class|class
name|PerlinNoise
extends|extends
name|Noise
block|{
specifier|private
specifier|static
name|double
name|fade
parameter_list|(
name|double
name|a
parameter_list|)
block|{
return|return
name|a
operator|*
name|a
operator|*
name|a
operator|*
operator|(
name|a
operator|*
operator|(
name|a
operator|*
literal|6D
operator|-
literal|15D
operator|)
operator|+
literal|10D
operator|)
return|;
block|}
specifier|private
specifier|static
name|double
name|grad
parameter_list|(
name|int
name|hash
parameter_list|,
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|)
block|{
name|hash
operator|&=
literal|15
expr_stmt|;
name|double
name|u
init|=
name|hash
operator|<
literal|8
condition|?
name|x
else|:
name|y
decl_stmt|;
name|double
name|v
init|=
name|hash
operator|<
literal|4
condition|?
name|y
else|:
operator|(
name|hash
operator|!=
literal|12
operator|&&
name|hash
operator|!=
literal|14
condition|?
literal|0
else|:
name|x
operator|)
decl_stmt|;
return|return
operator|(
operator|(
name|hash
operator|&
literal|1
operator|)
operator|==
literal|0
condition|?
name|u
else|:
operator|-
name|u
operator|)
operator|+
operator|(
operator|(
name|hash
operator|&
literal|2
operator|)
operator|==
literal|0
condition|?
name|v
else|:
operator|-
name|v
operator|)
return|;
block|}
specifier|private
specifier|static
name|double
name|lerp
parameter_list|(
name|double
name|t
parameter_list|,
name|double
name|a
parameter_list|,
name|double
name|b
parameter_list|)
block|{
return|return
name|a
operator|+
name|t
operator|*
operator|(
name|b
operator|-
name|a
operator|)
return|;
block|}
specifier|private
name|int
index|[]
name|noise
decl_stmt|;
specifier|public
name|PerlinNoise
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|Random
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PerlinNoise
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
name|noise
operator|=
operator|new
name|int
index|[
literal|512
index|]
expr_stmt|;
for|for
control|(
name|int
name|count
init|=
literal|0
init|;
name|count
operator|<
literal|256
condition|;
name|noise
index|[
name|count
index|]
operator|=
name|count
operator|++
control|)
block|{
block|}
for|for
control|(
name|int
name|count
init|=
literal|0
init|;
name|count
operator|<
literal|256
condition|;
name|count
operator|++
control|)
block|{
name|int
name|unknown0
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|256
operator|-
name|count
argument_list|)
operator|+
name|count
decl_stmt|;
name|int
name|unknown1
init|=
name|noise
index|[
name|count
index|]
decl_stmt|;
name|noise
index|[
name|count
index|]
operator|=
name|noise
index|[
name|unknown0
index|]
expr_stmt|;
name|noise
index|[
name|unknown0
index|]
operator|=
name|unknown1
expr_stmt|;
name|noise
index|[
name|count
operator|+
literal|256
index|]
operator|=
name|noise
index|[
name|count
index|]
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|double
name|compute
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|z
parameter_list|)
block|{
name|int
name|X
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|x
argument_list|)
operator|&
literal|255
decl_stmt|;
name|int
name|Z
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|z
argument_list|)
operator|&
literal|255
decl_stmt|;
name|x
operator|-=
name|Math
operator|.
name|floor
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|z
operator|-=
name|Math
operator|.
name|floor
argument_list|(
name|z
argument_list|)
expr_stmt|;
name|double
name|u
init|=
name|fade
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|double
name|v
init|=
name|fade
argument_list|(
name|z
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|noise
index|[
name|X
index|]
operator|+
name|Z
decl_stmt|;
name|int
name|aa
init|=
name|noise
index|[
name|a
index|]
decl_stmt|;
name|int
name|ab
init|=
name|noise
index|[
name|a
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|b
init|=
name|noise
index|[
name|X
operator|+
literal|1
index|]
operator|+
name|Z
decl_stmt|;
name|int
name|ba
init|=
name|noise
index|[
name|b
index|]
decl_stmt|;
name|int
name|bb
init|=
name|noise
index|[
name|b
operator|+
literal|1
index|]
decl_stmt|;
return|return
name|lerp
argument_list|(
name|v
argument_list|,
name|lerp
argument_list|(
name|u
argument_list|,
name|grad
argument_list|(
name|noise
index|[
name|aa
index|]
argument_list|,
name|x
argument_list|,
name|z
argument_list|)
argument_list|,
name|grad
argument_list|(
name|noise
index|[
name|ba
index|]
argument_list|,
name|x
operator|-
literal|1
argument_list|,
name|z
argument_list|)
argument_list|)
argument_list|,
name|lerp
argument_list|(
name|u
argument_list|,
name|grad
argument_list|(
name|noise
index|[
name|ab
index|]
argument_list|,
name|x
argument_list|,
name|z
operator|-
literal|1
argument_list|)
argument_list|,
name|grad
argument_list|(
name|noise
index|[
name|bb
index|]
argument_list|,
name|x
operator|-
literal|1
argument_list|,
name|z
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

