begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|level
package|;
end_package

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|ProgressBarDisplay
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|level
operator|.
name|liquid
operator|.
name|LiquidType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|mob
operator|.
name|*
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|MobSpawner
block|{
specifier|public
name|Level
name|level
decl_stmt|;
specifier|public
name|boolean
name|hasStopped
decl_stmt|;
comment|// public static int Count = 0;
specifier|public
name|MobSpawner
parameter_list|(
name|Level
name|level
parameter_list|)
block|{
name|this
operator|.
name|level
operator|=
name|level
expr_stmt|;
name|hasStopped
operator|=
literal|false
expr_stmt|;
comment|// Count++;
block|}
specifier|public
specifier|final
name|int
name|spawn
parameter_list|(
name|int
name|amount
parameter_list|,
name|Entity
name|entity
parameter_list|,
name|ProgressBarDisplay
name|progressBarDisplay
parameter_list|)
block|{
comment|// LogUtil.logInfo(Count);
if|if
condition|(
name|hasStopped
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|var4
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|amount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|hasStopped
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|progressBarDisplay
operator|!=
literal|null
condition|)
block|{
name|progressBarDisplay
operator|.
name|setProgress
argument_list|(
name|i
operator|*
literal|100
operator|/
operator|(
name|amount
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
name|int
name|var6
init|=
name|this
operator|.
name|level
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|int
name|var7
init|=
name|this
operator|.
name|level
operator|.
name|random
operator|.
name|nextInt
argument_list|(
name|this
operator|.
name|level
operator|.
name|width
argument_list|)
decl_stmt|;
name|int
name|var8
init|=
operator|(
name|int
operator|)
operator|(
name|Math
operator|.
name|min
argument_list|(
name|this
operator|.
name|level
operator|.
name|random
operator|.
name|nextFloat
argument_list|()
argument_list|,
name|this
operator|.
name|level
operator|.
name|random
operator|.
name|nextFloat
argument_list|()
argument_list|)
operator|*
name|this
operator|.
name|level
operator|.
name|height
operator|)
decl_stmt|;
name|int
name|var9
init|=
name|this
operator|.
name|level
operator|.
name|random
operator|.
name|nextInt
argument_list|(
name|this
operator|.
name|level
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|level
operator|.
name|isSolidTile
argument_list|(
name|var7
argument_list|,
name|var8
argument_list|,
name|var9
argument_list|)
operator|&&
name|this
operator|.
name|level
operator|.
name|getLiquid
argument_list|(
name|var7
argument_list|,
name|var8
argument_list|,
name|var9
argument_list|)
operator|==
name|LiquidType
operator|.
name|notLiquid
operator|&&
operator|(
operator|!
name|this
operator|.
name|level
operator|.
name|isLit
argument_list|(
name|var7
argument_list|,
name|var8
argument_list|,
name|var9
argument_list|)
operator|||
name|this
operator|.
name|level
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|0
operator|)
condition|)
block|{
for|for
control|(
name|int
name|var10
init|=
literal|0
init|;
name|var10
operator|<
literal|3
condition|;
operator|++
name|var10
control|)
block|{
if|if
condition|(
name|hasStopped
condition|)
block|{
break|break;
block|}
name|int
name|var11
init|=
name|var7
decl_stmt|;
name|int
name|var12
init|=
name|var8
decl_stmt|;
name|int
name|var13
init|=
name|var9
decl_stmt|;
for|for
control|(
name|int
name|var14
init|=
literal|0
init|;
name|var14
operator|<
literal|3
condition|;
operator|++
name|var14
control|)
block|{
if|if
condition|(
name|hasStopped
condition|)
block|{
break|break;
block|}
name|var11
operator|+=
name|this
operator|.
name|level
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
operator|-
name|this
operator|.
name|level
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|var12
operator|+=
name|this
operator|.
name|level
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|1
argument_list|)
operator|-
name|this
operator|.
name|level
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|var13
operator|+=
name|this
operator|.
name|level
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
operator|-
name|this
operator|.
name|level
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
expr_stmt|;
if|if
condition|(
name|var11
operator|>=
literal|0
operator|&&
name|var13
operator|>=
literal|1
operator|&&
name|var12
operator|>=
literal|0
operator|&&
name|var12
operator|<
name|this
operator|.
name|level
operator|.
name|height
operator|-
literal|2
operator|&&
name|var11
operator|<
name|this
operator|.
name|level
operator|.
name|width
operator|&&
name|var13
operator|<
name|this
operator|.
name|level
operator|.
name|length
operator|&&
name|this
operator|.
name|level
operator|.
name|isSolidTile
argument_list|(
name|var11
argument_list|,
name|var12
operator|-
literal|1
argument_list|,
name|var13
argument_list|)
operator|&&
operator|!
name|this
operator|.
name|level
operator|.
name|isSolidTile
argument_list|(
name|var11
argument_list|,
name|var12
argument_list|,
name|var13
argument_list|)
operator|&&
operator|!
name|this
operator|.
name|level
operator|.
name|isSolidTile
argument_list|(
name|var11
argument_list|,
name|var12
operator|+
literal|1
argument_list|,
name|var13
argument_list|)
condition|)
block|{
name|float
name|var15
init|=
name|var11
operator|+
literal|0.5F
decl_stmt|;
name|float
name|var16
init|=
name|var12
operator|+
literal|1F
decl_stmt|;
name|float
name|var17
init|=
name|var13
operator|+
literal|0.5F
decl_stmt|;
name|float
name|var19
decl_stmt|;
name|float
name|var18
decl_stmt|;
name|float
name|var20
decl_stmt|;
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|var18
operator|=
name|var15
operator|-
name|entity
operator|.
name|x
expr_stmt|;
name|var19
operator|=
name|var16
operator|-
name|entity
operator|.
name|y
expr_stmt|;
name|var20
operator|=
name|var17
operator|-
name|entity
operator|.
name|z
expr_stmt|;
if|if
condition|(
name|var18
operator|*
name|var18
operator|+
name|var19
operator|*
name|var19
operator|+
name|var20
operator|*
name|var20
operator|<
literal|256F
condition|)
block|{
continue|continue;
block|}
block|}
else|else
block|{
name|var18
operator|=
name|var15
operator|-
name|this
operator|.
name|level
operator|.
name|xSpawn
expr_stmt|;
name|var19
operator|=
name|var16
operator|-
name|this
operator|.
name|level
operator|.
name|ySpawn
expr_stmt|;
name|var20
operator|=
name|var17
operator|-
name|this
operator|.
name|level
operator|.
name|zSpawn
expr_stmt|;
if|if
condition|(
name|var18
operator|*
name|var18
operator|+
name|var19
operator|*
name|var19
operator|+
name|var20
operator|*
name|var20
operator|<
literal|256F
condition|)
block|{
continue|continue;
block|}
block|}
name|Object
name|entityObject
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|hasStopped
condition|)
block|{
comment|// TODO
if|if
condition|(
name|var6
operator|==
literal|0
condition|)
block|{
name|entityObject
operator|=
operator|new
name|Zombie
argument_list|(
name|this
operator|.
name|level
argument_list|,
name|var15
argument_list|,
name|var16
argument_list|,
name|var17
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|var6
operator|==
literal|1
condition|)
block|{
name|entityObject
operator|=
operator|new
name|Skeleton
argument_list|(
name|this
operator|.
name|level
argument_list|,
name|var15
argument_list|,
name|var16
argument_list|,
name|var17
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|var6
operator|==
literal|3
condition|)
block|{
name|entityObject
operator|=
operator|new
name|Creeper
argument_list|(
name|this
operator|.
name|level
argument_list|,
name|var15
argument_list|,
name|var16
argument_list|,
name|var17
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|var6
operator|==
literal|4
condition|)
block|{
name|entityObject
operator|=
operator|new
name|Spider
argument_list|(
name|this
operator|.
name|level
argument_list|,
name|var15
argument_list|,
name|var16
argument_list|,
name|var17
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|var6
operator|==
literal|2
condition|)
block|{
name|entityObject
operator|=
operator|new
name|Pig
argument_list|(
name|this
operator|.
name|level
argument_list|,
name|var15
argument_list|,
name|var16
argument_list|,
name|var17
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|var6
operator|==
literal|5
condition|)
block|{
name|entityObject
operator|=
operator|new
name|Sheep
argument_list|(
name|this
operator|.
name|level
argument_list|,
name|var15
argument_list|,
name|var16
argument_list|,
name|var17
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entityObject
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|level
operator|.
name|isFree
argument_list|(
operator|(
operator|(
name|Mob
operator|)
name|entityObject
operator|)
operator|.
name|boundingBox
argument_list|)
operator|&&
operator|!
name|this
operator|.
name|level
operator|.
name|creativeMode
condition|)
block|{
operator|++
name|var4
expr_stmt|;
name|this
operator|.
name|level
operator|.
name|addEntity
argument_list|(
operator|(
name|Entity
operator|)
name|entityObject
argument_list|)
expr_stmt|;
comment|// LogUtil.logInfo("Added mob");
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|var4
return|;
block|}
block|}
end_class

end_unit

