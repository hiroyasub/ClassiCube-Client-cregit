begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|mob
operator|.
name|ai
package|;
end_package

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|item
operator|.
name|Arrow
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|model
operator|.
name|Vec3D
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|util
operator|.
name|MathHelper
import|;
end_import

begin_class
specifier|public
class|class
name|BasicAttackAI
extends|extends
name|BasicAI
block|{
specifier|public
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0L
decl_stmt|;
specifier|public
name|int
name|damage
init|=
literal|6
decl_stmt|;
specifier|public
name|boolean
name|attack
parameter_list|(
name|Entity
name|var1
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|level
operator|.
name|clip
argument_list|(
operator|new
name|Vec3D
argument_list|(
name|this
operator|.
name|mob
operator|.
name|x
argument_list|,
name|this
operator|.
name|mob
operator|.
name|y
argument_list|,
name|this
operator|.
name|mob
operator|.
name|z
argument_list|)
argument_list|,
operator|new
name|Vec3D
argument_list|(
name|var1
operator|.
name|x
argument_list|,
name|var1
operator|.
name|y
argument_list|,
name|var1
operator|.
name|z
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|this
operator|.
name|mob
operator|.
name|attackTime
operator|=
literal|5
expr_stmt|;
name|this
operator|.
name|attackDelay
operator|=
name|this
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
operator|+
literal|10
expr_stmt|;
name|int
name|var2
init|=
operator|(
name|int
operator|)
operator|(
operator|(
name|this
operator|.
name|random
operator|.
name|nextFloat
argument_list|()
operator|+
name|this
operator|.
name|random
operator|.
name|nextFloat
argument_list|()
operator|)
operator|/
literal|2.0F
operator|*
name|this
operator|.
name|damage
operator|+
literal|1.0F
operator|)
decl_stmt|;
name|var1
operator|.
name|hurt
argument_list|(
name|this
operator|.
name|mob
argument_list|,
name|var2
argument_list|)
expr_stmt|;
name|this
operator|.
name|noActionTime
operator|=
literal|0
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
specifier|protected
name|void
name|doAttack
parameter_list|()
block|{
name|Entity
name|var1
init|=
name|this
operator|.
name|level
operator|.
name|getPlayer
argument_list|()
decl_stmt|;
name|float
name|var2
init|=
literal|16.0F
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|attackTarget
operator|!=
literal|null
operator|&&
name|this
operator|.
name|attackTarget
operator|.
name|removed
condition|)
block|{
name|this
operator|.
name|attackTarget
operator|=
literal|null
expr_stmt|;
block|}
name|float
name|var3
decl_stmt|;
name|float
name|var4
decl_stmt|;
name|float
name|var5
decl_stmt|;
if|if
condition|(
name|var1
operator|!=
literal|null
operator|&&
name|this
operator|.
name|attackTarget
operator|==
literal|null
condition|)
block|{
name|var3
operator|=
name|var1
operator|.
name|x
operator|-
name|this
operator|.
name|mob
operator|.
name|x
expr_stmt|;
name|var4
operator|=
name|var1
operator|.
name|y
operator|-
name|this
operator|.
name|mob
operator|.
name|y
expr_stmt|;
name|var5
operator|=
name|var1
operator|.
name|z
operator|-
name|this
operator|.
name|mob
operator|.
name|z
expr_stmt|;
if|if
condition|(
name|var3
operator|*
name|var3
operator|+
name|var4
operator|*
name|var4
operator|+
name|var5
operator|*
name|var5
operator|<
name|var2
operator|*
name|var2
condition|)
block|{
name|this
operator|.
name|attackTarget
operator|=
name|var1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|attackTarget
operator|!=
literal|null
condition|)
block|{
name|var3
operator|=
name|this
operator|.
name|attackTarget
operator|.
name|x
operator|-
name|this
operator|.
name|mob
operator|.
name|x
expr_stmt|;
name|var4
operator|=
name|this
operator|.
name|attackTarget
operator|.
name|y
operator|-
name|this
operator|.
name|mob
operator|.
name|y
expr_stmt|;
name|var5
operator|=
name|this
operator|.
name|attackTarget
operator|.
name|z
operator|-
name|this
operator|.
name|mob
operator|.
name|z
expr_stmt|;
name|float
name|var6
decl_stmt|;
if|if
condition|(
operator|(
name|var6
operator|=
name|var3
operator|*
name|var3
operator|+
name|var4
operator|*
name|var4
operator|+
name|var5
operator|*
name|var5
operator|)
operator|>
name|var2
operator|*
name|var2
operator|*
literal|2.0F
operator|*
literal|2.0F
operator|&&
name|this
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|attackTarget
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|attackTarget
operator|!=
literal|null
condition|)
block|{
name|var6
operator|=
name|MathHelper
operator|.
name|sqrt
argument_list|(
name|var6
argument_list|)
expr_stmt|;
name|this
operator|.
name|mob
operator|.
name|yRot
operator|=
operator|(
name|float
operator|)
operator|(
name|Math
operator|.
name|atan2
argument_list|(
name|var5
argument_list|,
name|var3
argument_list|)
operator|*
literal|180.0D
operator|/
literal|3.1415927410125732D
operator|)
operator|-
literal|90.0F
expr_stmt|;
name|this
operator|.
name|mob
operator|.
name|xRot
operator|=
operator|-
operator|(
operator|(
name|float
operator|)
operator|(
name|Math
operator|.
name|atan2
argument_list|(
name|var4
argument_list|,
name|var6
argument_list|)
operator|*
literal|180.0D
operator|/
literal|3.1415927410125732D
operator|)
operator|)
expr_stmt|;
if|if
condition|(
name|MathHelper
operator|.
name|sqrt
argument_list|(
name|var3
operator|*
name|var3
operator|+
name|var4
operator|*
name|var4
operator|+
name|var5
operator|*
name|var5
argument_list|)
operator|<
literal|2.0F
operator|&&
name|this
operator|.
name|attackDelay
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|attack
argument_list|(
name|this
operator|.
name|attackTarget
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|hurt
parameter_list|(
name|Entity
name|var1
parameter_list|,
name|int
name|var2
parameter_list|)
block|{
name|super
operator|.
name|hurt
argument_list|(
name|var1
argument_list|,
name|var2
argument_list|)
expr_stmt|;
if|if
condition|(
name|var1
operator|instanceof
name|Arrow
condition|)
block|{
name|var1
operator|=
operator|(
operator|(
name|Arrow
operator|)
name|var1
operator|)
operator|.
name|getOwner
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|var1
operator|!=
literal|null
operator|&&
operator|!
name|var1
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|mob
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|this
operator|.
name|attackTarget
operator|=
name|var1
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|update
parameter_list|()
block|{
name|super
operator|.
name|update
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|mob
operator|.
name|health
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|doAttack
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

