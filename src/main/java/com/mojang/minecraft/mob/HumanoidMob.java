begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|mob
package|;
end_package

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|Minecraft
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lwjgl
operator|.
name|opengl
operator|.
name|GL11
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|level
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|level
operator|.
name|tile
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|level
operator|.
name|tile
operator|.
name|FireBlock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|level
operator|.
name|tile
operator|.
name|FlowerBlock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|model
operator|.
name|AnimalModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|model
operator|.
name|HumanoidModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|net
operator|.
name|SkinDownloadThread
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|render
operator|.
name|ShapeRenderer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|render
operator|.
name|TextureManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|render
operator|.
name|texture
operator|.
name|Textures
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_class
specifier|public
class|class
name|HumanoidMob
extends|extends
name|Mob
block|{
specifier|public
name|boolean
name|helmet
init|=
name|Math
operator|.
name|random
argument_list|()
operator|<
literal|0.2
decl_stmt|;
specifier|public
name|boolean
name|armor
init|=
name|Math
operator|.
name|random
argument_list|()
operator|<
literal|0.2
decl_stmt|;
specifier|public
name|HumanoidMob
parameter_list|(
name|Level
name|level
parameter_list|,
name|float
name|posX
parameter_list|,
name|float
name|posY
parameter_list|,
name|float
name|posZ
parameter_list|)
block|{
name|super
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|modelName
operator|=
name|Model
operator|.
name|HUMANOID
expr_stmt|;
name|this
operator|.
name|setPos
argument_list|(
name|posX
argument_list|,
name|posY
argument_list|,
name|posZ
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|renderModel
parameter_list|(
name|TextureManager
name|textureManager
parameter_list|,
name|float
name|var2
parameter_list|,
name|float
name|var3
parameter_list|,
name|float
name|var4
parameter_list|,
name|float
name|var5
parameter_list|,
name|float
name|var6
parameter_list|,
name|float
name|scale
parameter_list|)
block|{
if|if
condition|(
literal|"sheep"
operator|.
name|equals
argument_list|(
name|modelName
argument_list|)
condition|)
block|{
name|renderSheep
argument_list|(
name|textureManager
argument_list|,
name|var2
argument_list|,
name|var3
argument_list|,
name|var4
argument_list|,
name|var5
argument_list|,
name|var6
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|isInteger
argument_list|(
name|modelName
argument_list|)
condition|)
block|{
comment|// Model name is a block number
try|try
block|{
name|GL11
operator|.
name|glEnable
argument_list|(
name|GL11
operator|.
name|GL_ALPHA_TEST
argument_list|)
expr_stmt|;
name|GL11
operator|.
name|glEnable
argument_list|(
name|GL11
operator|.
name|GL_BLEND
argument_list|)
expr_stmt|;
name|GL11
operator|.
name|glPushMatrix
argument_list|()
expr_stmt|;
comment|// These are here to revert the scalef calls in Mob.java.
comment|// While those calls are useful for entity models, they cause the
comment|// block models to be rendered upside down.
name|GL11
operator|.
name|glScalef
argument_list|(
operator|-
literal|1F
argument_list|,
literal|1F
argument_list|,
literal|1F
argument_list|)
expr_stmt|;
name|GL11
operator|.
name|glScalef
argument_list|(
literal|1F
argument_list|,
operator|-
literal|1F
argument_list|,
literal|1F
argument_list|)
expr_stmt|;
name|Block
name|block
init|=
name|Block
operator|.
name|blocks
index|[
name|Integer
operator|.
name|parseInt
argument_list|(
name|modelName
argument_list|)
index|]
decl_stmt|;
comment|// TODO: Implement proper detection of which blocks need translation.
name|float
name|yTranslation
init|=
operator|-
literal|1.4F
decl_stmt|;
if|if
condition|(
name|block
operator|instanceof
name|FlowerBlock
operator|||
name|block
operator|instanceof
name|FireBlock
condition|)
block|{
name|yTranslation
operator|=
operator|-
literal|1.8F
expr_stmt|;
block|}
name|GL11
operator|.
name|glTranslatef
argument_list|(
operator|-
literal|0.5F
argument_list|,
name|yTranslation
argument_list|,
operator|-
literal|0.2F
argument_list|)
expr_stmt|;
name|GL11
operator|.
name|glBindTexture
argument_list|(
name|GL11
operator|.
name|GL_TEXTURE_2D
argument_list|,
name|textureManager
operator|.
name|load
argument_list|(
name|Textures
operator|.
name|TERRAIN
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|.
name|renderPreview
argument_list|(
name|ShapeRenderer
operator|.
name|instance
argument_list|)
expr_stmt|;
name|GL11
operator|.
name|glPopMatrix
argument_list|()
expr_stmt|;
name|GL11
operator|.
name|glDisable
argument_list|(
name|GL11
operator|.
name|GL_BLEND
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|modelName
operator|=
literal|"humanoid"
expr_stmt|;
block|}
block|}
else|else
block|{
name|super
operator|.
name|renderModel
argument_list|(
name|textureManager
argument_list|,
name|var2
argument_list|,
name|var3
argument_list|,
name|var4
argument_list|,
name|var5
argument_list|,
name|var6
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|Model
name|model
init|=
name|modelCache
operator|.
name|getModel
argument_list|(
name|modelName
argument_list|)
decl_stmt|;
name|GL11
operator|.
name|glEnable
argument_list|(
name|GL11
operator|.
name|GL_ALPHA_TEST
argument_list|)
expr_stmt|;
if|if
condition|(
name|allowAlpha
condition|)
block|{
name|GL11
operator|.
name|glEnable
argument_list|(
name|GL11
operator|.
name|GL_CULL_FACE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasHair
operator|&&
name|model
operator|instanceof
name|HumanoidModel
condition|)
block|{
name|GL11
operator|.
name|glDisable
argument_list|(
name|GL11
operator|.
name|GL_CULL_FACE
argument_list|)
expr_stmt|;
name|HumanoidModel
name|modelHeadwear
init|=
operator|(
name|HumanoidModel
operator|)
name|model
decl_stmt|;
name|modelHeadwear
operator|.
name|headwear
operator|.
name|yaw
operator|=
name|modelHeadwear
operator|.
name|head
operator|.
name|yaw
expr_stmt|;
name|modelHeadwear
operator|.
name|headwear
operator|.
name|pitch
operator|=
name|modelHeadwear
operator|.
name|head
operator|.
name|pitch
expr_stmt|;
name|modelHeadwear
operator|.
name|headwear
operator|.
name|render
argument_list|(
name|scale
argument_list|)
expr_stmt|;
name|GL11
operator|.
name|glEnable
argument_list|(
name|GL11
operator|.
name|GL_CULL_FACE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|armor
operator|||
name|helmet
condition|)
block|{
name|GL11
operator|.
name|glBindTexture
argument_list|(
name|GL11
operator|.
name|GL_TEXTURE_2D
argument_list|,
name|textureManager
operator|.
name|load
argument_list|(
name|Textures
operator|.
name|ARMOR_PLATE
argument_list|)
argument_list|)
expr_stmt|;
name|GL11
operator|.
name|glDisable
argument_list|(
name|GL11
operator|.
name|GL_CULL_FACE
argument_list|)
expr_stmt|;
name|HumanoidModel
name|modelArmour
init|=
operator|(
name|HumanoidModel
operator|)
name|modelCache
operator|.
name|getModel
argument_list|(
literal|"humanoid.armor"
argument_list|)
decl_stmt|;
name|modelArmour
operator|.
name|head
operator|.
name|render
operator|=
name|helmet
expr_stmt|;
name|modelArmour
operator|.
name|body
operator|.
name|render
operator|=
name|armor
expr_stmt|;
name|modelArmour
operator|.
name|rightArm
operator|.
name|render
operator|=
name|armor
expr_stmt|;
name|modelArmour
operator|.
name|leftArm
operator|.
name|render
operator|=
name|armor
expr_stmt|;
name|modelArmour
operator|.
name|rightLeg
operator|.
name|render
operator|=
literal|false
expr_stmt|;
name|modelArmour
operator|.
name|leftLeg
operator|.
name|render
operator|=
literal|false
expr_stmt|;
name|HumanoidModel
name|humanoidModel
init|=
operator|(
name|HumanoidModel
operator|)
name|model
decl_stmt|;
name|modelArmour
operator|.
name|head
operator|.
name|yaw
operator|=
name|humanoidModel
operator|.
name|head
operator|.
name|yaw
expr_stmt|;
name|modelArmour
operator|.
name|head
operator|.
name|pitch
operator|=
name|humanoidModel
operator|.
name|head
operator|.
name|pitch
expr_stmt|;
name|modelArmour
operator|.
name|rightArm
operator|.
name|pitch
operator|=
name|humanoidModel
operator|.
name|rightArm
operator|.
name|pitch
expr_stmt|;
name|modelArmour
operator|.
name|rightArm
operator|.
name|roll
operator|=
name|humanoidModel
operator|.
name|rightArm
operator|.
name|roll
expr_stmt|;
name|modelArmour
operator|.
name|leftArm
operator|.
name|pitch
operator|=
name|humanoidModel
operator|.
name|leftArm
operator|.
name|pitch
expr_stmt|;
name|modelArmour
operator|.
name|leftArm
operator|.
name|roll
operator|=
name|humanoidModel
operator|.
name|leftArm
operator|.
name|roll
expr_stmt|;
name|modelArmour
operator|.
name|rightLeg
operator|.
name|pitch
operator|=
name|humanoidModel
operator|.
name|rightLeg
operator|.
name|pitch
expr_stmt|;
name|modelArmour
operator|.
name|leftLeg
operator|.
name|pitch
operator|=
name|humanoidModel
operator|.
name|leftLeg
operator|.
name|pitch
expr_stmt|;
name|modelArmour
operator|.
name|head
operator|.
name|render
argument_list|(
name|scale
argument_list|)
expr_stmt|;
name|modelArmour
operator|.
name|body
operator|.
name|render
argument_list|(
name|scale
argument_list|)
expr_stmt|;
name|modelArmour
operator|.
name|rightArm
operator|.
name|render
argument_list|(
name|scale
argument_list|)
expr_stmt|;
name|modelArmour
operator|.
name|leftArm
operator|.
name|render
argument_list|(
name|scale
argument_list|)
expr_stmt|;
name|modelArmour
operator|.
name|rightLeg
operator|.
name|render
argument_list|(
name|scale
argument_list|)
expr_stmt|;
name|modelArmour
operator|.
name|leftLeg
operator|.
name|render
argument_list|(
name|scale
argument_list|)
expr_stmt|;
name|GL11
operator|.
name|glEnable
argument_list|(
name|GL11
operator|.
name|GL_CULL_FACE
argument_list|)
expr_stmt|;
block|}
name|GL11
operator|.
name|glDisable
argument_list|(
name|GL11
operator|.
name|GL_ALPHA_TEST
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|renderSheep
parameter_list|(
name|TextureManager
name|textureManager
parameter_list|,
name|float
name|var2
parameter_list|,
name|float
name|var3
parameter_list|,
name|float
name|var4
parameter_list|,
name|float
name|yawDegrees
parameter_list|,
name|float
name|pitchDegrees
parameter_list|,
name|float
name|scale
parameter_list|)
block|{
name|AnimalModel
name|model
init|=
operator|(
name|AnimalModel
operator|)
name|modelCache
operator|.
name|getModel
argument_list|(
literal|"sheep"
argument_list|)
decl_stmt|;
name|float
name|headY
init|=
name|model
operator|.
name|head
operator|.
name|y
decl_stmt|;
name|float
name|headZ
init|=
name|model
operator|.
name|head
operator|.
name|z
decl_stmt|;
name|super
operator|.
name|renderModel
argument_list|(
name|textureManager
argument_list|,
name|var2
argument_list|,
name|var3
argument_list|,
name|var4
argument_list|,
name|yawDegrees
argument_list|,
name|pitchDegrees
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|GL11
operator|.
name|glBindTexture
argument_list|(
name|GL11
operator|.
name|GL_TEXTURE_2D
argument_list|,
name|textureManager
operator|.
name|load
argument_list|(
name|Textures
operator|.
name|SHEEP_FUR
argument_list|)
argument_list|)
expr_stmt|;
name|AnimalModel
name|sheepModel
init|=
operator|(
name|AnimalModel
operator|)
name|modelCache
operator|.
name|getModel
argument_list|(
literal|"sheep.fur"
argument_list|)
decl_stmt|;
name|sheepModel
operator|.
name|head
operator|.
name|yaw
operator|=
name|model
operator|.
name|head
operator|.
name|yaw
expr_stmt|;
name|sheepModel
operator|.
name|head
operator|.
name|pitch
operator|=
name|model
operator|.
name|head
operator|.
name|pitch
expr_stmt|;
name|sheepModel
operator|.
name|head
operator|.
name|y
operator|=
name|model
operator|.
name|head
operator|.
name|y
expr_stmt|;
name|sheepModel
operator|.
name|head
operator|.
name|x
operator|=
name|model
operator|.
name|head
operator|.
name|x
expr_stmt|;
name|sheepModel
operator|.
name|body
operator|.
name|yaw
operator|=
name|model
operator|.
name|body
operator|.
name|yaw
expr_stmt|;
name|sheepModel
operator|.
name|body
operator|.
name|pitch
operator|=
name|model
operator|.
name|body
operator|.
name|pitch
expr_stmt|;
name|sheepModel
operator|.
name|leg1
operator|.
name|pitch
operator|=
name|model
operator|.
name|leg1
operator|.
name|pitch
expr_stmt|;
name|sheepModel
operator|.
name|leg2
operator|.
name|pitch
operator|=
name|model
operator|.
name|leg2
operator|.
name|pitch
expr_stmt|;
name|sheepModel
operator|.
name|leg3
operator|.
name|pitch
operator|=
name|model
operator|.
name|leg3
operator|.
name|pitch
expr_stmt|;
name|sheepModel
operator|.
name|leg4
operator|.
name|pitch
operator|=
name|model
operator|.
name|leg4
operator|.
name|pitch
expr_stmt|;
name|sheepModel
operator|.
name|head
operator|.
name|render
argument_list|(
name|scale
argument_list|)
expr_stmt|;
name|sheepModel
operator|.
name|body
operator|.
name|render
argument_list|(
name|scale
argument_list|)
expr_stmt|;
name|sheepModel
operator|.
name|leg1
operator|.
name|render
argument_list|(
name|scale
argument_list|)
expr_stmt|;
name|sheepModel
operator|.
name|leg2
operator|.
name|render
argument_list|(
name|scale
argument_list|)
expr_stmt|;
name|sheepModel
operator|.
name|leg3
operator|.
name|render
argument_list|(
name|scale
argument_list|)
expr_stmt|;
name|sheepModel
operator|.
name|leg4
operator|.
name|render
argument_list|(
name|scale
argument_list|)
expr_stmt|;
name|model
operator|.
name|head
operator|.
name|y
operator|=
name|headY
expr_stmt|;
name|model
operator|.
name|head
operator|.
name|z
operator|=
name|headZ
expr_stmt|;
block|}
specifier|protected
name|String
name|modelName
decl_stmt|;
specifier|private
name|String
name|skinName
decl_stmt|;
specifier|private
name|BufferedImage
name|skinBitmap
decl_stmt|;
specifier|private
specifier|volatile
name|BufferedImage
name|newSkinBitmap
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|textureId
decl_stmt|;
comment|// Gets the name of the current skin. Can be 'null' (meaning 'use default').
specifier|public
name|String
name|getSkinName
parameter_list|()
block|{
return|return
name|skinName
return|;
block|}
comment|// Sets model name. newName must not be null. Removes any non-standard skin.
comment|// For humanoid skins, setSkin() should be called with the player's name afterwards.
specifier|public
specifier|synchronized
name|void
name|setModel
parameter_list|(
name|String
name|newName
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|newName
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"newName cannot be null"
argument_list|)
throw|;
block|}
name|resetSkin
argument_list|()
expr_stmt|;
name|modelName
operator|=
name|newName
expr_stmt|;
block|}
comment|// Replaces ANY skin with a default texture.
specifier|public
specifier|synchronized
name|void
name|resetSkin
parameter_list|()
block|{
name|skinName
operator|=
literal|null
expr_stmt|;
name|newSkinBitmap
operator|=
literal|null
expr_stmt|;
block|}
comment|// Causes current skin to be re-downloaded (if any is set).
specifier|public
name|void
name|reloadSkin
parameter_list|()
block|{
name|setSkin
argument_list|(
name|skinName
argument_list|)
expr_stmt|;
block|}
comment|// Immediately unloads current skin texture. Should be called from main thread only.
specifier|public
specifier|synchronized
name|void
name|unloadSkin
parameter_list|(
name|TextureManager
name|textureManager
parameter_list|)
block|{
if|if
condition|(
name|skinBitmap
operator|!=
literal|null
condition|)
block|{
comment|// Only unload texture if not default
name|textureManager
operator|.
name|unloadTexture
argument_list|(
name|textureId
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Sets current skin image IF given skinName matches current skinName.
comment|// Can be called from any thread -- used as a callback for SkinDownloadThread.
comment|// Given image will be loaded next frame, in bindTexture().
specifier|public
specifier|synchronized
name|void
name|setSkinImage
parameter_list|(
name|String
name|skinName
parameter_list|,
name|BufferedImage
name|image
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|skinName
operator|.
name|equals
argument_list|(
name|skinName
argument_list|)
condition|)
block|{
name|newSkinBitmap
operator|=
name|image
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|setSkin
parameter_list|(
name|String
name|skinName
parameter_list|)
block|{
if|if
condition|(
name|skinName
operator|==
literal|null
operator|||
name|skinName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Blank values of "skinName" reset skin to default.
name|this
operator|.
name|newSkinBitmap
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|skinName
operator|=
literal|null
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isInteger
argument_list|(
name|modelName
argument_list|)
condition|)
block|{
comment|// Skins not supported for block models
return|return;
block|}
name|this
operator|.
name|skinName
operator|=
name|skinName
expr_stmt|;
name|String
name|lowercaseUrl
init|=
name|skinName
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|boolean
name|isFullUrl
init|=
operator|(
name|lowercaseUrl
operator|.
name|startsWith
argument_list|(
literal|"http://"
argument_list|)
operator|||
name|lowercaseUrl
operator|.
name|startsWith
argument_list|(
literal|"https://"
argument_list|)
operator|)
operator|&&
name|lowercaseUrl
operator|.
name|endsWith
argument_list|(
literal|".png"
argument_list|)
decl_stmt|;
name|boolean
name|isHumanoid
init|=
name|Model
operator|.
name|HUMANOID
operator|.
name|equals
argument_list|(
name|modelName
argument_list|)
decl_stmt|;
name|String
name|downloadUrl
decl_stmt|;
if|if
condition|(
name|isFullUrl
condition|)
block|{
comment|// Full URL was given, download from there.
name|downloadUrl
operator|=
name|skinName
expr_stmt|;
block|}
else|else
block|{
comment|// Only the player name was given. Download from skin server.
name|downloadUrl
operator|=
name|Minecraft
operator|.
name|skinServer
operator|+
name|skinName
operator|+
literal|".png"
expr_stmt|;
block|}
comment|// Non-humanoid skins are only downloaded if full URL was given.
comment|// (See "Interaction with ExtPlayerList" in CPE ChangeModel spec)
if|if
condition|(
name|isHumanoid
operator|||
name|isFullUrl
condition|)
block|{
operator|new
name|SkinDownloadThread
argument_list|(
name|this
argument_list|,
name|downloadUrl
argument_list|,
name|skinName
argument_list|,
operator|!
name|isHumanoid
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|bindTexture
parameter_list|(
name|TextureManager
name|textureManager
parameter_list|)
block|{
comment|// If skin changed, or if no skin texture is yet loaded...
if|if
condition|(
name|skinBitmap
operator|!=
name|newSkinBitmap
operator|||
name|textureId
operator|<
literal|0
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|skinBitmap
operator|!=
name|newSkinBitmap
operator|||
name|textureId
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|skinBitmap
operator|!=
literal|null
condition|)
block|{
comment|// Unload the old texture
name|textureManager
operator|.
name|unloadTexture
argument_list|(
name|textureId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newSkinBitmap
operator|==
literal|null
condition|)
block|{
comment|// Load default skin
if|if
condition|(
name|isInteger
argument_list|(
name|modelName
argument_list|)
condition|)
block|{
name|textureId
operator|=
name|textureManager
operator|.
name|load
argument_list|(
name|Textures
operator|.
name|TERRAIN
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Model
operator|.
name|HUMANOID
operator|.
name|equals
argument_list|(
name|modelName
argument_list|)
condition|)
block|{
name|textureId
operator|=
name|textureManager
operator|.
name|load
argument_list|(
name|Textures
operator|.
name|HUMANOID_SKIN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|textureId
operator|=
name|textureManager
operator|.
name|loadMob
argument_list|(
name|modelName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Load custom skin
name|hasHair
operator|=
name|Model
operator|.
name|HUMANOID
operator|.
name|equals
argument_list|(
name|modelName
argument_list|)
operator|&&
name|checkForHat
argument_list|(
name|newSkinBitmap
argument_list|)
expr_stmt|;
name|textureId
operator|=
name|textureManager
operator|.
name|load
argument_list|(
name|newSkinBitmap
argument_list|)
expr_stmt|;
block|}
name|skinBitmap
operator|=
name|newSkinBitmap
expr_stmt|;
block|}
block|}
block|}
name|GL11
operator|.
name|glBindTexture
argument_list|(
name|GL11
operator|.
name|GL_TEXTURE_2D
argument_list|,
name|textureId
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

