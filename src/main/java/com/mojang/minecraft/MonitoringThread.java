begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|com
operator|.
name|mojang
operator|.
name|minecraft
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|OperatingSystemMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ThreadMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|MonitoringThread
extends|extends
name|Thread
block|{
specifier|static
class|class
name|ThreadTime
block|{
specifier|private
name|long
name|id
decl_stmt|;
specifier|private
name|long
name|last
decl_stmt|;
specifier|private
name|long
name|current
decl_stmt|;
specifier|public
name|ThreadTime
parameter_list|(
name|long
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|long
name|getCurrent
parameter_list|()
block|{
return|return
name|current
return|;
block|}
specifier|public
name|long
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
specifier|public
name|long
name|getLast
parameter_list|()
block|{
return|return
name|last
return|;
block|}
specifier|public
name|void
name|setCurrent
parameter_list|(
name|long
name|current
parameter_list|)
block|{
name|this
operator|.
name|current
operator|=
name|current
expr_stmt|;
block|}
specifier|public
name|void
name|setLast
parameter_list|(
name|long
name|last
parameter_list|)
block|{
name|this
operator|.
name|last
operator|=
name|last
expr_stmt|;
block|}
block|}
specifier|private
name|long
name|refreshInterval
decl_stmt|;
specifier|private
name|boolean
name|stopped
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|ThreadTime
argument_list|>
name|threadTimeMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|ThreadMXBean
name|threadBean
init|=
name|ManagementFactory
operator|.
name|getThreadMXBean
argument_list|()
decl_stmt|;
specifier|private
name|OperatingSystemMXBean
name|opBean
init|=
name|ManagementFactory
operator|.
name|getOperatingSystemMXBean
argument_list|()
decl_stmt|;
specifier|private
name|Runtime
name|runtime
decl_stmt|;
specifier|public
name|long
name|maxMemory
decl_stmt|,
name|totalMemory
decl_stmt|,
name|freeMemory
decl_stmt|;
specifier|public
name|MonitoringThread
parameter_list|(
name|long
name|refreshInterval
parameter_list|)
block|{
name|this
operator|.
name|refreshInterval
operator|=
name|refreshInterval
expr_stmt|;
name|setName
argument_list|(
literal|"MonitoringThread"
argument_list|)
expr_stmt|;
name|runtime
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|double
name|getAverageUsagePerCPU
parameter_list|()
block|{
return|return
name|getTotalUsage
argument_list|()
operator|/
name|opBean
operator|.
name|getAvailableProcessors
argument_list|()
return|;
block|}
specifier|public
name|double
name|getTotalUsage
parameter_list|()
block|{
name|Collection
argument_list|<
name|ThreadTime
argument_list|>
name|values
decl_stmt|;
synchronized|synchronized
init|(
name|threadTimeMap
init|)
block|{
name|values
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|threadTimeMap
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|double
name|usage
init|=
literal|0D
decl_stmt|;
for|for
control|(
name|ThreadTime
name|threadTime
range|:
name|values
control|)
block|{
synchronized|synchronized
init|(
name|threadTime
init|)
block|{
name|usage
operator|+=
operator|(
name|threadTime
operator|.
name|getCurrent
argument_list|()
operator|-
name|threadTime
operator|.
name|getLast
argument_list|()
operator|)
operator|/
operator|(
name|refreshInterval
operator|*
literal|10000
operator|)
expr_stmt|;
block|}
block|}
return|return
name|usage
return|;
block|}
specifier|public
name|double
name|getUsageByThread
parameter_list|(
name|Thread
name|t
parameter_list|)
block|{
name|ThreadTime
name|info
decl_stmt|;
synchronized|synchronized
init|(
name|threadTimeMap
init|)
block|{
name|info
operator|=
name|threadTimeMap
operator|.
name|get
argument_list|(
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|double
name|usage
init|=
literal|0D
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|info
init|)
block|{
name|usage
operator|=
operator|(
name|info
operator|.
name|getCurrent
argument_list|()
operator|-
name|info
operator|.
name|getLast
argument_list|()
operator|)
operator|/
operator|(
name|refreshInterval
operator|*
literal|10000
operator|)
expr_stmt|;
block|}
block|}
return|return
name|usage
return|;
block|}
specifier|private
name|void
name|mapNewThreads
parameter_list|(
name|long
index|[]
name|allThreadIds
parameter_list|)
block|{
for|for
control|(
name|long
name|id
range|:
name|allThreadIds
control|)
block|{
synchronized|synchronized
init|(
name|threadTimeMap
init|)
block|{
if|if
condition|(
operator|!
name|threadTimeMap
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|threadTimeMap
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|ThreadTime
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|removeDeadThreads
parameter_list|(
name|Set
argument_list|<
name|Long
argument_list|>
name|mappedIds
parameter_list|,
name|long
index|[]
name|allThreadIds
parameter_list|)
block|{
name|outer
label|:
for|for
control|(
name|long
name|id1
range|:
name|mappedIds
control|)
block|{
for|for
control|(
name|long
name|id2
range|:
name|allThreadIds
control|)
block|{
if|if
condition|(
name|id1
operator|==
name|id2
condition|)
block|{
continue|continue
name|outer
continue|;
block|}
block|}
synchronized|synchronized
init|(
name|threadTimeMap
init|)
block|{
name|threadTimeMap
operator|.
name|remove
argument_list|(
name|id1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|stopped
condition|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|mappedIds
decl_stmt|;
synchronized|synchronized
init|(
name|threadTimeMap
init|)
block|{
name|mappedIds
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|threadTimeMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
index|[]
name|allThreadIds
init|=
name|threadBean
operator|.
name|getAllThreadIds
argument_list|()
decl_stmt|;
if|if
condition|(
name|mappedIds
operator|!=
literal|null
condition|)
block|{
name|removeDeadThreads
argument_list|(
name|mappedIds
argument_list|,
name|allThreadIds
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allThreadIds
operator|!=
literal|null
condition|)
block|{
name|mapNewThreads
argument_list|(
name|allThreadIds
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|ThreadTime
argument_list|>
name|values
decl_stmt|;
synchronized|synchronized
init|(
name|threadTimeMap
init|)
block|{
name|values
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|threadTimeMap
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ThreadTime
name|threadTime
range|:
name|values
control|)
block|{
synchronized|synchronized
init|(
name|threadTime
init|)
block|{
name|threadTime
operator|.
name|setCurrent
argument_list|(
name|threadBean
operator|.
name|getThreadCpuTime
argument_list|(
name|threadTime
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|maxMemory
operator|=
name|runtime
operator|.
name|maxMemory
argument_list|()
expr_stmt|;
name|totalMemory
operator|=
name|runtime
operator|.
name|totalMemory
argument_list|()
expr_stmt|;
name|freeMemory
operator|=
name|runtime
operator|.
name|freeMemory
argument_list|()
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|refreshInterval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|ThreadTime
name|threadTime
range|:
name|values
control|)
block|{
synchronized|synchronized
init|(
name|threadTime
init|)
block|{
name|threadTime
operator|.
name|setLast
argument_list|(
name|threadTime
operator|.
name|getCurrent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|stopMonitor
parameter_list|()
block|{
name|stopped
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class

end_unit

