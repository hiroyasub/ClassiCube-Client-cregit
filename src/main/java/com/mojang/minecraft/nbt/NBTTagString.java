begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|nbt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
specifier|public
class|class
name|NBTTagString
extends|extends
name|NBTBase
block|{
comment|/** The string value for the tag (cannot be empty). */
specifier|public
name|String
name|data
decl_stmt|;
specifier|public
name|NBTTagString
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|NBTTagString
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|data
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Empty string not allowed"
argument_list|)
throw|;
block|}
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
comment|/**      * Write the actual data contents of the tag, implemented in NBT extension      * classes      */
annotation|@
name|Override
name|void
name|write
parameter_list|(
name|DataOutput
name|par1DataOutput
parameter_list|)
throws|throws
name|IOException
block|{
name|par1DataOutput
operator|.
name|writeUTF
argument_list|(
name|this
operator|.
name|data
argument_list|)
expr_stmt|;
block|}
comment|/**      * Read the actual data contents of the tag, implemented in NBT extension      * classes      */
annotation|@
name|Override
name|void
name|load
parameter_list|(
name|DataInput
name|par1DataInput
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|data
operator|=
name|par1DataInput
operator|.
name|readUTF
argument_list|()
expr_stmt|;
block|}
comment|/**      * Gets the type byte for the tag.      */
annotation|@
name|Override
specifier|public
name|byte
name|getId
parameter_list|()
block|{
return|return
operator|(
name|byte
operator|)
literal|8
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|""
operator|+
name|this
operator|.
name|data
return|;
block|}
comment|/**      * Creates a clone of the tag.      */
annotation|@
name|Override
specifier|public
name|NBTBase
name|copy
parameter_list|()
block|{
return|return
operator|new
name|NBTTagString
argument_list|(
name|this
operator|.
name|getName
argument_list|()
argument_list|,
name|this
operator|.
name|data
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|other
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|NBTTagString
name|tempOther
init|=
operator|(
name|NBTTagString
operator|)
name|other
decl_stmt|;
return|return
name|this
operator|.
name|data
operator|==
literal|null
operator|&&
name|tempOther
operator|.
name|data
operator|==
literal|null
operator|||
name|this
operator|.
name|data
operator|!=
literal|null
operator|&&
name|this
operator|.
name|data
operator|.
name|equals
argument_list|(
name|tempOther
operator|.
name|data
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|super
operator|.
name|hashCode
argument_list|()
operator|^
name|this
operator|.
name|data
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

