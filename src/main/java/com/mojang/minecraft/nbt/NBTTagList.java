begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|nbt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|NBTTagList
extends|extends
name|NBTBase
block|{
comment|/** The array list containing the tags encapsulated in this list. */
specifier|private
name|List
name|tagList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|/**      * The type byte for the tags in the list - they must all be of the same type.      */
specifier|private
name|byte
name|tagType
decl_stmt|;
specifier|public
name|NBTTagList
parameter_list|()
block|{
name|super
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|public
name|NBTTagList
parameter_list|(
name|String
name|par1Str
parameter_list|)
block|{
name|super
argument_list|(
name|par1Str
argument_list|)
expr_stmt|;
block|}
comment|/**      * Write the actual data contents of the tag, implemented in NBT extension classes      */
name|void
name|write
parameter_list|(
name|DataOutput
name|par1DataOutput
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|tagList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|tagType
operator|=
operator|(
operator|(
name|NBTBase
operator|)
name|this
operator|.
name|tagList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|tagType
operator|=
literal|1
expr_stmt|;
block|}
name|par1DataOutput
operator|.
name|writeByte
argument_list|(
name|this
operator|.
name|tagType
argument_list|)
expr_stmt|;
name|par1DataOutput
operator|.
name|writeInt
argument_list|(
name|this
operator|.
name|tagList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|tagList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
operator|(
operator|(
name|NBTBase
operator|)
name|this
operator|.
name|tagList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|write
argument_list|(
name|par1DataOutput
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Read the actual data contents of the tag, implemented in NBT extension classes      */
name|void
name|load
parameter_list|(
name|DataInput
name|par1DataInput
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|tagType
operator|=
name|par1DataInput
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|int
name|i
init|=
name|par1DataInput
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|this
operator|.
name|tagList
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|i
condition|;
operator|++
name|j
control|)
block|{
name|NBTBase
name|nbtbase
init|=
name|NBTBase
operator|.
name|newTag
argument_list|(
name|this
operator|.
name|tagType
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
decl_stmt|;
name|nbtbase
operator|.
name|load
argument_list|(
name|par1DataInput
argument_list|)
expr_stmt|;
name|this
operator|.
name|tagList
operator|.
name|add
argument_list|(
name|nbtbase
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Gets the type byte for the tag.      */
specifier|public
name|byte
name|getId
parameter_list|()
block|{
return|return
operator|(
name|byte
operator|)
literal|9
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|""
operator|+
name|this
operator|.
name|tagList
operator|.
name|size
argument_list|()
operator|+
literal|" entries of type "
operator|+
name|NBTBase
operator|.
name|getTagName
argument_list|(
name|this
operator|.
name|tagType
argument_list|)
return|;
block|}
comment|/**      * Adds the provided tag to the end of the list. There is no check to verify this tag is of the same type as any      * previous tag.      */
specifier|public
name|void
name|appendTag
parameter_list|(
name|NBTBase
name|par1NBTBase
parameter_list|)
block|{
name|this
operator|.
name|tagType
operator|=
name|par1NBTBase
operator|.
name|getId
argument_list|()
expr_stmt|;
name|this
operator|.
name|tagList
operator|.
name|add
argument_list|(
name|par1NBTBase
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes a tag at the given index.      */
specifier|public
name|NBTBase
name|removeTag
parameter_list|(
name|int
name|par1
parameter_list|)
block|{
return|return
operator|(
name|NBTBase
operator|)
name|this
operator|.
name|tagList
operator|.
name|remove
argument_list|(
name|par1
argument_list|)
return|;
block|}
comment|/**      * Retrieves the tag at the specified index from the list.      */
specifier|public
name|NBTBase
name|tagAt
parameter_list|(
name|int
name|par1
parameter_list|)
block|{
return|return
operator|(
name|NBTBase
operator|)
name|this
operator|.
name|tagList
operator|.
name|get
argument_list|(
name|par1
argument_list|)
return|;
block|}
comment|/**      * Returns the number of tags in the list.      */
specifier|public
name|int
name|tagCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|tagList
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Creates a clone of the tag.      */
specifier|public
name|NBTBase
name|copy
parameter_list|()
block|{
name|NBTTagList
name|nbttaglist
init|=
operator|new
name|NBTTagList
argument_list|(
name|this
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|nbttaglist
operator|.
name|tagType
operator|=
name|this
operator|.
name|tagType
expr_stmt|;
name|Iterator
name|iterator
init|=
name|this
operator|.
name|tagList
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NBTBase
name|nbtbase
init|=
operator|(
name|NBTBase
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|NBTBase
name|nbtbase1
init|=
name|nbtbase
operator|.
name|copy
argument_list|()
decl_stmt|;
name|nbttaglist
operator|.
name|tagList
operator|.
name|add
argument_list|(
name|nbtbase1
argument_list|)
expr_stmt|;
block|}
return|return
name|nbttaglist
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|par1Obj
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|equals
argument_list|(
name|par1Obj
argument_list|)
condition|)
block|{
name|NBTTagList
name|nbttaglist
init|=
operator|(
name|NBTTagList
operator|)
name|par1Obj
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|tagType
operator|==
name|nbttaglist
operator|.
name|tagType
condition|)
block|{
return|return
name|this
operator|.
name|tagList
operator|.
name|equals
argument_list|(
name|nbttaglist
operator|.
name|tagList
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|super
operator|.
name|hashCode
argument_list|()
operator|^
name|this
operator|.
name|tagList
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

