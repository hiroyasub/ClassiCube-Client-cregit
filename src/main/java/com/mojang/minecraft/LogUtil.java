begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|com
operator|.
name|mojang
operator|.
name|minecraft
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|ConsoleHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|FileHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Formatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|LogRecord
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_comment
comment|// Global logging class (to make life easier)
end_comment

begin_class
specifier|public
specifier|final
class|class
name|LogUtil
block|{
specifier|private
specifier|static
specifier|final
name|String
name|LOG_FILE_NAME
init|=
literal|"client.log"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LOG_OLD_FILE_NAME
init|=
literal|"client.old.log"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LINE_SEPARATOR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SimpleDateFormat
name|DATE_FORMAT
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SimpleDateFormat
name|TIME_FORMAT
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"HH:mm:ss"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|LogUtil
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Sets up logging to file (%AppData%/.net.classicube.client/client.log)
static|static
block|{
name|logger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|CustomFormatter
name|formatter
init|=
operator|new
name|CustomFormatter
argument_list|()
decl_stmt|;
comment|// Disable the default logger
name|logger
operator|.
name|setUseParentHandlers
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Set up our console logger
specifier|final
name|ConsoleHandler
name|consoleHandler
init|=
operator|new
name|ConsoleHandler
argument_list|()
decl_stmt|;
name|consoleHandler
operator|.
name|setFormatter
argument_list|(
name|formatter
argument_list|)
expr_stmt|;
name|logger
operator|.
name|addHandler
argument_list|(
name|consoleHandler
argument_list|)
expr_stmt|;
comment|// Locate our log files
name|File
name|directory
init|=
name|Minecraft
operator|.
name|getMinecraftDirectory
argument_list|()
decl_stmt|;
specifier|final
name|File
name|logFile
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|LOG_FILE_NAME
argument_list|)
decl_stmt|;
specifier|final
name|File
name|logOldFile
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|LOG_OLD_FILE_NAME
argument_list|)
decl_stmt|;
comment|// If a logfile already exists, rename it to "client.old.log"
if|if
condition|(
name|logFile
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|logOldFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|logOldFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|logFile
operator|.
name|renameTo
argument_list|(
name|logOldFile
argument_list|)
expr_stmt|;
block|}
comment|// Set up our logfile handler
try|try
block|{
specifier|final
name|FileHandler
name|fileHandler
init|=
operator|new
name|FileHandler
argument_list|(
name|logFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|fileHandler
operator|.
name|setFormatter
argument_list|(
name|formatter
argument_list|)
expr_stmt|;
name|logger
operator|.
name|addHandler
argument_list|(
name|fileHandler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
decl||
name|SecurityException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error creating log file! "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
literal|"Log starts on {0}"
argument_list|,
name|DATE_FORMAT
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|logInfo
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|logInfo
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|exception
parameter_list|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
name|message
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|logWarning
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|logWarning
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|exception
parameter_list|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
name|message
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|logError
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|logError
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|exception
parameter_list|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
name|message
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
specifier|private
name|LogUtil
parameter_list|()
block|{
block|}
specifier|final
specifier|static
class|class
name|CustomFormatter
extends|extends
name|Formatter
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|LogRecord
name|record
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Date
name|eventDate
init|=
operator|new
name|Date
argument_list|(
name|record
operator|.
name|getMillis
argument_list|()
argument_list|)
decl_stmt|;
comment|// Format:
comment|// [HH:mm:ss LEVEL] message
name|sb
operator|.
name|append
argument_list|(
name|TIME_FORMAT
operator|.
name|format
argument_list|(
name|eventDate
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" ["
argument_list|)
operator|.
name|append
argument_list|(
name|record
operator|.
name|getLevel
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"] "
argument_list|)
operator|.
name|append
argument_list|(
name|formatMessage
argument_list|(
name|record
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
name|Throwable
name|exception
init|=
name|record
operator|.
name|getThrown
argument_list|()
decl_stmt|;
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
try|try
init|(
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
init|)
block|{
name|exception
operator|.
name|printStackTrace
argument_list|(
name|pw
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|sw
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

