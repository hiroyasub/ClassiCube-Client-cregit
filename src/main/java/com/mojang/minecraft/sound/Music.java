begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|sound
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|de
operator|.
name|jarnbjo
operator|.
name|ogg
operator|.
name|LogicalOggStreamImpl
import|;
end_import

begin_import
import|import
name|de
operator|.
name|jarnbjo
operator|.
name|ogg
operator|.
name|OggFormatException
import|;
end_import

begin_import
import|import
name|de
operator|.
name|jarnbjo
operator|.
name|ogg
operator|.
name|OnDemandUrlStream
import|;
end_import

begin_import
import|import
name|de
operator|.
name|jarnbjo
operator|.
name|vorbis
operator|.
name|VorbisFormatException
import|;
end_import

begin_import
import|import
name|de
operator|.
name|jarnbjo
operator|.
name|vorbis
operator|.
name|VorbisStream
import|;
end_import

begin_comment
comment|// TODO.
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Music
implements|implements
name|Audio
block|{
name|ByteBuffer
name|playing
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|176400
argument_list|)
decl_stmt|;
name|ByteBuffer
name|current
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|176400
argument_list|)
decl_stmt|;
specifier|private
name|ByteBuffer
name|processing
init|=
literal|null
decl_stmt|;
name|ByteBuffer
name|previous
init|=
literal|null
decl_stmt|;
name|VorbisStream
name|stream
decl_stmt|;
name|SoundPlayer
name|player
decl_stmt|;
name|boolean
name|finished
init|=
literal|false
decl_stmt|;
name|boolean
name|stopped
init|=
literal|false
decl_stmt|;
specifier|public
name|Music
parameter_list|(
name|SoundPlayer
name|var1
parameter_list|,
name|URL
name|var2
parameter_list|)
block|{
name|player
operator|=
name|var1
expr_stmt|;
try|try
block|{
name|LogicalOggStreamImpl
name|var3
init|=
operator|new
name|OnDemandUrlStream
argument_list|(
name|var2
argument_list|)
operator|.
name|getLogicalStreams
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|stream
operator|=
operator|new
name|VorbisStream
argument_list|(
name|var3
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VorbisFormatException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OggFormatException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
operator|new
name|MusicPlayThread
argument_list|(
name|this
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFootStep
parameter_list|(
name|boolean
name|really
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|play
parameter_list|(
name|int
index|[]
name|var1
parameter_list|,
name|int
index|[]
name|var2
parameter_list|,
name|int
name|var3
parameter_list|)
block|{
if|if
condition|(
operator|!
name|player
operator|.
name|settings
operator|.
name|music
condition|)
block|{
name|stopped
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|int
name|var4
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|var3
operator|>
literal|0
operator|&&
operator|(
name|processing
operator|!=
literal|null
operator|||
name|previous
operator|!=
literal|null
operator|)
condition|)
block|{
if|if
condition|(
name|processing
operator|==
literal|null
operator|&&
name|previous
operator|!=
literal|null
condition|)
block|{
name|processing
operator|=
name|previous
expr_stmt|;
name|previous
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|processing
operator|!=
literal|null
operator|&&
name|processing
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|var5
decl_stmt|;
if|if
condition|(
operator|(
name|var5
operator|=
name|processing
operator|.
name|remaining
argument_list|()
operator|/
literal|4
operator|)
operator|>
name|var3
condition|)
block|{
name|var5
operator|=
name|var3
expr_stmt|;
block|}
for|for
control|(
name|int
name|var6
init|=
literal|0
init|;
name|var6
operator|<
name|var5
condition|;
operator|++
name|var6
control|)
block|{
name|var1
index|[
name|var4
operator|+
name|var6
index|]
operator|+=
name|processing
operator|.
name|getShort
argument_list|()
expr_stmt|;
name|var2
index|[
name|var4
operator|+
name|var6
index|]
operator|+=
name|processing
operator|.
name|getShort
argument_list|()
expr_stmt|;
block|}
name|var4
operator|+=
name|var5
expr_stmt|;
name|var3
operator|-=
name|var5
expr_stmt|;
block|}
if|if
condition|(
name|current
operator|==
literal|null
operator|&&
name|processing
operator|!=
literal|null
operator|&&
name|processing
operator|.
name|remaining
argument_list|()
operator|==
literal|0
condition|)
block|{
name|current
operator|=
name|processing
expr_stmt|;
name|processing
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|processing
operator|!=
literal|null
operator|||
name|previous
operator|!=
literal|null
operator|||
operator|!
name|finished
return|;
block|}
block|}
block|}
end_class

end_unit

