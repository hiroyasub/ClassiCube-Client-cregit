begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|net
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageIO
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|GameSettings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|HotKeyData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|Minecraft
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|PlayerListComparator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|PlayerListNameData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|SelectionBoxData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|SessionData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|gui
operator|.
name|ErrorScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|gui
operator|.
name|HUDScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|level
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|level
operator|.
name|LevelLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|level
operator|.
name|tile
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|level
operator|.
name|tile
operator|.
name|TextureSide
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|model
operator|.
name|ModelManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|physics
operator|.
name|CustomAABB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|render
operator|.
name|TextureManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|net
operator|.
name|NetworkHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|util
operator|.
name|ColorCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|util
operator|.
name|LogUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|util
operator|.
name|MathHelper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|oyasunadev
operator|.
name|mcraft
operator|.
name|client
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|com
operator|.
name|oyasunadev
operator|.
name|mcraft
operator|.
name|client
operator|.
name|util
operator|.
name|ExtData
import|;
end_import

begin_class
specifier|public
class|class
name|PacketHandler
block|{
comment|// TODO move out of constants and into something more appropriate
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|ExtData
argument_list|>
name|supportedExtensions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|receivedExtensionLength
decl_stmt|;
specifier|private
specifier|final
name|Minecraft
name|minecraft
decl_stmt|;
specifier|public
name|boolean
name|canSendHeldBlock
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|serverSupportsMessages
init|=
literal|false
decl_stmt|;
specifier|public
name|PacketHandler
parameter_list|(
name|Minecraft
name|minecraft
parameter_list|)
block|{
name|this
operator|.
name|minecraft
operator|=
name|minecraft
expr_stmt|;
block|}
comment|// return true if more packets should be read; return false if that's it
specifier|public
name|boolean
name|handlePacket
parameter_list|(
name|NetworkHandler
name|networkHandler
parameter_list|)
throws|throws
name|IOException
throws|,
name|Exception
block|{
name|networkHandler
operator|.
name|in
operator|.
name|flip
argument_list|()
expr_stmt|;
name|byte
name|packetId
init|=
name|networkHandler
operator|.
name|in
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PacketType
name|packetType
init|=
name|PacketType
operator|.
name|packets
index|[
name|packetId
index|]
decl_stmt|;
if|if
condition|(
name|packetType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown packet ID received: "
operator|+
name|packetId
argument_list|)
throw|;
block|}
if|if
condition|(
name|networkHandler
operator|.
name|in
operator|.
name|remaining
argument_list|()
operator|<
name|packetType
operator|.
name|length
operator|+
literal|1
condition|)
block|{
name|networkHandler
operator|.
name|in
operator|.
name|compact
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|networkHandler
operator|.
name|in
operator|.
name|get
argument_list|()
expr_stmt|;
name|Object
index|[]
name|packetParams
init|=
operator|new
name|Object
index|[
name|packetType
operator|.
name|params
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|packetParams
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|packetParams
index|[
name|i
index|]
operator|=
name|networkHandler
operator|.
name|readObject
argument_list|(
name|packetType
operator|.
name|params
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|NetworkManager
name|networkManager
init|=
name|networkHandler
operator|.
name|netManager
decl_stmt|;
if|if
condition|(
name|networkHandler
operator|.
name|netManager
operator|.
name|successful
condition|)
block|{
if|if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|EXT_INFO
condition|)
block|{
name|String
name|appName
init|=
operator|(
name|String
operator|)
name|packetParams
index|[
literal|0
index|]
decl_stmt|;
name|short
name|extensionCount
init|=
operator|(
name|Short
operator|)
name|packetParams
index|[
literal|1
index|]
decl_stmt|;
name|LogUtil
operator|.
name|logInfo
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Connecting to AppName \"%s\" with ExtensionCount %s"
argument_list|,
name|appName
argument_list|,
name|extensionCount
argument_list|)
argument_list|)
expr_stmt|;
name|receivedExtensionLength
operator|=
name|extensionCount
expr_stmt|;
name|supportedExtensions
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|EXT_ENTRY
condition|)
block|{
name|String
name|extName
init|=
operator|(
name|String
operator|)
name|packetParams
index|[
literal|0
index|]
decl_stmt|;
name|Integer
name|version
init|=
operator|(
name|Integer
operator|)
name|packetParams
index|[
literal|1
index|]
decl_stmt|;
name|supportedExtensions
operator|.
name|add
argument_list|(
operator|new
name|ExtData
argument_list|(
name|extName
argument_list|,
name|version
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|extName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"heldblock"
argument_list|)
condition|)
block|{
name|canSendHeldBlock
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|extName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"messagetypes"
argument_list|)
condition|)
block|{
name|serverSupportsMessages
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|receivedExtensionLength
operator|==
name|supportedExtensions
operator|.
name|size
argument_list|()
condition|)
block|{
name|LogUtil
operator|.
name|logInfo
argument_list|(
literal|"Sending client's supported Extensions"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExtData
argument_list|>
name|mutuallySupportedExts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|PacketType
operator|.
name|packets
operator|.
name|length
operator|-
literal|1
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|PacketType
operator|.
name|packets
index|[
name|j
index|]
operator|!=
literal|null
operator|&&
operator|!
name|PacketType
operator|.
name|packets
index|[
name|j
index|]
operator|.
name|extName
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|mutuallySupportedExts
operator|.
name|add
argument_list|(
operator|new
name|ExtData
argument_list|(
name|PacketType
operator|.
name|packets
index|[
name|j
index|]
operator|.
name|extName
argument_list|,
name|PacketType
operator|.
name|packets
index|[
name|j
index|]
operator|.
name|Version
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Object
index|[]
name|toSendParams
init|=
operator|new
name|Object
index|[]
block|{
name|Constants
operator|.
name|CLIENT_NAME
block|,
operator|(
name|short
operator|)
name|mutuallySupportedExts
operator|.
name|size
argument_list|()
block|}
decl_stmt|;
name|networkManager
operator|.
name|netHandler
operator|.
name|send
argument_list|(
name|PacketType
operator|.
name|EXT_INFO
argument_list|,
name|toSendParams
argument_list|)
expr_stmt|;
for|for
control|(
name|ExtData
name|ext
range|:
name|mutuallySupportedExts
control|)
block|{
name|LogUtil
operator|.
name|logInfo
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Sending ext: %s with version: %s"
argument_list|,
name|ext
operator|.
name|Name
argument_list|,
name|ext
operator|.
name|Version
argument_list|)
argument_list|)
expr_stmt|;
name|toSendParams
operator|=
operator|new
name|Object
index|[]
block|{
name|ext
operator|.
name|Name
block|,
name|ext
operator|.
name|Version
block|}
expr_stmt|;
name|networkManager
operator|.
name|netHandler
operator|.
name|send
argument_list|(
name|PacketType
operator|.
name|EXT_ENTRY
argument_list|,
name|toSendParams
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|SELECTION_CUBOID
condition|)
block|{
name|Level
name|level
init|=
name|minecraft
operator|.
name|level
decl_stmt|;
name|byte
name|selectionId
init|=
operator|(
name|byte
operator|)
name|packetParams
index|[
literal|0
index|]
decl_stmt|;
name|String
name|selectionName
init|=
operator|(
name|String
operator|)
name|packetParams
index|[
literal|1
index|]
decl_stmt|;
comment|// Selection coordinates must be clamped to map boundaries.
name|int
name|x1
init|=
name|MathHelper
operator|.
name|clamp
argument_list|(
operator|(
name|short
operator|)
name|packetParams
index|[
literal|2
index|]
argument_list|,
literal|0
argument_list|,
name|level
operator|.
name|width
argument_list|)
decl_stmt|;
name|int
name|y1
init|=
name|MathHelper
operator|.
name|clamp
argument_list|(
operator|(
name|short
operator|)
name|packetParams
index|[
literal|3
index|]
argument_list|,
literal|0
argument_list|,
name|level
operator|.
name|height
argument_list|)
decl_stmt|;
name|int
name|z1
init|=
name|MathHelper
operator|.
name|clamp
argument_list|(
operator|(
name|short
operator|)
name|packetParams
index|[
literal|4
index|]
argument_list|,
literal|0
argument_list|,
name|level
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// Max values for coordinates may not exceed map dimensions.
comment|// They also cannot be lower than min values.
name|int
name|x2
init|=
name|MathHelper
operator|.
name|clamp
argument_list|(
operator|(
name|short
operator|)
name|packetParams
index|[
literal|5
index|]
argument_list|,
name|x1
argument_list|,
name|level
operator|.
name|width
argument_list|)
decl_stmt|;
name|int
name|y2
init|=
name|MathHelper
operator|.
name|clamp
argument_list|(
operator|(
name|short
operator|)
name|packetParams
index|[
literal|6
index|]
argument_list|,
name|y1
argument_list|,
name|level
operator|.
name|height
argument_list|)
decl_stmt|;
name|int
name|z2
init|=
name|MathHelper
operator|.
name|clamp
argument_list|(
operator|(
name|short
operator|)
name|packetParams
index|[
literal|7
index|]
argument_list|,
name|z1
argument_list|,
name|level
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// Color components must be clamped to valid range (0-255)
name|int
name|r
init|=
name|MathHelper
operator|.
name|clamp
argument_list|(
operator|(
name|short
operator|)
name|packetParams
index|[
literal|8
index|]
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|MathHelper
operator|.
name|clamp
argument_list|(
operator|(
name|short
operator|)
name|packetParams
index|[
literal|9
index|]
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|MathHelper
operator|.
name|clamp
argument_list|(
operator|(
name|short
operator|)
name|packetParams
index|[
literal|10
index|]
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|MathHelper
operator|.
name|clamp
argument_list|(
operator|(
name|short
operator|)
name|packetParams
index|[
literal|11
index|]
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
decl_stmt|;
name|SelectionBoxData
name|data
init|=
operator|new
name|SelectionBoxData
argument_list|(
name|selectionId
argument_list|,
name|selectionName
argument_list|,
operator|new
name|ColorCache
argument_list|(
name|r
operator|/
literal|255F
argument_list|,
name|g
operator|/
literal|255F
argument_list|,
name|b
operator|/
literal|255F
argument_list|,
name|a
operator|/
literal|255F
argument_list|)
argument_list|,
operator|new
name|CustomAABB
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|z2
argument_list|)
argument_list|)
decl_stmt|;
comment|// If a cuboid with the same ID already exists, it will be replaced.
name|minecraft
operator|.
name|selectionBoxes
operator|.
name|put
argument_list|(
name|selectionId
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|REMOVE_SELECTION_CUBOID
condition|)
block|{
name|byte
name|selectionId
init|=
operator|(
name|Byte
operator|)
name|packetParams
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|minecraft
operator|.
name|selectionBoxes
operator|.
name|remove
argument_list|(
name|selectionId
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LogUtil
operator|.
name|logWarning
argument_list|(
literal|"Attempting to remove selection with unknown id "
operator|+
name|selectionId
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|ENV_SET_COLOR
condition|)
block|{
name|byte
name|envVariable
init|=
operator|(
name|Byte
operator|)
name|packetParams
index|[
literal|0
index|]
decl_stmt|;
name|int
name|r
init|=
operator|(
name|Short
operator|)
name|packetParams
index|[
literal|1
index|]
decl_stmt|;
name|int
name|g
init|=
operator|(
name|Short
operator|)
name|packetParams
index|[
literal|2
index|]
decl_stmt|;
name|int
name|b
init|=
operator|(
name|Short
operator|)
name|packetParams
index|[
literal|3
index|]
decl_stmt|;
comment|// If R, G, or B is out-of-range, we should reset the color to default.
name|boolean
name|doReset
init|=
operator|(
name|r
operator|<
literal|0
operator|||
name|r
operator|>
literal|255
operator|||
name|g
operator|<
literal|0
operator|||
name|g
operator|>
literal|255
operator|||
name|b
operator|<
literal|0
operator|||
name|b
operator|>
literal|255
operator|)
decl_stmt|;
name|int
name|dec
init|=
operator|(
name|r
operator|&
literal|0x0ff
operator|)
operator|<<
literal|16
operator||
operator|(
name|g
operator|&
literal|0x0ff
operator|)
operator|<<
literal|8
operator||
name|b
operator|&
literal|0x0ff
decl_stmt|;
switch|switch
condition|(
name|envVariable
condition|)
block|{
case|case
literal|0
case|:
comment|// sky
if|if
condition|(
name|doReset
condition|)
block|{
name|minecraft
operator|.
name|level
operator|.
name|skyColor
operator|=
name|Level
operator|.
name|DEFAULT_SKY_COLOR
expr_stmt|;
block|}
else|else
block|{
name|minecraft
operator|.
name|level
operator|.
name|skyColor
operator|=
name|dec
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// cloud
if|if
condition|(
name|doReset
condition|)
block|{
name|minecraft
operator|.
name|level
operator|.
name|cloudColor
operator|=
name|Level
operator|.
name|DEFAULT_CLOUD_COLOR
expr_stmt|;
block|}
else|else
block|{
name|minecraft
operator|.
name|level
operator|.
name|cloudColor
operator|=
name|dec
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// fog
if|if
condition|(
name|doReset
condition|)
block|{
name|minecraft
operator|.
name|level
operator|.
name|fogColor
operator|=
name|Level
operator|.
name|DEFAULT_FOG_COLOR
expr_stmt|;
block|}
else|else
block|{
name|minecraft
operator|.
name|level
operator|.
name|fogColor
operator|=
name|dec
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// ambient light
if|if
condition|(
name|doReset
condition|)
block|{
name|minecraft
operator|.
name|level
operator|.
name|customShadowColour
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|minecraft
operator|.
name|level
operator|.
name|customShadowColour
operator|=
operator|new
name|ColorCache
argument_list|(
name|r
operator|/
literal|255F
argument_list|,
name|g
operator|/
literal|255F
argument_list|,
name|b
operator|/
literal|255F
argument_list|)
expr_stmt|;
block|}
name|minecraft
operator|.
name|levelRenderer
operator|.
name|refresh
argument_list|()
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// diffuse color
if|if
condition|(
name|doReset
condition|)
block|{
name|minecraft
operator|.
name|level
operator|.
name|customLightColour
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|minecraft
operator|.
name|level
operator|.
name|customLightColour
operator|=
operator|new
name|ColorCache
argument_list|(
name|r
operator|/
literal|255F
argument_list|,
name|g
operator|/
literal|255F
argument_list|,
name|b
operator|/
literal|255F
argument_list|)
expr_stmt|;
block|}
name|minecraft
operator|.
name|levelRenderer
operator|.
name|refresh
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|ENV_SET_MAP_APPEARANCE
condition|)
block|{
name|String
name|textureUrl
init|=
operator|(
name|String
operator|)
name|packetParams
index|[
literal|0
index|]
decl_stmt|;
name|byte
name|sideBlock
init|=
operator|(
name|Byte
operator|)
name|packetParams
index|[
literal|1
index|]
decl_stmt|;
name|byte
name|edgeBlock
init|=
operator|(
name|Byte
operator|)
name|packetParams
index|[
literal|2
index|]
decl_stmt|;
name|short
name|sideLevel
init|=
operator|(
name|Short
operator|)
name|packetParams
index|[
literal|3
index|]
decl_stmt|;
if|if
condition|(
name|minecraft
operator|.
name|settings
operator|.
name|canServerChangeTextures
condition|)
block|{
if|if
condition|(
name|sideBlock
operator|==
operator|-
literal|1
condition|)
block|{
name|minecraft
operator|.
name|textureManager
operator|.
name|customSideBlock
operator|=
literal|null
expr_stmt|;
block|}
if|else if
condition|(
name|sideBlock
operator|<
name|Block
operator|.
name|blocks
operator|.
name|length
condition|)
block|{
name|int
name|ID
init|=
name|Block
operator|.
name|blocks
index|[
name|sideBlock
index|]
operator|.
name|textureId
decl_stmt|;
name|minecraft
operator|.
name|textureManager
operator|.
name|customSideBlock
operator|=
name|minecraft
operator|.
name|textureManager
operator|.
name|textureAtlas
operator|.
name|get
argument_list|(
name|ID
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|edgeBlock
operator|==
operator|-
literal|1
condition|)
block|{
name|minecraft
operator|.
name|textureManager
operator|.
name|customEdgeBlock
operator|=
literal|null
expr_stmt|;
block|}
if|else if
condition|(
name|edgeBlock
operator|<
name|Block
operator|.
name|blocks
operator|.
name|length
condition|)
block|{
name|Block
name|block
init|=
name|Block
operator|.
name|blocks
index|[
name|edgeBlock
index|]
decl_stmt|;
name|int
name|ID
init|=
name|block
operator|.
name|getTextureId
argument_list|(
name|TextureSide
operator|.
name|Top
argument_list|)
decl_stmt|;
name|minecraft
operator|.
name|textureManager
operator|.
name|customEdgeBlock
operator|=
name|minecraft
operator|.
name|textureManager
operator|.
name|textureAtlas
operator|.
name|get
argument_list|(
name|ID
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|textureUrl
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|File
name|path
init|=
operator|new
name|File
argument_list|(
name|Minecraft
operator|.
name|getMinecraftDirectory
argument_list|()
argument_list|,
literal|"/skins/terrain"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|exists
argument_list|()
condition|)
block|{
name|path
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|String
name|hash
init|=
name|minecraft
operator|.
name|getHash
argument_list|(
name|textureUrl
argument_list|)
decl_stmt|;
if|if
condition|(
name|hash
operator|!=
literal|null
condition|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|,
name|hash
operator|+
literal|".png"
argument_list|)
decl_stmt|;
name|BufferedImage
name|image
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|minecraft
operator|.
name|downloadImage
argument_list|(
operator|new
name|URL
argument_list|(
name|textureUrl
argument_list|)
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
name|image
operator|=
name|ImageIO
operator|.
name|read
argument_list|(
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|image
operator|.
name|getWidth
argument_list|()
operator|%
literal|16
operator|==
literal|0
operator|&&
name|image
operator|.
name|getHeight
argument_list|()
operator|%
literal|16
operator|==
literal|0
condition|)
block|{
name|minecraft
operator|.
name|textureManager
operator|.
name|animations
operator|.
name|clear
argument_list|()
expr_stmt|;
name|minecraft
operator|.
name|textureManager
operator|.
name|currentTerrainPng
operator|=
name|image
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
try|try
block|{
name|minecraft
operator|.
name|textureManager
operator|.
name|currentTerrainPng
operator|=
name|ImageIO
operator|.
name|read
argument_list|(
name|TextureManager
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/terrain.png"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex2
parameter_list|)
block|{
name|LogUtil
operator|.
name|logError
argument_list|(
literal|"Error reading default terrain texture."
argument_list|,
name|ex2
argument_list|)
expr_stmt|;
block|}
block|}
name|minecraft
operator|.
name|level
operator|.
name|waterLevel
operator|=
name|sideLevel
expr_stmt|;
name|minecraft
operator|.
name|levelRenderer
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|CLICK_DISTANCE
condition|)
block|{
name|short
name|clickDistance
init|=
operator|(
name|Short
operator|)
name|packetParams
index|[
literal|0
index|]
decl_stmt|;
name|minecraft
operator|.
name|gamemode
operator|.
name|reachDistance
operator|=
name|clickDistance
operator|/
literal|32
expr_stmt|;
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|HOLDTHIS
condition|)
block|{
name|byte
name|blockToHold
init|=
operator|(
name|Byte
operator|)
name|packetParams
index|[
literal|0
index|]
decl_stmt|;
name|byte
name|preventChange
init|=
operator|(
name|Byte
operator|)
name|packetParams
index|[
literal|1
index|]
decl_stmt|;
name|boolean
name|canPreventChange
init|=
name|preventChange
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|canPreventChange
condition|)
block|{
name|GameSettings
operator|.
name|CanReplaceSlot
operator|=
literal|false
expr_stmt|;
block|}
name|minecraft
operator|.
name|player
operator|.
name|inventory
operator|.
name|selected
operator|=
literal|0
expr_stmt|;
name|minecraft
operator|.
name|player
operator|.
name|inventory
operator|.
name|replaceSlot
argument_list|(
name|Block
operator|.
name|blocks
index|[
name|blockToHold
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|canPreventChange
condition|)
block|{
name|GameSettings
operator|.
name|CanReplaceSlot
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|SET_TEXT_HOTKEY
condition|)
block|{
name|String
name|label
init|=
operator|(
name|String
operator|)
name|packetParams
index|[
literal|0
index|]
decl_stmt|;
name|String
name|action
init|=
operator|(
name|String
operator|)
name|packetParams
index|[
literal|1
index|]
decl_stmt|;
name|int
name|keyCode
init|=
operator|(
name|Integer
operator|)
name|packetParams
index|[
literal|2
index|]
decl_stmt|;
name|byte
name|keyMods
init|=
operator|(
name|Byte
operator|)
name|packetParams
index|[
literal|3
index|]
decl_stmt|;
name|HotKeyData
name|data
init|=
operator|new
name|HotKeyData
argument_list|(
name|label
argument_list|,
name|action
argument_list|,
name|keyCode
argument_list|,
name|keyMods
argument_list|)
decl_stmt|;
name|minecraft
operator|.
name|hotKeys
operator|.
name|add
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|EXT_ADD_PLAYER_NAME
condition|)
block|{
name|short
name|nameId
init|=
operator|(
name|short
operator|)
name|packetParams
index|[
literal|0
index|]
decl_stmt|;
name|String
name|playerName
init|=
operator|(
name|String
operator|)
name|packetParams
index|[
literal|1
index|]
decl_stmt|;
name|String
name|listName
init|=
operator|(
name|String
operator|)
name|packetParams
index|[
literal|2
index|]
decl_stmt|;
name|String
name|groupName
init|=
operator|(
name|String
operator|)
name|packetParams
index|[
literal|3
index|]
decl_stmt|;
name|byte
name|unusedRank
init|=
operator|(
name|Byte
operator|)
name|packetParams
index|[
literal|4
index|]
decl_stmt|;
name|int
name|playerIndex
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|PlayerListNameData
name|b
range|:
name|minecraft
operator|.
name|playerListNameData
control|)
block|{
if|if
condition|(
name|b
operator|.
name|nameID
operator|==
name|nameId
condition|)
block|{
comment|// Already exists, update the entry.
name|playerIndex
operator|=
name|minecraft
operator|.
name|playerListNameData
operator|.
name|indexOf
argument_list|(
name|b
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|playerIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|minecraft
operator|.
name|playerListNameData
operator|.
name|add
argument_list|(
operator|new
name|PlayerListNameData
argument_list|(
name|nameId
argument_list|,
name|playerName
argument_list|,
name|listName
argument_list|,
name|groupName
argument_list|,
name|unusedRank
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|minecraft
operator|.
name|playerListNameData
operator|.
name|set
argument_list|(
name|playerIndex
argument_list|,
operator|new
name|PlayerListNameData
argument_list|(
name|nameId
argument_list|,
name|playerName
argument_list|,
name|listName
argument_list|,
name|groupName
argument_list|,
name|unusedRank
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|minecraft
operator|.
name|playerListNameData
argument_list|,
operator|new
name|PlayerListComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|EXT_ADD_ENTITY
condition|)
block|{
name|byte
name|playerID
init|=
operator|(
name|byte
operator|)
name|packetParams
index|[
literal|0
index|]
decl_stmt|;
name|String
name|skinName
init|=
operator|(
name|String
operator|)
name|packetParams
index|[
literal|2
index|]
decl_stmt|;
name|NetworkPlayer
name|targetPlayer
init|=
name|networkManager
operator|.
name|players
operator|.
name|get
argument_list|(
name|playerID
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetPlayer
operator|!=
literal|null
condition|)
block|{
name|targetPlayer
operator|.
name|SkinName
operator|=
name|skinName
expr_stmt|;
name|targetPlayer
operator|.
name|downloadSkin
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|EXT_REMOVE_PLAYER_NAME
condition|)
block|{
name|short
name|nameID
init|=
operator|(
name|short
operator|)
name|packetParams
index|[
literal|0
index|]
decl_stmt|;
name|List
argument_list|<
name|PlayerListNameData
argument_list|>
name|cache
init|=
name|minecraft
operator|.
name|playerListNameData
decl_stmt|;
for|for
control|(
name|int
name|q
init|=
literal|0
init|;
name|q
operator|<
name|minecraft
operator|.
name|playerListNameData
operator|.
name|size
argument_list|()
condition|;
name|q
operator|++
control|)
block|{
if|if
condition|(
name|minecraft
operator|.
name|playerListNameData
operator|.
name|get
argument_list|(
name|q
argument_list|)
operator|.
name|nameID
operator|==
name|nameID
condition|)
block|{
name|cache
operator|.
name|remove
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
name|minecraft
operator|.
name|playerListNameData
operator|=
name|cache
expr_stmt|;
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|CUSTOM_BLOCK_SUPPORT_LEVEL
condition|)
block|{
name|byte
name|supportLevel
init|=
operator|(
name|Byte
operator|)
name|packetParams
index|[
literal|0
index|]
decl_stmt|;
name|LogUtil
operator|.
name|logInfo
argument_list|(
literal|"Using CustomBlocks level "
operator|+
name|supportLevel
argument_list|)
expr_stmt|;
name|networkManager
operator|.
name|netHandler
operator|.
name|send
argument_list|(
name|PacketType
operator|.
name|CUSTOM_BLOCK_SUPPORT_LEVEL
argument_list|,
name|Constants
operator|.
name|CUSTOM_BLOCK_SUPPORT_LEVEL
argument_list|)
expr_stmt|;
name|SessionData
operator|.
name|setAllowedBlocks
argument_list|(
name|supportLevel
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|SET_BLOCK_PERMISSIONS
condition|)
block|{
name|byte
name|blockType
init|=
operator|(
name|byte
operator|)
name|packetParams
index|[
literal|0
index|]
decl_stmt|;
name|byte
name|allowPlacement
init|=
operator|(
name|byte
operator|)
name|packetParams
index|[
literal|1
index|]
decl_stmt|;
name|byte
name|allowDeletion
init|=
operator|(
name|byte
operator|)
name|packetParams
index|[
literal|2
index|]
decl_stmt|;
name|Block
name|block
init|=
name|Block
operator|.
name|blocks
index|[
name|blockType
index|]
decl_stmt|;
if|if
condition|(
name|block
operator|==
literal|null
condition|)
block|{
name|LogUtil
operator|.
name|logWarning
argument_list|(
literal|"Unknown block ID given for SetBlockPermission packet: "
operator|+
name|blockType
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|allowPlacement
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|minecraft
operator|.
name|disallowedPlacementBlocks
operator|.
name|add
argument_list|(
name|block
argument_list|)
condition|)
block|{
name|LogUtil
operator|.
name|logInfo
argument_list|(
literal|"DisallowingPlacement block: "
operator|+
name|block
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|minecraft
operator|.
name|disallowedPlacementBlocks
operator|.
name|remove
argument_list|(
name|block
argument_list|)
condition|)
block|{
name|LogUtil
operator|.
name|logInfo
argument_list|(
literal|"AllowingPlacement block: "
operator|+
name|block
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allowDeletion
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|minecraft
operator|.
name|disallowedBreakingBlocks
operator|.
name|add
argument_list|(
name|block
argument_list|)
condition|)
block|{
name|LogUtil
operator|.
name|logInfo
argument_list|(
literal|"DisallowingDeletion block: "
operator|+
name|block
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|minecraft
operator|.
name|disallowedBreakingBlocks
operator|.
name|remove
argument_list|(
name|block
argument_list|)
condition|)
block|{
name|LogUtil
operator|.
name|logInfo
argument_list|(
literal|"AllowingDeletion block: "
operator|+
name|block
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|CHANGE_MODEL
condition|)
block|{
name|byte
name|playerId
init|=
operator|(
name|byte
operator|)
name|packetParams
index|[
literal|0
index|]
decl_stmt|;
name|String
name|modelName
init|=
operator|(
operator|(
name|String
operator|)
name|packetParams
index|[
literal|1
index|]
operator|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|playerId
operator|>=
literal|0
condition|)
block|{
comment|// Set another player's model
name|NetworkPlayer
name|netPlayer
init|=
name|networkManager
operator|.
name|players
operator|.
name|get
argument_list|(
name|playerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|netPlayer
operator|!=
literal|null
condition|)
block|{
name|ModelManager
name|m
init|=
operator|new
name|ModelManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getModel
argument_list|(
name|modelName
argument_list|)
operator|==
literal|null
condition|)
block|{
name|netPlayer
operator|.
name|modelName
operator|=
literal|"humanoid"
expr_stmt|;
block|}
else|else
block|{
name|netPlayer
operator|.
name|modelName
operator|=
name|modelName
expr_stmt|;
block|}
name|netPlayer
operator|.
name|bindTexture
argument_list|(
name|minecraft
operator|.
name|textureManager
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|playerId
operator|==
operator|-
literal|1
condition|)
block|{
comment|// Set own model
name|ModelManager
name|modelManager
init|=
operator|new
name|ModelManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|modelManager
operator|.
name|getModel
argument_list|(
name|modelName
argument_list|)
operator|==
literal|null
condition|)
block|{
name|minecraft
operator|.
name|player
operator|.
name|modelName
operator|=
literal|"humanoid"
expr_stmt|;
block|}
else|else
block|{
name|minecraft
operator|.
name|player
operator|.
name|modelName
operator|=
name|modelName
expr_stmt|;
block|}
name|minecraft
operator|.
name|player
operator|.
name|bindTexture
argument_list|(
name|minecraft
operator|.
name|textureManager
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|ENV_SET_WEATHER_TYPE
condition|)
block|{
name|byte
name|weatherType
init|=
operator|(
name|byte
operator|)
name|packetParams
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|weatherType
operator|==
literal|0
condition|)
block|{
name|minecraft
operator|.
name|isRaining
operator|=
literal|false
expr_stmt|;
name|minecraft
operator|.
name|isSnowing
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|weatherType
operator|==
literal|1
condition|)
block|{
name|minecraft
operator|.
name|isRaining
operator|=
operator|!
name|minecraft
operator|.
name|isRaining
expr_stmt|;
name|minecraft
operator|.
name|isSnowing
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|weatherType
operator|==
literal|2
condition|)
block|{
name|minecraft
operator|.
name|isSnowing
operator|=
operator|!
name|minecraft
operator|.
name|isSnowing
expr_stmt|;
name|minecraft
operator|.
name|isRaining
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|IDENTIFICATION
condition|)
block|{
name|minecraft
operator|.
name|progressBar
operator|.
name|setTitle
argument_list|(
name|packetParams
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|minecraft
operator|.
name|progressBar
operator|.
name|setText
argument_list|(
name|packetParams
index|[
literal|2
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|minecraft
operator|.
name|player
operator|.
name|userType
operator|=
operator|(
name|Byte
operator|)
name|packetParams
index|[
literal|3
index|]
expr_stmt|;
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|LEVEL_INIT
condition|)
block|{
name|minecraft
operator|.
name|selectionBoxes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|minecraft
operator|.
name|setLevel
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|networkManager
operator|.
name|levelData
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|LEVEL_DATA
condition|)
block|{
name|short
name|chunkLength
init|=
operator|(
name|short
operator|)
name|packetParams
index|[
literal|0
index|]
decl_stmt|;
name|byte
index|[]
name|chunkData
init|=
operator|(
name|byte
index|[]
operator|)
name|packetParams
index|[
literal|1
index|]
decl_stmt|;
name|byte
name|percentComplete
init|=
operator|(
name|byte
operator|)
name|packetParams
index|[
literal|2
index|]
decl_stmt|;
name|networkManager
operator|.
name|minecraft
operator|.
name|progressBar
operator|.
name|setProgress
argument_list|(
name|percentComplete
argument_list|)
expr_stmt|;
name|minecraft
operator|.
name|isLoadingMap
operator|=
literal|false
expr_stmt|;
name|networkManager
operator|.
name|levelData
operator|.
name|write
argument_list|(
name|chunkData
argument_list|,
literal|0
argument_list|,
name|chunkLength
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|LEVEL_FINALIZE
condition|)
block|{
try|try
block|{
name|networkManager
operator|.
name|levelData
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LogUtil
operator|.
name|logError
argument_list|(
literal|"Error receiving level data."
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
comment|// We are in an inconsistent state; abort!
block|}
name|byte
index|[]
name|decompressedStream
init|=
name|LevelLoader
operator|.
name|decompress
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|networkManager
operator|.
name|levelData
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|networkManager
operator|.
name|levelData
operator|=
literal|null
expr_stmt|;
name|short
name|xSize
init|=
operator|(
name|short
operator|)
name|packetParams
index|[
literal|0
index|]
decl_stmt|;
name|short
name|ySize
init|=
operator|(
name|short
operator|)
name|packetParams
index|[
literal|1
index|]
decl_stmt|;
name|short
name|zSize
init|=
operator|(
name|short
operator|)
name|packetParams
index|[
literal|2
index|]
decl_stmt|;
name|Level
name|newLevel
init|=
operator|new
name|Level
argument_list|()
decl_stmt|;
name|newLevel
operator|.
name|setNetworkMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|newLevel
operator|.
name|setData
argument_list|(
name|xSize
argument_list|,
name|ySize
argument_list|,
name|zSize
argument_list|,
name|decompressedStream
argument_list|)
expr_stmt|;
name|networkManager
operator|.
name|minecraft
operator|.
name|setLevel
argument_list|(
name|newLevel
argument_list|)
expr_stmt|;
name|networkManager
operator|.
name|minecraft
operator|.
name|isConnecting
operator|=
literal|false
expr_stmt|;
name|networkManager
operator|.
name|levelLoaded
operator|=
literal|true
expr_stmt|;
comment|// ProgressBarDisplay.InitEnv(this);
comment|// this.levelRenderer.refresh();
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|BLOCK_CHANGE
condition|)
block|{
if|if
condition|(
name|networkManager
operator|.
name|minecraft
operator|.
name|level
operator|!=
literal|null
condition|)
block|{
name|networkManager
operator|.
name|minecraft
operator|.
name|level
operator|.
name|netSetTile
argument_list|(
operator|(
name|short
operator|)
name|packetParams
index|[
literal|0
index|]
argument_list|,
operator|(
name|short
operator|)
name|packetParams
index|[
literal|1
index|]
argument_list|,
operator|(
name|short
operator|)
name|packetParams
index|[
literal|2
index|]
argument_list|,
operator|(
name|byte
operator|)
name|packetParams
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
comment|// else: no level is loaded, ignore block change
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|SPAWN_PLAYER
condition|)
block|{
name|byte
name|newPlayerId
init|=
operator|(
name|Byte
operator|)
name|packetParams
index|[
literal|0
index|]
decl_stmt|;
name|String
name|newPlayerName
init|=
operator|(
name|String
operator|)
name|packetParams
index|[
literal|1
index|]
decl_stmt|;
name|short
name|newPlayerX
init|=
operator|(
name|Short
operator|)
name|packetParams
index|[
literal|2
index|]
decl_stmt|;
name|short
name|newPlayerY
init|=
operator|(
name|Short
operator|)
name|packetParams
index|[
literal|3
index|]
decl_stmt|;
name|short
name|newPlayerZ
init|=
operator|(
name|Short
operator|)
name|packetParams
index|[
literal|4
index|]
decl_stmt|;
name|byte
name|newPlayerXRot
init|=
operator|(
name|Byte
operator|)
name|packetParams
index|[
literal|5
index|]
decl_stmt|;
name|byte
name|newPlayerYRot
init|=
operator|(
name|Byte
operator|)
name|packetParams
index|[
literal|6
index|]
decl_stmt|;
if|if
condition|(
name|newPlayerId
operator|>=
literal|0
condition|)
block|{
comment|// Spawn a new player
name|newPlayerXRot
operator|=
operator|(
name|byte
operator|)
operator|(
name|newPlayerXRot
operator|+
literal|128
operator|)
expr_stmt|;
name|newPlayerY
operator|=
operator|(
name|short
operator|)
operator|(
name|newPlayerY
operator|-
literal|22
operator|)
expr_stmt|;
name|NetworkPlayer
name|newPlayer
init|=
operator|new
name|NetworkPlayer
argument_list|(
name|networkManager
operator|.
name|minecraft
argument_list|,
name|newPlayerName
argument_list|,
name|newPlayerX
argument_list|,
name|newPlayerY
argument_list|,
name|newPlayerZ
argument_list|,
name|newPlayerYRot
operator|*
literal|360
operator|/
literal|256F
argument_list|,
name|newPlayerXRot
operator|*
literal|360
operator|/
literal|256F
argument_list|)
decl_stmt|;
name|networkManager
operator|.
name|players
operator|.
name|put
argument_list|(
name|newPlayerId
argument_list|,
name|newPlayer
argument_list|)
expr_stmt|;
name|minecraft
operator|.
name|level
operator|.
name|addEntity
argument_list|(
name|newPlayer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Set own spawnpoint
name|minecraft
operator|.
name|level
operator|.
name|setSpawnPos
argument_list|(
name|newPlayerX
operator|/
literal|32
argument_list|,
name|newPlayerY
operator|/
literal|32
argument_list|,
name|newPlayerZ
operator|/
literal|32
argument_list|,
name|newPlayerXRot
operator|*
literal|320
operator|/
literal|256
argument_list|)
expr_stmt|;
name|minecraft
operator|.
name|player
operator|.
name|moveTo
argument_list|(
name|newPlayerX
operator|/
literal|32F
argument_list|,
name|newPlayerY
operator|/
literal|32F
argument_list|,
name|newPlayerZ
operator|/
literal|32F
argument_list|,
name|newPlayerXRot
operator|*
literal|360
operator|/
literal|256F
argument_list|,
name|newPlayerYRot
operator|*
literal|360
operator|/
literal|256F
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|POSITION_ROTATION
condition|)
block|{
name|byte
name|playerId
init|=
operator|(
name|Byte
operator|)
name|packetParams
index|[
literal|0
index|]
decl_stmt|;
name|short
name|newX
init|=
operator|(
name|Short
operator|)
name|packetParams
index|[
literal|1
index|]
decl_stmt|;
name|short
name|newY
init|=
operator|(
name|Short
operator|)
name|packetParams
index|[
literal|2
index|]
decl_stmt|;
name|short
name|newZ
init|=
operator|(
name|Short
operator|)
name|packetParams
index|[
literal|3
index|]
decl_stmt|;
name|byte
name|newXRot
init|=
operator|(
name|Byte
operator|)
name|packetParams
index|[
literal|4
index|]
decl_stmt|;
name|byte
name|newYRot
init|=
operator|(
name|Byte
operator|)
name|packetParams
index|[
literal|5
index|]
decl_stmt|;
if|if
condition|(
name|playerId
operator|<
literal|0
condition|)
block|{
comment|// Move self
name|minecraft
operator|.
name|player
operator|.
name|moveTo
argument_list|(
name|newX
operator|/
literal|32F
argument_list|,
name|newY
operator|/
literal|32F
argument_list|,
name|newZ
operator|/
literal|32F
argument_list|,
name|newXRot
operator|*
literal|360
operator|/
literal|256F
argument_list|,
name|newYRot
operator|*
literal|360
operator|/
literal|256F
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Move another player
name|newXRot
operator|=
operator|(
name|byte
operator|)
operator|(
name|newXRot
operator|+
literal|128
operator|)
expr_stmt|;
name|newY
operator|=
operator|(
name|short
operator|)
operator|(
name|newY
operator|-
literal|22
operator|)
expr_stmt|;
name|NetworkPlayer
name|networkPlayer
init|=
name|networkManager
operator|.
name|players
operator|.
name|get
argument_list|(
name|playerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|networkPlayer
operator|!=
literal|null
condition|)
block|{
name|networkPlayer
operator|.
name|teleport
argument_list|(
name|newX
argument_list|,
name|newY
argument_list|,
name|newZ
argument_list|,
name|newYRot
operator|*
literal|360
operator|/
literal|256F
argument_list|,
name|newXRot
operator|*
literal|360
operator|/
literal|256F
argument_list|)
expr_stmt|;
block|}
comment|// else: unknown player ID given, ignore it.
block|}
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|POSITION_ROTATION_UPDATE
condition|)
block|{
name|byte
name|playerId
init|=
operator|(
name|byte
operator|)
name|packetParams
index|[
literal|0
index|]
decl_stmt|;
name|byte
name|deltaX
init|=
operator|(
name|byte
operator|)
name|packetParams
index|[
literal|1
index|]
decl_stmt|;
name|byte
name|deltaY
init|=
operator|(
name|byte
operator|)
name|packetParams
index|[
literal|2
index|]
decl_stmt|;
name|byte
name|deltaZ
init|=
operator|(
name|byte
operator|)
name|packetParams
index|[
literal|3
index|]
decl_stmt|;
name|byte
name|newXRot
init|=
operator|(
name|byte
operator|)
name|packetParams
index|[
literal|4
index|]
decl_stmt|;
name|byte
name|newYRot
init|=
operator|(
name|byte
operator|)
name|packetParams
index|[
literal|5
index|]
decl_stmt|;
if|if
condition|(
name|playerId
operator|>=
literal|0
condition|)
block|{
name|newXRot
operator|=
operator|(
name|byte
operator|)
operator|(
name|newXRot
operator|+
literal|128
operator|)
expr_stmt|;
name|NetworkPlayer
name|networkPlayerInstance
init|=
name|networkManager
operator|.
name|players
operator|.
name|get
argument_list|(
name|playerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|networkPlayerInstance
operator|!=
literal|null
condition|)
block|{
name|networkPlayerInstance
operator|.
name|queue
argument_list|(
name|deltaX
argument_list|,
name|deltaY
argument_list|,
name|deltaZ
argument_list|,
name|newYRot
operator|*
literal|360
operator|/
literal|256F
argument_list|,
name|newXRot
operator|*
literal|360
operator|/
literal|256F
argument_list|)
expr_stmt|;
block|}
block|}
comment|// else: This packet cannot be applied to self, and is ignored if playerId<0
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|ROTATION_UPDATE
condition|)
block|{
name|byte
name|playerID
init|=
operator|(
name|Byte
operator|)
name|packetParams
index|[
literal|0
index|]
decl_stmt|;
name|byte
name|newXRot
init|=
operator|(
name|Byte
operator|)
name|packetParams
index|[
literal|1
index|]
decl_stmt|;
name|byte
name|newYRot
init|=
operator|(
name|Byte
operator|)
name|packetParams
index|[
literal|2
index|]
decl_stmt|;
if|if
condition|(
name|playerID
operator|>=
literal|0
condition|)
block|{
name|newXRot
operator|=
operator|(
name|byte
operator|)
operator|(
name|newXRot
operator|+
literal|128
operator|)
expr_stmt|;
name|NetworkPlayer
name|networkPlayerInstance
init|=
name|networkManager
operator|.
name|players
operator|.
name|get
argument_list|(
name|playerID
argument_list|)
decl_stmt|;
if|if
condition|(
name|networkPlayerInstance
operator|!=
literal|null
condition|)
block|{
name|networkPlayerInstance
operator|.
name|queue
argument_list|(
name|newYRot
operator|*
literal|360
operator|/
literal|256F
argument_list|,
name|newXRot
operator|*
literal|360
operator|/
literal|256F
argument_list|)
expr_stmt|;
block|}
block|}
comment|// else: This packet cannot be applied to self, and is ignored if playerId<0
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|POSITION_UPDATE
condition|)
block|{
name|byte
name|playerID
init|=
operator|(
name|Byte
operator|)
name|packetParams
index|[
literal|0
index|]
decl_stmt|;
name|NetworkPlayer
name|networkPlayerInstance
init|=
name|networkManager
operator|.
name|players
operator|.
name|get
argument_list|(
name|playerID
argument_list|)
decl_stmt|;
if|if
condition|(
name|playerID
operator|>=
literal|0
operator|&&
name|networkPlayerInstance
operator|!=
literal|null
condition|)
block|{
name|networkPlayerInstance
operator|.
name|queue
argument_list|(
operator|(
name|Byte
operator|)
name|packetParams
index|[
literal|1
index|]
argument_list|,
operator|(
name|Byte
operator|)
name|packetParams
index|[
literal|2
index|]
argument_list|,
operator|(
name|Byte
operator|)
name|packetParams
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
comment|// else: This packet cannot be applied to self, and is ignored if playerId<0
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|DESPAWN_PLAYER
condition|)
block|{
name|byte
name|playerID
init|=
operator|(
name|Byte
operator|)
name|packetParams
index|[
literal|0
index|]
decl_stmt|;
name|NetworkPlayer
name|targetPlayer
init|=
name|networkManager
operator|.
name|players
operator|.
name|remove
argument_list|(
name|playerID
argument_list|)
decl_stmt|;
if|if
condition|(
name|playerID
operator|>=
literal|0
operator|&&
name|targetPlayer
operator|!=
literal|null
condition|)
block|{
name|targetPlayer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|minecraft
operator|.
name|level
operator|.
name|removeEntity
argument_list|(
name|targetPlayer
argument_list|)
expr_stmt|;
block|}
comment|// else: This packet cannot be applied to self, and is ignored if playerId<0
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|CHAT_MESSAGE
condition|)
block|{
name|byte
name|messageType
init|=
operator|(
name|Byte
operator|)
name|packetParams
index|[
literal|0
index|]
decl_stmt|;
name|String
name|message
init|=
operator|(
name|String
operator|)
name|packetParams
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|messageType
operator|>
literal|0
operator|&&
name|serverSupportsMessages
condition|)
block|{
comment|// MessageTypes CPE
switch|switch
condition|(
name|messageType
condition|)
block|{
case|case
literal|1
case|:
name|HUDScreen
operator|.
name|ServerName
operator|=
name|message
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|HUDScreen
operator|.
name|Compass
operator|=
name|message
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|HUDScreen
operator|.
name|UserDetail
operator|=
name|message
expr_stmt|;
break|break;
case|case
literal|11
case|:
name|HUDScreen
operator|.
name|BottomRight1
operator|=
name|message
expr_stmt|;
break|break;
case|case
literal|12
case|:
name|HUDScreen
operator|.
name|BottomRight2
operator|=
name|message
expr_stmt|;
break|break;
case|case
literal|13
case|:
name|HUDScreen
operator|.
name|BottomRight3
operator|=
name|message
expr_stmt|;
break|break;
case|case
literal|100
case|:
name|HUDScreen
operator|.
name|Announcement
operator|=
name|message
expr_stmt|;
break|break;
default|default:
comment|// unknown MessageType: stick it into regular chat box
name|minecraft
operator|.
name|hud
operator|.
name|addChat
argument_list|(
name|message
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|else if
condition|(
name|messageType
operator|<
literal|0
operator|&&
operator|!
name|serverSupportsMessages
condition|)
block|{
comment|// For compatibility with vanilla Minecraft: negative ID colors a message yellow
name|minecraft
operator|.
name|hud
operator|.
name|addChat
argument_list|(
literal|"&e"
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Regular chat
name|minecraft
operator|.
name|hud
operator|.
name|addChat
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|DISCONNECT
condition|)
block|{
name|networkManager
operator|.
name|netHandler
operator|.
name|close
argument_list|()
expr_stmt|;
name|minecraft
operator|.
name|setCurrentScreen
argument_list|(
operator|new
name|ErrorScreen
argument_list|(
literal|"Connection lost"
argument_list|,
operator|(
name|String
operator|)
name|packetParams
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|packetType
operator|==
name|PacketType
operator|.
name|UPDATE_PLAYER_TYPE
condition|)
block|{
name|minecraft
operator|.
name|player
operator|.
name|userType
operator|=
operator|(
name|byte
operator|)
name|packetParams
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|networkHandler
operator|.
name|connected
condition|)
block|{
return|return
literal|false
return|;
block|}
name|networkHandler
operator|.
name|in
operator|.
name|compact
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

