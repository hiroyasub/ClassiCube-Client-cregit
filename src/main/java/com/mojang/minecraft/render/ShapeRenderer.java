begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|render
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteOrder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|FloatBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|IntBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ShortBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lwjgl
operator|.
name|opengl
operator|.
name|ARBVertexBufferObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lwjgl
operator|.
name|opengl
operator|.
name|GL11
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lwjgl
operator|.
name|opengl
operator|.
name|GLContext
import|;
end_import

begin_class
specifier|public
class|class
name|ShapeRenderer
block|{
specifier|private
specifier|static
name|boolean
name|convertQuadsToTriangles
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|tryVBO
decl_stmt|;
specifier|private
name|ByteBuffer
name|byteBuffer
decl_stmt|;
specifier|private
name|IntBuffer
name|intBuffer
decl_stmt|;
specifier|private
name|FloatBuffer
name|floatBuffer
decl_stmt|;
specifier|private
name|ShortBuffer
name|shortBuffer
decl_stmt|;
specifier|private
name|int
index|[]
name|rawBuffer
decl_stmt|;
specifier|private
name|int
name|vertexCount
decl_stmt|;
specifier|private
name|double
name|textureU
decl_stmt|;
specifier|private
name|double
name|textureV
decl_stmt|;
specifier|private
name|int
name|brightness
decl_stmt|;
specifier|private
name|int
name|color
decl_stmt|;
specifier|private
name|boolean
name|hasColor
decl_stmt|;
specifier|private
name|boolean
name|hasTexture
decl_stmt|;
specifier|private
name|boolean
name|hasBrightness
decl_stmt|;
specifier|private
name|boolean
name|hasNormals
decl_stmt|;
specifier|private
name|int
name|rawBufferIndex
decl_stmt|;
specifier|private
name|int
name|addedVertices
decl_stmt|;
specifier|private
name|boolean
name|isColorDisabled
decl_stmt|;
specifier|private
name|int
name|drawMode
decl_stmt|;
specifier|private
name|double
name|xOffset
decl_stmt|;
specifier|private
name|double
name|yOffset
decl_stmt|;
specifier|private
name|double
name|zOffset
decl_stmt|;
specifier|private
name|int
name|normal
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ShapeRenderer
name|instance
init|=
operator|new
name|ShapeRenderer
argument_list|(
literal|2097152
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|isDrawing
decl_stmt|;
specifier|private
name|boolean
name|useVBO
decl_stmt|;
specifier|private
name|IntBuffer
name|vertexBuffers
decl_stmt|;
specifier|private
name|int
name|vboIndex
decl_stmt|;
specifier|private
name|int
name|vboCount
init|=
literal|10
decl_stmt|;
specifier|private
name|int
name|bufferSize
decl_stmt|;
specifier|private
name|ShapeRenderer
parameter_list|(
name|int
name|var1
parameter_list|)
block|{
name|this
operator|.
name|bufferSize
operator|=
name|var1
expr_stmt|;
name|this
operator|.
name|byteBuffer
operator|=
name|GLAllocation
operator|.
name|createDirectByteBuffer
argument_list|(
name|var1
operator|*
literal|4
argument_list|)
expr_stmt|;
name|this
operator|.
name|intBuffer
operator|=
name|this
operator|.
name|byteBuffer
operator|.
name|asIntBuffer
argument_list|()
expr_stmt|;
name|this
operator|.
name|floatBuffer
operator|=
name|this
operator|.
name|byteBuffer
operator|.
name|asFloatBuffer
argument_list|()
expr_stmt|;
name|this
operator|.
name|shortBuffer
operator|=
name|this
operator|.
name|byteBuffer
operator|.
name|asShortBuffer
argument_list|()
expr_stmt|;
name|this
operator|.
name|rawBuffer
operator|=
operator|new
name|int
index|[
name|var1
index|]
expr_stmt|;
name|this
operator|.
name|useVBO
operator|=
name|tryVBO
operator|&&
name|GLContext
operator|.
name|getCapabilities
argument_list|()
operator|.
name|GL_ARB_vertex_buffer_object
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|useVBO
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"GPU allows VBOs: Enabling"
argument_list|)
expr_stmt|;
name|this
operator|.
name|vertexBuffers
operator|=
name|GLAllocation
operator|.
name|createDirectIntBuffer
argument_list|(
name|this
operator|.
name|vboCount
argument_list|)
expr_stmt|;
name|ARBVertexBufferObject
operator|.
name|glGenBuffersARB
argument_list|(
name|this
operator|.
name|vertexBuffers
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|end
parameter_list|()
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isDrawing
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Not tesselating!"
argument_list|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|isDrawing
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|vertexCount
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|intBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|intBuffer
operator|.
name|put
argument_list|(
name|this
operator|.
name|rawBuffer
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|rawBufferIndex
argument_list|)
expr_stmt|;
name|this
operator|.
name|byteBuffer
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|byteBuffer
operator|.
name|limit
argument_list|(
name|this
operator|.
name|rawBufferIndex
operator|*
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|useVBO
condition|)
block|{
name|this
operator|.
name|vboIndex
operator|=
operator|(
name|this
operator|.
name|vboIndex
operator|+
literal|1
operator|)
operator|%
name|this
operator|.
name|vboCount
expr_stmt|;
name|ARBVertexBufferObject
operator|.
name|glBindBufferARB
argument_list|(
name|ARBVertexBufferObject
operator|.
name|GL_ARRAY_BUFFER_ARB
argument_list|,
name|this
operator|.
name|vertexBuffers
operator|.
name|get
argument_list|(
name|this
operator|.
name|vboIndex
argument_list|)
argument_list|)
expr_stmt|;
name|ARBVertexBufferObject
operator|.
name|glBufferDataARB
argument_list|(
name|ARBVertexBufferObject
operator|.
name|GL_ARRAY_BUFFER_ARB
argument_list|,
name|this
operator|.
name|byteBuffer
argument_list|,
name|ARBVertexBufferObject
operator|.
name|GL_STREAM_DRAW_ARB
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|hasTexture
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|useVBO
condition|)
block|{
name|GL11
operator|.
name|glTexCoordPointer
argument_list|(
literal|2
argument_list|,
name|GL11
operator|.
name|GL_FLOAT
argument_list|,
literal|32
argument_list|,
literal|12L
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|floatBuffer
operator|.
name|position
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|GL11
operator|.
name|glTexCoordPointer
argument_list|(
literal|2
argument_list|,
literal|32
argument_list|,
name|this
operator|.
name|floatBuffer
argument_list|)
expr_stmt|;
block|}
name|GL11
operator|.
name|glEnableClientState
argument_list|(
name|GL11
operator|.
name|GL_TEXTURE_COORD_ARRAY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|hasBrightness
condition|)
block|{
name|OpenGlHelper
operator|.
name|setClientActiveTexture
argument_list|(
name|OpenGlHelper
operator|.
name|lightmapTexUnit
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|useVBO
condition|)
block|{
name|GL11
operator|.
name|glTexCoordPointer
argument_list|(
literal|2
argument_list|,
name|GL11
operator|.
name|GL_SHORT
argument_list|,
literal|32
argument_list|,
literal|28L
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|shortBuffer
operator|.
name|position
argument_list|(
literal|14
argument_list|)
expr_stmt|;
name|GL11
operator|.
name|glTexCoordPointer
argument_list|(
literal|2
argument_list|,
literal|32
argument_list|,
name|this
operator|.
name|shortBuffer
argument_list|)
expr_stmt|;
block|}
name|GL11
operator|.
name|glEnableClientState
argument_list|(
name|GL11
operator|.
name|GL_TEXTURE_COORD_ARRAY
argument_list|)
expr_stmt|;
name|OpenGlHelper
operator|.
name|setClientActiveTexture
argument_list|(
name|OpenGlHelper
operator|.
name|defaultTexUnit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|hasColor
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|useVBO
condition|)
block|{
name|GL11
operator|.
name|glColorPointer
argument_list|(
literal|4
argument_list|,
name|GL11
operator|.
name|GL_UNSIGNED_BYTE
argument_list|,
literal|32
argument_list|,
literal|20L
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|byteBuffer
operator|.
name|position
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|GL11
operator|.
name|glColorPointer
argument_list|(
literal|4
argument_list|,
literal|true
argument_list|,
literal|32
argument_list|,
name|this
operator|.
name|byteBuffer
argument_list|)
expr_stmt|;
block|}
name|GL11
operator|.
name|glEnableClientState
argument_list|(
name|GL11
operator|.
name|GL_COLOR_ARRAY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|hasNormals
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|useVBO
condition|)
block|{
name|GL11
operator|.
name|glNormalPointer
argument_list|(
name|GL11
operator|.
name|GL_UNSIGNED_BYTE
argument_list|,
literal|32
argument_list|,
literal|24L
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|byteBuffer
operator|.
name|position
argument_list|(
literal|24
argument_list|)
expr_stmt|;
name|GL11
operator|.
name|glNormalPointer
argument_list|(
literal|32
argument_list|,
name|this
operator|.
name|byteBuffer
argument_list|)
expr_stmt|;
block|}
name|GL11
operator|.
name|glEnableClientState
argument_list|(
name|GL11
operator|.
name|GL_NORMAL_ARRAY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|useVBO
condition|)
block|{
name|GL11
operator|.
name|glVertexPointer
argument_list|(
literal|3
argument_list|,
name|GL11
operator|.
name|GL_FLOAT
argument_list|,
literal|32
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|floatBuffer
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|GL11
operator|.
name|glVertexPointer
argument_list|(
literal|3
argument_list|,
literal|32
argument_list|,
name|this
operator|.
name|floatBuffer
argument_list|)
expr_stmt|;
block|}
name|GL11
operator|.
name|glEnableClientState
argument_list|(
name|GL11
operator|.
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|drawMode
operator|==
literal|7
operator|&&
name|convertQuadsToTriangles
condition|)
block|{
name|GL11
operator|.
name|glDrawArrays
argument_list|(
name|GL11
operator|.
name|GL_TRIANGLES
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|vertexCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|GL11
operator|.
name|glDrawArrays
argument_list|(
name|this
operator|.
name|drawMode
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|vertexCount
argument_list|)
expr_stmt|;
block|}
name|GL11
operator|.
name|glDisableClientState
argument_list|(
name|GL11
operator|.
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|hasTexture
condition|)
block|{
name|GL11
operator|.
name|glDisableClientState
argument_list|(
name|GL11
operator|.
name|GL_TEXTURE_COORD_ARRAY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|hasBrightness
condition|)
block|{
name|OpenGlHelper
operator|.
name|setClientActiveTexture
argument_list|(
name|OpenGlHelper
operator|.
name|lightmapTexUnit
argument_list|)
expr_stmt|;
name|GL11
operator|.
name|glDisableClientState
argument_list|(
name|GL11
operator|.
name|GL_TEXTURE_COORD_ARRAY
argument_list|)
expr_stmt|;
name|OpenGlHelper
operator|.
name|setClientActiveTexture
argument_list|(
name|OpenGlHelper
operator|.
name|defaultTexUnit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|hasColor
condition|)
block|{
name|GL11
operator|.
name|glDisableClientState
argument_list|(
name|GL11
operator|.
name|GL_COLOR_ARRAY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|hasNormals
condition|)
block|{
name|GL11
operator|.
name|glDisableClientState
argument_list|(
name|GL11
operator|.
name|GL_NORMAL_ARRAY
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|var1
init|=
name|this
operator|.
name|rawBufferIndex
operator|*
literal|4
decl_stmt|;
name|this
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|var1
return|;
block|}
block|}
specifier|private
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|vertexCount
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|byteBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|rawBufferIndex
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|addedVertices
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|void
name|begin
parameter_list|()
block|{
name|this
operator|.
name|startDrawing
argument_list|(
literal|7
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startDrawing
parameter_list|(
name|int
name|var1
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|isDrawing
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Already tesselating!"
argument_list|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|isDrawing
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|reset
argument_list|()
expr_stmt|;
name|this
operator|.
name|drawMode
operator|=
name|var1
expr_stmt|;
name|this
operator|.
name|hasNormals
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|hasColor
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|hasTexture
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|hasBrightness
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|isColorDisabled
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setTextureUV
parameter_list|(
name|double
name|var1
parameter_list|,
name|double
name|var3
parameter_list|)
block|{
name|this
operator|.
name|hasTexture
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|textureU
operator|=
name|var1
expr_stmt|;
name|this
operator|.
name|textureV
operator|=
name|var3
expr_stmt|;
block|}
specifier|public
name|void
name|setBrightness
parameter_list|(
name|int
name|var1
parameter_list|)
block|{
name|this
operator|.
name|hasBrightness
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|brightness
operator|=
name|var1
expr_stmt|;
block|}
specifier|public
name|void
name|color
parameter_list|(
name|float
name|var1
parameter_list|,
name|float
name|var2
parameter_list|,
name|float
name|var3
parameter_list|)
block|{
name|this
operator|.
name|setColorOpaque
argument_list|(
operator|(
name|int
operator|)
operator|(
name|var1
operator|*
literal|255.0F
operator|)
argument_list|,
operator|(
name|int
operator|)
operator|(
name|var2
operator|*
literal|255.0F
operator|)
argument_list|,
operator|(
name|int
operator|)
operator|(
name|var3
operator|*
literal|255.0F
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|color
parameter_list|(
name|float
name|var1
parameter_list|,
name|float
name|var2
parameter_list|,
name|float
name|var3
parameter_list|,
name|float
name|var4
parameter_list|)
block|{
name|this
operator|.
name|colorClampRGBA
argument_list|(
operator|(
name|int
operator|)
operator|(
name|var1
operator|*
literal|255.0F
operator|)
argument_list|,
operator|(
name|int
operator|)
operator|(
name|var2
operator|*
literal|255.0F
operator|)
argument_list|,
operator|(
name|int
operator|)
operator|(
name|var3
operator|*
literal|255.0F
operator|)
argument_list|,
operator|(
name|int
operator|)
operator|(
name|var4
operator|*
literal|255.0F
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setColorOpaque
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|int
name|var3
parameter_list|)
block|{
name|this
operator|.
name|colorClampRGBA
argument_list|(
name|var1
argument_list|,
name|var2
argument_list|,
name|var3
argument_list|,
literal|255
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|colorClampRGBA
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|,
name|int
name|var3
parameter_list|,
name|int
name|var4
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isColorDisabled
condition|)
block|{
if|if
condition|(
name|var1
operator|>
literal|255
condition|)
block|{
name|var1
operator|=
literal|255
expr_stmt|;
block|}
if|if
condition|(
name|var2
operator|>
literal|255
condition|)
block|{
name|var2
operator|=
literal|255
expr_stmt|;
block|}
if|if
condition|(
name|var3
operator|>
literal|255
condition|)
block|{
name|var3
operator|=
literal|255
expr_stmt|;
block|}
if|if
condition|(
name|var4
operator|>
literal|255
condition|)
block|{
name|var4
operator|=
literal|255
expr_stmt|;
block|}
if|if
condition|(
name|var1
operator|<
literal|0
condition|)
block|{
name|var1
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|var2
operator|<
literal|0
condition|)
block|{
name|var2
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|var3
operator|<
literal|0
condition|)
block|{
name|var3
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|var4
operator|<
literal|0
condition|)
block|{
name|var4
operator|=
literal|0
expr_stmt|;
block|}
name|this
operator|.
name|hasColor
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|ByteOrder
operator|.
name|nativeOrder
argument_list|()
operator|==
name|ByteOrder
operator|.
name|LITTLE_ENDIAN
condition|)
block|{
name|this
operator|.
name|color
operator|=
name|var4
operator|<<
literal|24
operator||
name|var3
operator|<<
literal|16
operator||
name|var2
operator|<<
literal|8
operator||
name|var1
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|color
operator|=
name|var1
operator|<<
literal|24
operator||
name|var2
operator|<<
literal|16
operator||
name|var3
operator|<<
literal|8
operator||
name|var4
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|vertexUV
parameter_list|(
name|double
name|var1
parameter_list|,
name|double
name|var3
parameter_list|,
name|double
name|var5
parameter_list|,
name|double
name|var7
parameter_list|,
name|double
name|var9
parameter_list|)
block|{
name|this
operator|.
name|setTextureUV
argument_list|(
name|var7
argument_list|,
name|var9
argument_list|)
expr_stmt|;
name|this
operator|.
name|vertex
argument_list|(
name|var1
argument_list|,
name|var3
argument_list|,
name|var5
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|vertex
parameter_list|(
name|double
name|var1
parameter_list|,
name|double
name|var3
parameter_list|,
name|double
name|var5
parameter_list|)
block|{
operator|++
name|this
operator|.
name|addedVertices
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|drawMode
operator|==
literal|7
operator|&&
name|convertQuadsToTriangles
operator|&&
name|this
operator|.
name|addedVertices
operator|%
literal|4
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|int
name|var7
init|=
literal|0
init|;
name|var7
operator|<
literal|2
condition|;
operator|++
name|var7
control|)
block|{
name|int
name|var8
init|=
literal|8
operator|*
operator|(
literal|3
operator|-
name|var7
operator|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|hasTexture
condition|)
block|{
name|this
operator|.
name|rawBuffer
index|[
name|this
operator|.
name|rawBufferIndex
operator|+
literal|3
index|]
operator|=
name|this
operator|.
name|rawBuffer
index|[
name|this
operator|.
name|rawBufferIndex
operator|-
name|var8
operator|+
literal|3
index|]
expr_stmt|;
name|this
operator|.
name|rawBuffer
index|[
name|this
operator|.
name|rawBufferIndex
operator|+
literal|4
index|]
operator|=
name|this
operator|.
name|rawBuffer
index|[
name|this
operator|.
name|rawBufferIndex
operator|-
name|var8
operator|+
literal|4
index|]
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|hasBrightness
condition|)
block|{
name|this
operator|.
name|rawBuffer
index|[
name|this
operator|.
name|rawBufferIndex
operator|+
literal|7
index|]
operator|=
name|this
operator|.
name|rawBuffer
index|[
name|this
operator|.
name|rawBufferIndex
operator|-
name|var8
operator|+
literal|7
index|]
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|hasColor
condition|)
block|{
name|this
operator|.
name|rawBuffer
index|[
name|this
operator|.
name|rawBufferIndex
operator|+
literal|5
index|]
operator|=
name|this
operator|.
name|rawBuffer
index|[
name|this
operator|.
name|rawBufferIndex
operator|-
name|var8
operator|+
literal|5
index|]
expr_stmt|;
block|}
name|this
operator|.
name|rawBuffer
index|[
name|this
operator|.
name|rawBufferIndex
operator|+
literal|0
index|]
operator|=
name|this
operator|.
name|rawBuffer
index|[
name|this
operator|.
name|rawBufferIndex
operator|-
name|var8
operator|+
literal|0
index|]
expr_stmt|;
name|this
operator|.
name|rawBuffer
index|[
name|this
operator|.
name|rawBufferIndex
operator|+
literal|1
index|]
operator|=
name|this
operator|.
name|rawBuffer
index|[
name|this
operator|.
name|rawBufferIndex
operator|-
name|var8
operator|+
literal|1
index|]
expr_stmt|;
name|this
operator|.
name|rawBuffer
index|[
name|this
operator|.
name|rawBufferIndex
operator|+
literal|2
index|]
operator|=
name|this
operator|.
name|rawBuffer
index|[
name|this
operator|.
name|rawBufferIndex
operator|-
name|var8
operator|+
literal|2
index|]
expr_stmt|;
operator|++
name|this
operator|.
name|vertexCount
expr_stmt|;
name|this
operator|.
name|rawBufferIndex
operator|+=
literal|8
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|hasTexture
condition|)
block|{
name|this
operator|.
name|rawBuffer
index|[
name|this
operator|.
name|rawBufferIndex
operator|+
literal|3
index|]
operator|=
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
operator|(
name|float
operator|)
name|this
operator|.
name|textureU
argument_list|)
expr_stmt|;
name|this
operator|.
name|rawBuffer
index|[
name|this
operator|.
name|rawBufferIndex
operator|+
literal|4
index|]
operator|=
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
operator|(
name|float
operator|)
name|this
operator|.
name|textureV
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|hasBrightness
condition|)
block|{
name|this
operator|.
name|rawBuffer
index|[
name|this
operator|.
name|rawBufferIndex
operator|+
literal|7
index|]
operator|=
name|this
operator|.
name|brightness
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|hasColor
condition|)
block|{
name|this
operator|.
name|rawBuffer
index|[
name|this
operator|.
name|rawBufferIndex
operator|+
literal|5
index|]
operator|=
name|this
operator|.
name|color
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|hasNormals
condition|)
block|{
name|this
operator|.
name|rawBuffer
index|[
name|this
operator|.
name|rawBufferIndex
operator|+
literal|6
index|]
operator|=
name|this
operator|.
name|normal
expr_stmt|;
block|}
name|this
operator|.
name|rawBuffer
index|[
name|this
operator|.
name|rawBufferIndex
operator|+
literal|0
index|]
operator|=
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
operator|(
name|float
operator|)
operator|(
name|var1
operator|+
name|this
operator|.
name|xOffset
operator|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rawBuffer
index|[
name|this
operator|.
name|rawBufferIndex
operator|+
literal|1
index|]
operator|=
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
operator|(
name|float
operator|)
operator|(
name|var3
operator|+
name|this
operator|.
name|yOffset
operator|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rawBuffer
index|[
name|this
operator|.
name|rawBufferIndex
operator|+
literal|2
index|]
operator|=
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
operator|(
name|float
operator|)
operator|(
name|var5
operator|+
name|this
operator|.
name|zOffset
operator|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rawBufferIndex
operator|+=
literal|8
expr_stmt|;
operator|++
name|this
operator|.
name|vertexCount
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|vertexCount
operator|%
literal|4
operator|==
literal|0
operator|&&
name|this
operator|.
name|rawBufferIndex
operator|>=
name|this
operator|.
name|bufferSize
operator|-
literal|32
condition|)
block|{
name|this
operator|.
name|end
argument_list|()
expr_stmt|;
name|this
operator|.
name|isDrawing
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|color
parameter_list|(
name|int
name|var1
parameter_list|)
block|{
name|int
name|var2
init|=
name|var1
operator|>>
literal|16
operator|&
literal|255
decl_stmt|;
name|int
name|var3
init|=
name|var1
operator|>>
literal|8
operator|&
literal|255
decl_stmt|;
name|int
name|var4
init|=
name|var1
operator|&
literal|255
decl_stmt|;
name|this
operator|.
name|setColorOpaque
argument_list|(
name|var2
argument_list|,
name|var3
argument_list|,
name|var4
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setColorRGBA_I
parameter_list|(
name|int
name|var1
parameter_list|,
name|int
name|var2
parameter_list|)
block|{
name|int
name|var3
init|=
name|var1
operator|>>
literal|16
operator|&
literal|255
decl_stmt|;
name|int
name|var4
init|=
name|var1
operator|>>
literal|8
operator|&
literal|255
decl_stmt|;
name|int
name|var5
init|=
name|var1
operator|&
literal|255
decl_stmt|;
name|this
operator|.
name|colorClampRGBA
argument_list|(
name|var3
argument_list|,
name|var4
argument_list|,
name|var5
argument_list|,
name|var2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|noColor
parameter_list|()
block|{
name|this
operator|.
name|isColorDisabled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|useNormal
parameter_list|(
name|float
name|var1
parameter_list|,
name|float
name|var2
parameter_list|,
name|float
name|var3
parameter_list|)
block|{
name|this
operator|.
name|hasNormals
operator|=
literal|true
expr_stmt|;
name|byte
name|var4
init|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|int
operator|)
operator|(
name|var1
operator|*
literal|127.0F
operator|)
operator|)
decl_stmt|;
name|byte
name|var5
init|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|int
operator|)
operator|(
name|var2
operator|*
literal|127.0F
operator|)
operator|)
decl_stmt|;
name|byte
name|var6
init|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|int
operator|)
operator|(
name|var3
operator|*
literal|127.0F
operator|)
operator|)
decl_stmt|;
name|this
operator|.
name|normal
operator|=
name|var4
operator|&
literal|255
operator||
operator|(
name|var5
operator|&
literal|255
operator|)
operator|<<
literal|8
operator||
operator|(
name|var6
operator|&
literal|255
operator|)
operator|<<
literal|16
expr_stmt|;
block|}
specifier|public
name|void
name|setTranslation
parameter_list|(
name|double
name|var1
parameter_list|,
name|double
name|var3
parameter_list|,
name|double
name|var5
parameter_list|)
block|{
name|this
operator|.
name|xOffset
operator|=
name|var1
expr_stmt|;
name|this
operator|.
name|yOffset
operator|=
name|var3
expr_stmt|;
name|this
operator|.
name|zOffset
operator|=
name|var5
expr_stmt|;
block|}
specifier|public
name|void
name|addTranslation
parameter_list|(
name|float
name|var1
parameter_list|,
name|float
name|var2
parameter_list|,
name|float
name|var3
parameter_list|)
block|{
name|this
operator|.
name|xOffset
operator|+=
operator|(
name|double
operator|)
name|var1
expr_stmt|;
name|this
operator|.
name|yOffset
operator|+=
operator|(
name|double
operator|)
name|var2
expr_stmt|;
name|this
operator|.
name|zOffset
operator|+=
operator|(
name|double
operator|)
name|var3
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|normal
parameter_list|(
name|float
name|var1
parameter_list|,
name|float
name|var2
parameter_list|,
name|float
name|var3
parameter_list|)
block|{
name|GL11
operator|.
name|glNormal3f
argument_list|(
name|var1
argument_list|,
name|var2
argument_list|,
name|var3
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

