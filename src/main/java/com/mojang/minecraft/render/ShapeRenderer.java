begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|render
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteOrder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|FloatBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|IntBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lwjgl
operator|.
name|opengl
operator|.
name|ARBBufferObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lwjgl
operator|.
name|opengl
operator|.
name|ARBVertexBufferObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lwjgl
operator|.
name|opengl
operator|.
name|GL11
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|GameSettings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|LogUtil
import|;
end_import

begin_class
specifier|public
class|class
name|ShapeRenderer
block|{
specifier|public
specifier|static
name|boolean
name|tryVBO
decl_stmt|;
comment|// TODO Never used
specifier|public
specifier|static
name|ShapeRenderer
name|instance
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|convertQuadsToTriangles
decl_stmt|;
comment|// TODO Never assigned
specifier|private
name|ByteBuffer
name|byteBuffer
decl_stmt|;
specifier|private
name|IntBuffer
name|intBuffer
decl_stmt|;
specifier|private
name|FloatBuffer
name|floatBuffer
decl_stmt|;
specifier|private
name|int
index|[]
name|rawBuffer
decl_stmt|;
specifier|private
name|int
name|vertexCount
decl_stmt|;
specifier|private
name|double
name|textureU
decl_stmt|;
specifier|private
name|double
name|textureV
decl_stmt|;
specifier|private
name|int
name|color
decl_stmt|;
specifier|private
name|boolean
name|hasColor
decl_stmt|;
specifier|private
name|boolean
name|hasTexture
decl_stmt|;
specifier|private
name|boolean
name|hasNormals
decl_stmt|;
specifier|private
name|int
name|rawBufferIndex
decl_stmt|;
specifier|private
name|int
name|addedVertices
decl_stmt|;
specifier|private
name|boolean
name|isColorDisabled
decl_stmt|;
specifier|private
name|int
name|drawMode
decl_stmt|;
specifier|private
name|double
name|xOffset
decl_stmt|;
specifier|private
name|double
name|yOffset
decl_stmt|;
specifier|private
name|double
name|zOffset
decl_stmt|;
specifier|private
name|int
name|normal
decl_stmt|;
specifier|private
name|boolean
name|isDrawing
decl_stmt|;
specifier|private
name|boolean
name|useVBO
decl_stmt|;
specifier|private
name|IntBuffer
name|vertexBuffers
decl_stmt|;
specifier|private
name|int
name|vboIndex
decl_stmt|;
specifier|private
name|int
name|vboCount
init|=
literal|10
decl_stmt|;
specifier|private
name|int
name|bufferSize
decl_stmt|;
specifier|public
name|ShapeRenderer
parameter_list|(
name|int
name|bufferSize
parameter_list|,
name|GameSettings
name|gs
parameter_list|)
block|{
name|this
operator|.
name|bufferSize
operator|=
name|bufferSize
expr_stmt|;
name|byteBuffer
operator|=
name|GLAllocation
operator|.
name|createDirectByteBuffer
argument_list|(
name|bufferSize
operator|*
literal|4
argument_list|)
expr_stmt|;
name|intBuffer
operator|=
name|byteBuffer
operator|.
name|asIntBuffer
argument_list|()
expr_stmt|;
name|floatBuffer
operator|=
name|byteBuffer
operator|.
name|asFloatBuffer
argument_list|()
expr_stmt|;
name|rawBuffer
operator|=
operator|new
name|int
index|[
name|bufferSize
index|]
expr_stmt|;
name|useVBO
operator|=
literal|false
expr_stmt|;
comment|// GLContext.getCapabilities().GL_ARB_vertex_buffer_object;
if|if
condition|(
name|useVBO
condition|)
block|{
name|LogUtil
operator|.
name|logInfo
argument_list|(
literal|"GPU allows VBOs: Enabling"
argument_list|)
expr_stmt|;
name|vertexBuffers
operator|=
name|GLAllocation
operator|.
name|createDirectIntBuffer
argument_list|(
name|vboCount
argument_list|)
expr_stmt|;
name|ARBBufferObject
operator|.
name|glGenBuffersARB
argument_list|(
name|vertexBuffers
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addTranslation
parameter_list|(
name|float
name|xo
parameter_list|,
name|float
name|yo
parameter_list|,
name|float
name|zo
parameter_list|)
block|{
name|xOffset
operator|+=
name|xo
expr_stmt|;
name|yOffset
operator|+=
name|yo
expr_stmt|;
name|zOffset
operator|+=
name|zo
expr_stmt|;
block|}
specifier|public
name|void
name|begin
parameter_list|()
block|{
name|startDrawing
argument_list|(
literal|7
argument_list|)
expr_stmt|;
comment|// quads
block|}
specifier|public
name|void
name|color
parameter_list|(
name|float
name|r
parameter_list|,
name|float
name|g
parameter_list|,
name|float
name|b
parameter_list|)
block|{
name|setColorOpaque
argument_list|(
operator|(
name|int
operator|)
operator|(
name|r
operator|*
literal|255F
operator|)
argument_list|,
operator|(
name|int
operator|)
operator|(
name|g
operator|*
literal|255F
operator|)
argument_list|,
operator|(
name|int
operator|)
operator|(
name|b
operator|*
literal|255F
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|color
parameter_list|(
name|float
name|r
parameter_list|,
name|float
name|g
parameter_list|,
name|float
name|b
parameter_list|,
name|float
name|a
parameter_list|)
block|{
name|colorClampRGBA
argument_list|(
operator|(
name|int
operator|)
operator|(
name|r
operator|*
literal|255F
operator|)
argument_list|,
operator|(
name|int
operator|)
operator|(
name|g
operator|*
literal|255F
operator|)
argument_list|,
operator|(
name|int
operator|)
operator|(
name|b
operator|*
literal|255F
operator|)
argument_list|,
operator|(
name|int
operator|)
operator|(
name|a
operator|*
literal|255F
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|color
parameter_list|(
name|int
name|color
parameter_list|)
block|{
name|int
name|r
init|=
name|color
operator|>>
literal|16
operator|&
literal|255
decl_stmt|;
name|int
name|g
init|=
name|color
operator|>>
literal|8
operator|&
literal|255
decl_stmt|;
name|int
name|b
init|=
name|color
operator|&
literal|255
decl_stmt|;
name|setColorOpaque
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|colorClampRGBA
parameter_list|(
name|int
name|r
parameter_list|,
name|int
name|g
parameter_list|,
name|int
name|b
parameter_list|,
name|int
name|a
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isColorDisabled
condition|)
block|{
if|if
condition|(
name|r
operator|>
literal|255
condition|)
block|{
name|r
operator|=
literal|255
expr_stmt|;
block|}
if|if
condition|(
name|g
operator|>
literal|255
condition|)
block|{
name|g
operator|=
literal|255
expr_stmt|;
block|}
if|if
condition|(
name|b
operator|>
literal|255
condition|)
block|{
name|b
operator|=
literal|255
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|>
literal|255
condition|)
block|{
name|a
operator|=
literal|255
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|<
literal|0
condition|)
block|{
name|r
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|g
operator|<
literal|0
condition|)
block|{
name|g
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|b
operator|<
literal|0
condition|)
block|{
name|b
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|<
literal|0
condition|)
block|{
name|a
operator|=
literal|0
expr_stmt|;
block|}
name|hasColor
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|ByteOrder
operator|.
name|nativeOrder
argument_list|()
operator|==
name|ByteOrder
operator|.
name|LITTLE_ENDIAN
condition|)
block|{
name|color
operator|=
name|a
operator|<<
literal|24
operator||
name|b
operator|<<
literal|16
operator||
name|g
operator|<<
literal|8
operator||
name|r
expr_stmt|;
block|}
else|else
block|{
name|color
operator|=
name|r
operator|<<
literal|24
operator||
name|g
operator|<<
literal|16
operator||
name|b
operator|<<
literal|8
operator||
name|a
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|int
name|end
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isDrawing
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Not tesselating!"
argument_list|)
throw|;
block|}
else|else
block|{
name|isDrawing
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|vertexCount
operator|>
literal|0
condition|)
block|{
name|intBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|intBuffer
operator|.
name|put
argument_list|(
name|rawBuffer
argument_list|,
literal|0
argument_list|,
name|rawBufferIndex
argument_list|)
expr_stmt|;
name|byteBuffer
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|byteBuffer
operator|.
name|limit
argument_list|(
name|rawBufferIndex
operator|*
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|useVBO
condition|)
block|{
name|vboIndex
operator|=
operator|(
name|vboIndex
operator|+
literal|1
operator|)
operator|%
name|vboCount
expr_stmt|;
name|ARBBufferObject
operator|.
name|glBindBufferARB
argument_list|(
name|ARBVertexBufferObject
operator|.
name|GL_ARRAY_BUFFER_ARB
argument_list|,
name|vertexBuffers
operator|.
name|get
argument_list|(
name|vboIndex
argument_list|)
argument_list|)
expr_stmt|;
name|ARBBufferObject
operator|.
name|glBufferDataARB
argument_list|(
name|ARBVertexBufferObject
operator|.
name|GL_ARRAY_BUFFER_ARB
argument_list|,
name|byteBuffer
argument_list|,
name|ARBBufferObject
operator|.
name|GL_STREAM_DRAW_ARB
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasTexture
condition|)
block|{
if|if
condition|(
name|useVBO
condition|)
block|{
name|GL11
operator|.
name|glTexCoordPointer
argument_list|(
literal|2
argument_list|,
name|GL11
operator|.
name|GL_FLOAT
argument_list|,
literal|32
argument_list|,
literal|12L
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|floatBuffer
operator|.
name|position
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|GL11
operator|.
name|glTexCoordPointer
argument_list|(
literal|2
argument_list|,
literal|32
argument_list|,
name|floatBuffer
argument_list|)
expr_stmt|;
block|}
name|GL11
operator|.
name|glEnableClientState
argument_list|(
name|GL11
operator|.
name|GL_TEXTURE_COORD_ARRAY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasColor
condition|)
block|{
if|if
condition|(
name|useVBO
condition|)
block|{
name|GL11
operator|.
name|glColorPointer
argument_list|(
literal|4
argument_list|,
name|GL11
operator|.
name|GL_UNSIGNED_BYTE
argument_list|,
literal|32
argument_list|,
literal|20L
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byteBuffer
operator|.
name|position
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|GL11
operator|.
name|glColorPointer
argument_list|(
literal|4
argument_list|,
literal|true
argument_list|,
literal|32
argument_list|,
name|byteBuffer
argument_list|)
expr_stmt|;
block|}
name|GL11
operator|.
name|glEnableClientState
argument_list|(
name|GL11
operator|.
name|GL_COLOR_ARRAY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasNormals
condition|)
block|{
if|if
condition|(
name|useVBO
condition|)
block|{
name|GL11
operator|.
name|glNormalPointer
argument_list|(
name|GL11
operator|.
name|GL_UNSIGNED_BYTE
argument_list|,
literal|32
argument_list|,
literal|24L
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byteBuffer
operator|.
name|position
argument_list|(
literal|24
argument_list|)
expr_stmt|;
name|GL11
operator|.
name|glNormalPointer
argument_list|(
literal|32
argument_list|,
name|byteBuffer
argument_list|)
expr_stmt|;
block|}
name|GL11
operator|.
name|glEnableClientState
argument_list|(
name|GL11
operator|.
name|GL_NORMAL_ARRAY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useVBO
condition|)
block|{
name|GL11
operator|.
name|glVertexPointer
argument_list|(
literal|3
argument_list|,
name|GL11
operator|.
name|GL_FLOAT
argument_list|,
literal|32
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|floatBuffer
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|GL11
operator|.
name|glVertexPointer
argument_list|(
literal|3
argument_list|,
literal|32
argument_list|,
name|floatBuffer
argument_list|)
expr_stmt|;
block|}
name|GL11
operator|.
name|glEnableClientState
argument_list|(
name|GL11
operator|.
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
if|if
condition|(
name|drawMode
operator|==
literal|7
operator|&&
name|convertQuadsToTriangles
condition|)
block|{
name|GL11
operator|.
name|glDrawArrays
argument_list|(
name|GL11
operator|.
name|GL_TRIANGLES
argument_list|,
literal|0
argument_list|,
name|vertexCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|GL11
operator|.
name|glDrawArrays
argument_list|(
name|drawMode
argument_list|,
literal|0
argument_list|,
name|vertexCount
argument_list|)
expr_stmt|;
block|}
name|GL11
operator|.
name|glDisableClientState
argument_list|(
name|GL11
operator|.
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasTexture
condition|)
block|{
name|GL11
operator|.
name|glDisableClientState
argument_list|(
name|GL11
operator|.
name|GL_TEXTURE_COORD_ARRAY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasColor
condition|)
block|{
name|GL11
operator|.
name|glDisableClientState
argument_list|(
name|GL11
operator|.
name|GL_COLOR_ARRAY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasNormals
condition|)
block|{
name|GL11
operator|.
name|glDisableClientState
argument_list|(
name|GL11
operator|.
name|GL_NORMAL_ARRAY
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|var1
init|=
name|rawBufferIndex
operator|*
literal|4
decl_stmt|;
name|reset
argument_list|()
expr_stmt|;
return|return
name|var1
return|;
block|}
block|}
specifier|public
name|void
name|noColor
parameter_list|()
block|{
name|isColorDisabled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|normal
parameter_list|(
name|float
name|nx
parameter_list|,
name|float
name|ny
parameter_list|,
name|float
name|nz
parameter_list|)
block|{
name|GL11
operator|.
name|glNormal3f
argument_list|(
name|nx
argument_list|,
name|ny
argument_list|,
name|nz
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|reset
parameter_list|()
block|{
name|vertexCount
operator|=
literal|0
expr_stmt|;
name|byteBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rawBufferIndex
operator|=
literal|0
expr_stmt|;
name|addedVertices
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|void
name|setColorOpaque
parameter_list|(
name|int
name|r
parameter_list|,
name|int
name|g
parameter_list|,
name|int
name|b
parameter_list|)
block|{
name|colorClampRGBA
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
literal|255
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setColorRGBA_I
parameter_list|(
name|int
name|color
parameter_list|,
name|int
name|a
parameter_list|)
block|{
name|int
name|r
init|=
name|color
operator|>>
literal|16
operator|&
literal|255
decl_stmt|;
name|int
name|g
init|=
name|color
operator|>>
literal|8
operator|&
literal|255
decl_stmt|;
name|int
name|b
init|=
name|color
operator|&
literal|255
decl_stmt|;
name|colorClampRGBA
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setTextureUV
parameter_list|(
name|double
name|u
parameter_list|,
name|double
name|v
parameter_list|)
block|{
name|hasTexture
operator|=
literal|true
expr_stmt|;
name|textureU
operator|=
name|u
expr_stmt|;
name|textureV
operator|=
name|v
expr_stmt|;
block|}
specifier|public
name|void
name|setTranslation
parameter_list|(
name|double
name|xOffSet
parameter_list|,
name|double
name|yOffSet
parameter_list|,
name|double
name|zOffSet
parameter_list|)
block|{
name|xOffset
operator|=
name|xOffSet
expr_stmt|;
name|yOffset
operator|=
name|yOffSet
expr_stmt|;
name|zOffset
operator|=
name|zOffSet
expr_stmt|;
block|}
specifier|public
name|void
name|startDrawing
parameter_list|(
name|int
name|drawMode
parameter_list|)
block|{
if|if
condition|(
name|isDrawing
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Already tesselating!"
argument_list|)
throw|;
block|}
else|else
block|{
name|isDrawing
operator|=
literal|true
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
name|this
operator|.
name|drawMode
operator|=
name|drawMode
expr_stmt|;
name|hasNormals
operator|=
literal|false
expr_stmt|;
name|hasColor
operator|=
literal|false
expr_stmt|;
name|hasTexture
operator|=
literal|false
expr_stmt|;
name|isColorDisabled
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|useNormal
parameter_list|(
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|,
name|float
name|z
parameter_list|)
block|{
name|hasNormals
operator|=
literal|true
expr_stmt|;
name|byte
name|nx
init|=
operator|(
name|byte
operator|)
operator|(
name|int
operator|)
operator|(
name|x
operator|*
literal|127F
operator|)
decl_stmt|;
name|byte
name|ny
init|=
operator|(
name|byte
operator|)
operator|(
name|int
operator|)
operator|(
name|y
operator|*
literal|127F
operator|)
decl_stmt|;
name|byte
name|nz
init|=
operator|(
name|byte
operator|)
operator|(
name|int
operator|)
operator|(
name|z
operator|*
literal|127F
operator|)
decl_stmt|;
name|normal
operator|=
name|nx
operator|&
literal|255
operator||
operator|(
name|ny
operator|&
literal|255
operator|)
operator|<<
literal|8
operator||
operator|(
name|nz
operator|&
literal|255
operator|)
operator|<<
literal|16
expr_stmt|;
block|}
specifier|public
name|void
name|vertex
parameter_list|(
name|double
name|vx
parameter_list|,
name|double
name|vy
parameter_list|,
name|double
name|vz
parameter_list|)
block|{
operator|++
name|addedVertices
expr_stmt|;
if|if
condition|(
name|drawMode
operator|==
literal|7
operator|&&
name|convertQuadsToTriangles
operator|&&
name|addedVertices
operator|%
literal|4
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|int
name|var7
init|=
literal|0
init|;
name|var7
operator|<
literal|2
condition|;
operator|++
name|var7
control|)
block|{
name|int
name|var8
init|=
literal|8
operator|*
operator|(
literal|3
operator|-
name|var7
operator|)
decl_stmt|;
if|if
condition|(
name|hasTexture
condition|)
block|{
name|rawBuffer
index|[
name|rawBufferIndex
operator|+
literal|3
index|]
operator|=
name|rawBuffer
index|[
name|rawBufferIndex
operator|-
name|var8
operator|+
literal|3
index|]
expr_stmt|;
name|rawBuffer
index|[
name|rawBufferIndex
operator|+
literal|4
index|]
operator|=
name|rawBuffer
index|[
name|rawBufferIndex
operator|-
name|var8
operator|+
literal|4
index|]
expr_stmt|;
block|}
if|if
condition|(
name|hasColor
condition|)
block|{
name|rawBuffer
index|[
name|rawBufferIndex
operator|+
literal|5
index|]
operator|=
name|rawBuffer
index|[
name|rawBufferIndex
operator|-
name|var8
operator|+
literal|5
index|]
expr_stmt|;
block|}
name|rawBuffer
index|[
name|rawBufferIndex
operator|+
literal|0
index|]
operator|=
name|rawBuffer
index|[
name|rawBufferIndex
operator|-
name|var8
operator|+
literal|0
index|]
expr_stmt|;
name|rawBuffer
index|[
name|rawBufferIndex
operator|+
literal|1
index|]
operator|=
name|rawBuffer
index|[
name|rawBufferIndex
operator|-
name|var8
operator|+
literal|1
index|]
expr_stmt|;
name|rawBuffer
index|[
name|rawBufferIndex
operator|+
literal|2
index|]
operator|=
name|rawBuffer
index|[
name|rawBufferIndex
operator|-
name|var8
operator|+
literal|2
index|]
expr_stmt|;
operator|++
name|vertexCount
expr_stmt|;
name|rawBufferIndex
operator|+=
literal|8
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasTexture
condition|)
block|{
name|rawBuffer
index|[
name|rawBufferIndex
operator|+
literal|3
index|]
operator|=
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
operator|(
name|float
operator|)
name|textureU
argument_list|)
expr_stmt|;
name|rawBuffer
index|[
name|rawBufferIndex
operator|+
literal|4
index|]
operator|=
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
operator|(
name|float
operator|)
name|textureV
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasColor
condition|)
block|{
name|rawBuffer
index|[
name|rawBufferIndex
operator|+
literal|5
index|]
operator|=
name|color
expr_stmt|;
block|}
if|if
condition|(
name|hasNormals
condition|)
block|{
name|rawBuffer
index|[
name|rawBufferIndex
operator|+
literal|6
index|]
operator|=
name|normal
expr_stmt|;
block|}
name|rawBuffer
index|[
name|rawBufferIndex
operator|+
literal|0
index|]
operator|=
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
operator|(
name|float
operator|)
operator|(
name|vx
operator|+
name|xOffset
operator|)
argument_list|)
expr_stmt|;
name|rawBuffer
index|[
name|rawBufferIndex
operator|+
literal|1
index|]
operator|=
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
operator|(
name|float
operator|)
operator|(
name|vy
operator|+
name|yOffset
operator|)
argument_list|)
expr_stmt|;
name|rawBuffer
index|[
name|rawBufferIndex
operator|+
literal|2
index|]
operator|=
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
operator|(
name|float
operator|)
operator|(
name|vz
operator|+
name|zOffset
operator|)
argument_list|)
expr_stmt|;
name|rawBufferIndex
operator|+=
literal|8
expr_stmt|;
operator|++
name|vertexCount
expr_stmt|;
if|if
condition|(
name|vertexCount
operator|%
literal|4
operator|==
literal|0
operator|&&
name|rawBufferIndex
operator|>=
name|bufferSize
operator|-
literal|32
condition|)
block|{
name|end
argument_list|()
expr_stmt|;
name|isDrawing
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|vertexUV
parameter_list|(
name|double
name|vx
parameter_list|,
name|double
name|vy
parameter_list|,
name|double
name|vz
parameter_list|,
name|double
name|u
parameter_list|,
name|double
name|v
parameter_list|)
block|{
name|setTextureUV
argument_list|(
name|u
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|vertex
argument_list|(
name|vx
argument_list|,
name|vy
argument_list|,
name|vz
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

