begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|render
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|FloatBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lwjgl
operator|.
name|BufferUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lwjgl
operator|.
name|opengl
operator|.
name|GL11
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|ShapeRenderer
block|{
specifier|private
name|FloatBuffer
name|buffer
init|=
name|BufferUtils
operator|.
name|createFloatBuffer
argument_list|(
literal|524288
argument_list|)
decl_stmt|;
specifier|private
name|float
index|[]
name|data
init|=
operator|new
name|float
index|[
literal|524288
index|]
decl_stmt|;
specifier|private
name|int
name|vertices
init|=
literal|0
decl_stmt|;
specifier|private
name|float
name|u
decl_stmt|;
specifier|private
name|float
name|v
decl_stmt|;
specifier|private
name|float
name|r
decl_stmt|;
specifier|private
name|float
name|g
decl_stmt|;
specifier|private
name|float
name|b
decl_stmt|;
specifier|private
name|boolean
name|color
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|texture
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|vertexLength
init|=
literal|3
decl_stmt|;
specifier|private
name|int
name|length
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|noColor
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
name|ShapeRenderer
name|instance
init|=
operator|new
name|ShapeRenderer
argument_list|()
decl_stmt|;
specifier|public
specifier|final
name|void
name|end
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|vertices
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|buffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|buffer
operator|.
name|put
argument_list|(
name|this
operator|.
name|data
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|buffer
operator|.
name|flip
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|texture
operator|&&
name|this
operator|.
name|color
condition|)
block|{
name|GL11
operator|.
name|glInterleavedArrays
argument_list|(
literal|10794
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|buffer
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|this
operator|.
name|texture
condition|)
block|{
name|GL11
operator|.
name|glInterleavedArrays
argument_list|(
literal|10791
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|buffer
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|this
operator|.
name|color
condition|)
block|{
name|GL11
operator|.
name|glInterleavedArrays
argument_list|(
literal|10788
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|buffer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|GL11
operator|.
name|glInterleavedArrays
argument_list|(
literal|10785
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|buffer
argument_list|)
expr_stmt|;
block|}
name|GL11
operator|.
name|glEnableClientState
argument_list|(
literal|'\u8074'
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|texture
condition|)
block|{
name|GL11
operator|.
name|glEnableClientState
argument_list|(
literal|'\u8078'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|color
condition|)
block|{
name|GL11
operator|.
name|glEnableClientState
argument_list|(
literal|'\u8076'
argument_list|)
expr_stmt|;
block|}
name|GL11
operator|.
name|glDrawArrays
argument_list|(
literal|7
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|vertices
argument_list|)
expr_stmt|;
name|GL11
operator|.
name|glDisableClientState
argument_list|(
literal|'\u8074'
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|texture
condition|)
block|{
name|GL11
operator|.
name|glDisableClientState
argument_list|(
literal|'\u8078'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|color
condition|)
block|{
name|GL11
operator|.
name|glDisableClientState
argument_list|(
literal|'\u8076'
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|vertices
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|buffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|length
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|begin
parameter_list|()
block|{
name|this
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|color
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|texture
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|noColor
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|color
parameter_list|(
name|float
name|var1
parameter_list|,
name|float
name|var2
parameter_list|,
name|float
name|var3
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|noColor
condition|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|color
condition|)
block|{
name|this
operator|.
name|vertexLength
operator|+=
literal|3
expr_stmt|;
block|}
name|this
operator|.
name|color
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|r
operator|=
name|var1
expr_stmt|;
name|this
operator|.
name|g
operator|=
name|var2
expr_stmt|;
name|this
operator|.
name|b
operator|=
name|var3
expr_stmt|;
block|}
block|}
specifier|public
specifier|final
name|void
name|vertexUV
parameter_list|(
name|float
name|var1
parameter_list|,
name|float
name|var2
parameter_list|,
name|float
name|var3
parameter_list|,
name|float
name|var4
parameter_list|,
name|float
name|var5
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|texture
condition|)
block|{
name|this
operator|.
name|vertexLength
operator|+=
literal|2
expr_stmt|;
block|}
name|this
operator|.
name|texture
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|u
operator|=
name|var4
expr_stmt|;
name|this
operator|.
name|v
operator|=
name|var5
expr_stmt|;
name|this
operator|.
name|vertex
argument_list|(
name|var1
argument_list|,
name|var2
argument_list|,
name|var3
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|vertex
parameter_list|(
name|float
name|var1
parameter_list|,
name|float
name|var2
parameter_list|,
name|float
name|var3
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|texture
condition|)
block|{
name|this
operator|.
name|data
index|[
name|this
operator|.
name|length
operator|++
index|]
operator|=
name|this
operator|.
name|u
expr_stmt|;
name|this
operator|.
name|data
index|[
name|this
operator|.
name|length
operator|++
index|]
operator|=
name|this
operator|.
name|v
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|color
condition|)
block|{
name|this
operator|.
name|data
index|[
name|this
operator|.
name|length
operator|++
index|]
operator|=
name|this
operator|.
name|r
expr_stmt|;
name|this
operator|.
name|data
index|[
name|this
operator|.
name|length
operator|++
index|]
operator|=
name|this
operator|.
name|g
expr_stmt|;
name|this
operator|.
name|data
index|[
name|this
operator|.
name|length
operator|++
index|]
operator|=
name|this
operator|.
name|b
expr_stmt|;
block|}
name|this
operator|.
name|data
index|[
name|this
operator|.
name|length
operator|++
index|]
operator|=
name|var1
expr_stmt|;
name|this
operator|.
name|data
index|[
name|this
operator|.
name|length
operator|++
index|]
operator|=
name|var2
expr_stmt|;
name|this
operator|.
name|data
index|[
name|this
operator|.
name|length
operator|++
index|]
operator|=
name|var3
expr_stmt|;
operator|++
name|this
operator|.
name|vertices
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|vertices
operator|%
literal|4
operator|==
literal|0
operator|&&
name|this
operator|.
name|length
operator|>=
literal|524288
operator|-
operator|(
name|this
operator|.
name|vertexLength
operator|<<
literal|2
operator|)
condition|)
block|{
name|this
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|final
name|void
name|color
parameter_list|(
name|int
name|var1
parameter_list|)
block|{
name|int
name|var2
init|=
name|var1
operator|>>
literal|16
operator|&
literal|255
decl_stmt|;
name|int
name|var3
init|=
name|var1
operator|>>
literal|8
operator|&
literal|255
decl_stmt|;
name|var1
operator|&=
literal|255
expr_stmt|;
name|int
name|var10001
init|=
name|var2
decl_stmt|;
name|int
name|var10002
init|=
name|var3
decl_stmt|;
name|var3
operator|=
name|var1
expr_stmt|;
name|var2
operator|=
name|var10002
expr_stmt|;
name|var1
operator|=
name|var10001
expr_stmt|;
name|byte
name|var7
init|=
operator|(
name|byte
operator|)
name|var1
decl_stmt|;
name|byte
name|var4
init|=
operator|(
name|byte
operator|)
name|var2
decl_stmt|;
name|byte
name|var8
init|=
operator|(
name|byte
operator|)
name|var3
decl_stmt|;
name|byte
name|var6
init|=
name|var4
decl_stmt|;
name|byte
name|var5
init|=
name|var7
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|noColor
condition|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|color
condition|)
block|{
name|this
operator|.
name|vertexLength
operator|+=
literal|3
expr_stmt|;
block|}
name|this
operator|.
name|color
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|r
operator|=
operator|(
name|float
operator|)
operator|(
name|var5
operator|&
literal|255
operator|)
operator|/
literal|255.0F
expr_stmt|;
name|this
operator|.
name|g
operator|=
operator|(
name|float
operator|)
operator|(
name|var6
operator|&
literal|255
operator|)
operator|/
literal|255.0F
expr_stmt|;
name|this
operator|.
name|b
operator|=
operator|(
name|float
operator|)
operator|(
name|var8
operator|&
literal|255
operator|)
operator|/
literal|255.0F
expr_stmt|;
block|}
block|}
specifier|public
specifier|final
name|void
name|noColor
parameter_list|()
block|{
name|this
operator|.
name|noColor
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|normal
parameter_list|(
name|float
name|var1
parameter_list|,
name|float
name|var2
parameter_list|,
name|float
name|var3
parameter_list|)
block|{
name|GL11
operator|.
name|glNormal3f
argument_list|(
name|var1
argument_list|,
name|var2
argument_list|,
name|var3
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

