begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|render
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|FloatBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|IntBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lwjgl
operator|.
name|BufferUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lwjgl
operator|.
name|opengl
operator|.
name|ARBShaderObjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lwjgl
operator|.
name|opengl
operator|.
name|GL11
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lwjgl
operator|.
name|opengl
operator|.
name|GL20
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lwjgl
operator|.
name|opengl
operator|.
name|GLContext
import|;
end_import

begin_class
specifier|public
class|class
name|Shader
block|{
specifier|private
name|int
name|vertex_shader
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|fragment_shader
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|program
init|=
literal|0
decl_stmt|;
specifier|private
name|FloatBuffer
name|matrix
init|=
name|BufferUtils
operator|.
name|createFloatBuffer
argument_list|(
literal|16
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|disable_error_msg
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|debug
init|=
literal|false
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|value_ids
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|pre_opengl20
init|=
literal|false
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
name|Shader
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|String
name|vert_path
init|=
name|path
operator|+
literal|".vert"
decl_stmt|;
name|String
name|frag_path
init|=
name|path
operator|+
literal|".frag"
decl_stmt|;
name|String
name|line
init|=
literal|""
decl_stmt|;
name|String
name|vertex_shader_source
init|=
literal|""
decl_stmt|;
name|URI
name|uri
init|=
literal|null
decl_stmt|;
try|try
block|{
name|uri
operator|=
operator|new
name|URI
argument_list|(
literal|"file://"
operator|+
name|Shader
operator|.
name|class
operator|.
name|getProtectionDomain
argument_list|()
operator|.
name|getCodeSource
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"URI fault"
argument_list|)
throw|;
block|}
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|f
operator|.
name|getParent
argument_list|()
operator|+
name|vert_path
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
name|vertex_shader_source
operator|=
name|vertex_shader_source
operator|+
name|line
operator|+
literal|"\n"
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldnt load shader! Was looking for: "
operator|+
name|f
operator|.
name|getParent
argument_list|()
operator|+
name|vert_path
operator|+
literal|" \nReason: "
operator|+
name|e
argument_list|)
throw|;
block|}
name|String
name|version
init|=
name|GL11
operator|.
name|glGetString
argument_list|(
literal|7938
argument_list|)
decl_stmt|;
if|if
condition|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|version
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
operator|<
literal|2
condition|)
block|{
name|this
operator|.
name|pre_opengl20
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|GLContext
operator|.
name|getCapabilities
argument_list|()
operator|.
name|GL_ARB_shader_objects
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Pre OpenGL 2.0 without GL_ARB_shader_objects support."
argument_list|)
throw|;
if|if
condition|(
operator|!
name|GLContext
operator|.
name|getCapabilities
argument_list|()
operator|.
name|GL_ARB_vertex_shader
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Pre OpenGL 2.0 without GL_ARB_vertex_shader support."
argument_list|)
throw|;
if|if
condition|(
operator|!
name|GLContext
operator|.
name|getCapabilities
argument_list|()
operator|.
name|GL_ARB_fragment_shader
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Pre OpenGL 2.0 without GL_ARB_vertex_shader support."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|pre_opengl20
condition|)
name|this
operator|.
name|vertex_shader
operator|=
name|compile
argument_list|(
literal|35633
argument_list|,
name|vertex_shader_source
argument_list|)
expr_stmt|;
else|else
block|{
name|this
operator|.
name|vertex_shader
operator|=
name|compilePre20
argument_list|(
literal|35633
argument_list|,
name|vertex_shader_source
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|vertex_shader
operator|==
literal|0
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error Vertex Shader!"
argument_list|)
expr_stmt|;
name|String
name|fragment_shader_source
init|=
literal|""
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|f
operator|.
name|getParent
argument_list|()
operator|+
name|frag_path
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
name|fragment_shader_source
operator|=
name|fragment_shader_source
operator|+
name|line
operator|+
literal|"\n"
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|pre_opengl20
condition|)
name|this
operator|.
name|fragment_shader
operator|=
name|compile
argument_list|(
literal|35632
argument_list|,
name|fragment_shader_source
argument_list|)
expr_stmt|;
else|else
block|{
name|this
operator|.
name|fragment_shader
operator|=
name|compilePre20
argument_list|(
literal|35632
argument_list|,
name|fragment_shader_source
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|fragment_shader
operator|==
literal|0
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error Fragment Shader!"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|pre_opengl20
condition|)
name|link
argument_list|(
name|path
argument_list|)
expr_stmt|;
else|else
name|linkPre20
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|compilePre20
parameter_list|(
name|int
name|type
parameter_list|,
name|String
name|shader_source
parameter_list|)
block|{
name|int
name|shader
init|=
name|ARBShaderObjects
operator|.
name|glCreateShaderObjectARB
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|shader
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Impossible to create shader object!"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|ARBShaderObjects
operator|.
name|glShaderSourceARB
argument_list|(
name|shader
argument_list|,
name|shader_source
argument_list|)
expr_stmt|;
name|ARBShaderObjects
operator|.
name|glCompileShaderARB
argument_list|(
name|shader
argument_list|)
expr_stmt|;
return|return
name|shader
return|;
block|}
specifier|private
name|int
name|compile
parameter_list|(
name|int
name|type
parameter_list|,
name|String
name|shader_source
parameter_list|)
block|{
name|int
name|shader
init|=
name|GL20
operator|.
name|glCreateShader
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|shader
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Impossible to create shader object!"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|GL20
operator|.
name|glShaderSource
argument_list|(
name|shader
argument_list|,
name|shader_source
argument_list|)
expr_stmt|;
name|GL20
operator|.
name|glCompileShader
argument_list|(
name|shader
argument_list|)
expr_stmt|;
return|return
name|shader
return|;
block|}
specifier|private
name|void
name|linkPre20
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|this
operator|.
name|program
operator|=
name|ARBShaderObjects
operator|.
name|glCreateProgramObjectARB
argument_list|()
expr_stmt|;
name|ARBShaderObjects
operator|.
name|glAttachObjectARB
argument_list|(
name|this
operator|.
name|program
argument_list|,
name|this
operator|.
name|vertex_shader
argument_list|)
expr_stmt|;
name|ARBShaderObjects
operator|.
name|glAttachObjectARB
argument_list|(
name|this
operator|.
name|program
argument_list|,
name|this
operator|.
name|fragment_shader
argument_list|)
expr_stmt|;
name|ARBShaderObjects
operator|.
name|glLinkProgramARB
argument_list|(
name|this
operator|.
name|program
argument_list|)
expr_stmt|;
name|IntBuffer
name|result
init|=
name|BufferUtils
operator|.
name|createIntBuffer
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ARBShaderObjects
operator|.
name|glGetObjectParameterARB
argument_list|(
name|this
operator|.
name|program
argument_list|,
literal|35714
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Shader compile error! \n\nin: "
operator|+
name|source
operator|+
literal|"\n\n"
operator|+
name|ARBShaderObjects
operator|.
name|glGetInfoLogARB
argument_list|(
name|this
operator|.
name|program
argument_list|,
literal|5000
argument_list|)
argument_list|)
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ARBShaderObjects
operator|.
name|glGetInfoLogARB
argument_list|(
name|this
operator|.
name|program
argument_list|,
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|link
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|this
operator|.
name|program
operator|=
name|GL20
operator|.
name|glCreateProgram
argument_list|()
expr_stmt|;
name|GL20
operator|.
name|glAttachShader
argument_list|(
name|this
operator|.
name|program
argument_list|,
name|this
operator|.
name|vertex_shader
argument_list|)
expr_stmt|;
name|GL20
operator|.
name|glAttachShader
argument_list|(
name|this
operator|.
name|program
argument_list|,
name|this
operator|.
name|fragment_shader
argument_list|)
expr_stmt|;
name|GL20
operator|.
name|glLinkProgram
argument_list|(
name|this
operator|.
name|program
argument_list|)
expr_stmt|;
name|IntBuffer
name|result
init|=
name|BufferUtils
operator|.
name|createIntBuffer
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|GL20
operator|.
name|glGetProgram
argument_list|(
name|this
operator|.
name|program
argument_list|,
literal|35714
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Shader compile error! \n\nin: "
operator|+
name|source
operator|+
literal|"\n\n"
operator|+
name|GL20
operator|.
name|glGetProgramInfoLog
argument_list|(
name|this
operator|.
name|program
argument_list|,
literal|5000
argument_list|)
argument_list|)
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|GL20
operator|.
name|glGetProgramInfoLog
argument_list|(
name|this
operator|.
name|program
argument_list|,
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|bind
parameter_list|()
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|pre_opengl20
condition|)
name|GL20
operator|.
name|glUseProgram
argument_list|(
name|this
operator|.
name|program
argument_list|)
expr_stmt|;
else|else
name|ARBShaderObjects
operator|.
name|glUseProgramObjectARB
argument_list|(
name|this
operator|.
name|program
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unbind
parameter_list|()
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|pre_opengl20
condition|)
name|GL20
operator|.
name|glUseProgram
argument_list|(
literal|0
argument_list|)
expr_stmt|;
else|else
name|ARBShaderObjects
operator|.
name|glUseProgramObjectARB
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|initValue1i
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|int
name|location
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|pre_opengl20
condition|)
name|location
operator|=
name|GL20
operator|.
name|glGetUniformLocation
argument_list|(
name|this
operator|.
name|program
argument_list|,
name|name
argument_list|)
expr_stmt|;
else|else
block|{
name|location
operator|=
name|ARBShaderObjects
operator|.
name|glGetUniformLocationARB
argument_list|(
name|this
operator|.
name|program
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|!
name|this
operator|.
name|disable_error_msg
operator|)
operator|&&
operator|(
name|location
operator|==
operator|-
literal|1
operator|)
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error binding shader int."
argument_list|)
expr_stmt|;
name|this
operator|.
name|value_ids
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|debug
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Added: "
operator|+
name|name
operator|+
literal|" at "
operator|+
operator|(
name|this
operator|.
name|value_ids
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|+
literal|" location: "
operator|+
name|location
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|value_ids
operator|.
name|size
argument_list|()
operator|-
literal|1
return|;
block|}
specifier|public
name|void
name|setValue1i
parameter_list|(
name|int
name|position_in_location_array
parameter_list|,
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|pre_opengl20
condition|)
name|GL20
operator|.
name|glUniform1i
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|this
operator|.
name|value_ids
operator|.
name|get
argument_list|(
name|position_in_location_array
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|ARBShaderObjects
operator|.
name|glUniform1iARB
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|this
operator|.
name|value_ids
operator|.
name|get
argument_list|(
name|position_in_location_array
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|initValue1f
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|int
name|location
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|pre_opengl20
condition|)
name|location
operator|=
name|GL20
operator|.
name|glGetUniformLocation
argument_list|(
name|this
operator|.
name|program
argument_list|,
name|name
argument_list|)
expr_stmt|;
else|else
block|{
name|location
operator|=
name|ARBShaderObjects
operator|.
name|glGetUniformLocationARB
argument_list|(
name|this
operator|.
name|program
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|!
name|this
operator|.
name|disable_error_msg
operator|)
operator|&&
operator|(
name|location
operator|==
operator|-
literal|1
operator|)
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error binding shader float."
argument_list|)
expr_stmt|;
name|this
operator|.
name|value_ids
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|debug
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Added: "
operator|+
name|name
operator|+
literal|" at "
operator|+
operator|(
name|this
operator|.
name|value_ids
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|+
literal|" location: "
operator|+
name|location
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|value_ids
operator|.
name|size
argument_list|()
operator|-
literal|1
return|;
block|}
specifier|public
name|void
name|setValue1f
parameter_list|(
name|int
name|position_in_location_array
parameter_list|,
name|float
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|pre_opengl20
condition|)
name|GL20
operator|.
name|glUniform1f
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|this
operator|.
name|value_ids
operator|.
name|get
argument_list|(
name|position_in_location_array
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|ARBShaderObjects
operator|.
name|glUniform1fARB
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|this
operator|.
name|value_ids
operator|.
name|get
argument_list|(
name|position_in_location_array
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|initValueVec3f
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|int
name|location
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|pre_opengl20
condition|)
name|location
operator|=
name|GL20
operator|.
name|glGetUniformLocation
argument_list|(
name|this
operator|.
name|program
argument_list|,
name|name
argument_list|)
expr_stmt|;
else|else
block|{
name|location
operator|=
name|ARBShaderObjects
operator|.
name|glGetUniformLocationARB
argument_list|(
name|this
operator|.
name|program
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|!
name|this
operator|.
name|disable_error_msg
operator|)
operator|&&
operator|(
name|location
operator|==
operator|-
literal|1
operator|)
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error binding shader vec3."
argument_list|)
expr_stmt|;
name|this
operator|.
name|value_ids
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|debug
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Added: "
operator|+
name|name
operator|+
literal|" at "
operator|+
operator|(
name|this
operator|.
name|value_ids
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|+
literal|" location: "
operator|+
name|location
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|value_ids
operator|.
name|size
argument_list|()
operator|-
literal|1
return|;
block|}
specifier|public
name|void
name|setValueVec3f
parameter_list|(
name|int
name|position_in_location_array
parameter_list|,
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|,
name|float
name|z
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|pre_opengl20
condition|)
name|GL20
operator|.
name|glUniform3f
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|this
operator|.
name|value_ids
operator|.
name|get
argument_list|(
name|position_in_location_array
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
else|else
name|ARBShaderObjects
operator|.
name|glUniform3fARB
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|this
operator|.
name|value_ids
operator|.
name|get
argument_list|(
name|position_in_location_array
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|initValueMat4f
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|int
name|location
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|pre_opengl20
condition|)
name|location
operator|=
name|GL20
operator|.
name|glGetUniformLocation
argument_list|(
name|this
operator|.
name|program
argument_list|,
name|name
argument_list|)
expr_stmt|;
else|else
block|{
name|location
operator|=
name|ARBShaderObjects
operator|.
name|glGetUniformLocationARB
argument_list|(
name|this
operator|.
name|program
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|!
name|this
operator|.
name|disable_error_msg
operator|)
operator|&&
operator|(
name|location
operator|==
operator|-
literal|1
operator|)
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error binding shader matrix."
argument_list|)
expr_stmt|;
name|this
operator|.
name|value_ids
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|debug
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Added: "
operator|+
name|name
operator|+
literal|" at "
operator|+
operator|(
name|this
operator|.
name|value_ids
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|+
literal|" location: "
operator|+
name|location
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|value_ids
operator|.
name|size
argument_list|()
operator|-
literal|1
return|;
block|}
specifier|public
name|void
name|setValueMat4f
parameter_list|(
name|int
name|position_in_location_array
parameter_list|,
name|float
index|[]
name|value
parameter_list|)
block|{
name|this
operator|.
name|matrix
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|matrix
operator|.
name|put
argument_list|(
name|value
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|matrix
operator|.
name|flip
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|pre_opengl20
condition|)
name|GL20
operator|.
name|glUniformMatrix4
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|this
operator|.
name|value_ids
operator|.
name|get
argument_list|(
name|position_in_location_array
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|,
literal|true
argument_list|,
name|this
operator|.
name|matrix
argument_list|)
expr_stmt|;
else|else
name|ARBShaderObjects
operator|.
name|glUniformMatrix4ARB
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|this
operator|.
name|value_ids
operator|.
name|get
argument_list|(
name|position_in_location_array
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|,
literal|true
argument_list|,
name|this
operator|.
name|matrix
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

