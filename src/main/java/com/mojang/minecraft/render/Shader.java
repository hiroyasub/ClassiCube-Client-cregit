begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|render
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lwjgl
operator|.
name|opengl
operator|.
name|ARBFragmentShader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lwjgl
operator|.
name|opengl
operator|.
name|ARBShaderObjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lwjgl
operator|.
name|opengl
operator|.
name|ARBVertexShader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lwjgl
operator|.
name|opengl
operator|.
name|GL11
import|;
end_import

begin_comment
comment|/** * The vertex and fragment shaders are setup when the box object is * constructed. They are applied to the GL state prior to the box * being drawn, and released from that state after drawing. * @author Stephen Jones */
end_comment

begin_class
specifier|public
class|class
name|Shader
block|{
comment|/*     * if the shaders are setup ok we can use shaders, otherwise we just     * use default settings     */
specifier|private
specifier|static
name|boolean
name|useShader
decl_stmt|;
comment|/*     * program shader, to which is attached a vertex and fragment shaders.     * They are set to 0 as a check because GL will assign unique int     * values to each     */
specifier|public
specifier|static
name|int
name|program
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|void
name|loadShader
parameter_list|(
name|String
name|v
parameter_list|,
name|String
name|f
parameter_list|)
block|{
name|int
name|vertShader
init|=
literal|0
decl_stmt|,
name|fragShader
init|=
literal|0
decl_stmt|;
try|try
block|{
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
name|vertShader
operator|=
name|createShader
argument_list|(
name|v
argument_list|,
name|ARBVertexShader
operator|.
name|GL_VERTEX_SHADER_ARB
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
name|fragShader
operator|=
name|createShader
argument_list|(
name|f
argument_list|,
name|ARBFragmentShader
operator|.
name|GL_FRAGMENT_SHADER_ARB
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
name|exc
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return;
block|}
finally|finally
block|{
block|}
name|program
operator|=
name|ARBShaderObjects
operator|.
name|glCreateProgramObjectARB
argument_list|()
expr_stmt|;
if|if
condition|(
name|program
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Returning, program = 0"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/*         * if the vertex and fragment shaders setup sucessfully,         * attach them to the shader program, link the sahder program         * (into the GL context I suppose), and validate         */
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
name|ARBShaderObjects
operator|.
name|glAttachObjectARB
argument_list|(
name|program
argument_list|,
name|vertShader
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
name|ARBShaderObjects
operator|.
name|glAttachObjectARB
argument_list|(
name|program
argument_list|,
name|fragShader
argument_list|)
expr_stmt|;
name|ARBShaderObjects
operator|.
name|glLinkProgramARB
argument_list|(
name|program
argument_list|)
expr_stmt|;
if|if
condition|(
name|ARBShaderObjects
operator|.
name|glGetObjectParameteriARB
argument_list|(
name|program
argument_list|,
name|ARBShaderObjects
operator|.
name|GL_OBJECT_LINK_STATUS_ARB
argument_list|)
operator|==
name|GL11
operator|.
name|GL_FALSE
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|getLogInfo
argument_list|(
name|program
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|ARBShaderObjects
operator|.
name|glValidateProgramARB
argument_list|(
name|program
argument_list|)
expr_stmt|;
if|if
condition|(
name|ARBShaderObjects
operator|.
name|glGetObjectParameteriARB
argument_list|(
name|program
argument_list|,
name|ARBShaderObjects
operator|.
name|GL_OBJECT_VALIDATE_STATUS_ARB
argument_list|)
operator|==
name|GL11
operator|.
name|GL_FALSE
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|getLogInfo
argument_list|(
name|program
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|useShader
operator|=
literal|true
expr_stmt|;
block|}
comment|/*     * If the shader was setup succesfully, we use the shader. Otherwise     * we run normal drawing code.     */
specifier|public
specifier|static
name|void
name|draw
parameter_list|()
block|{
if|if
condition|(
name|useShader
condition|)
name|ARBShaderObjects
operator|.
name|glUseProgramObjectARB
argument_list|(
name|program
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|endDraw
parameter_list|()
block|{
comment|//release the shader
if|if
condition|(
name|useShader
condition|)
name|ARBShaderObjects
operator|.
name|glUseProgramObjectARB
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/*     * With the exception of syntax, setting up vertex and fragment shaders     * is the same.     * @param the name and path to the vertex shader     */
specifier|private
specifier|static
name|int
name|createShader
parameter_list|(
name|String
name|filename
parameter_list|,
name|int
name|shaderType
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|shader
init|=
literal|0
decl_stmt|;
try|try
block|{
name|shader
operator|=
name|ARBShaderObjects
operator|.
name|glCreateShaderObjectARB
argument_list|(
name|shaderType
argument_list|)
expr_stmt|;
if|if
condition|(
name|shader
operator|==
literal|0
condition|)
return|return
literal|0
return|;
name|ARBShaderObjects
operator|.
name|glShaderSourceARB
argument_list|(
name|shader
argument_list|,
name|readFileAsString
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
name|ARBShaderObjects
operator|.
name|glCompileShaderARB
argument_list|(
name|shader
argument_list|)
expr_stmt|;
if|if
condition|(
name|ARBShaderObjects
operator|.
name|glGetObjectParameteriARB
argument_list|(
name|shader
argument_list|,
name|ARBShaderObjects
operator|.
name|GL_OBJECT_COMPILE_STATUS_ARB
argument_list|)
operator|==
name|GL11
operator|.
name|GL_FALSE
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error creating shader: "
operator|+
name|getLogInfo
argument_list|(
name|shader
argument_list|)
argument_list|)
throw|;
return|return
name|shader
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
name|ARBShaderObjects
operator|.
name|glDeleteObjectARB
argument_list|(
name|shader
argument_list|)
expr_stmt|;
throw|throw
name|exc
throw|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getLogInfo
parameter_list|(
name|int
name|obj
parameter_list|)
block|{
return|return
name|ARBShaderObjects
operator|.
name|glGetInfoLogARB
argument_list|(
name|obj
argument_list|,
name|ARBShaderObjects
operator|.
name|glGetObjectParameteriARB
argument_list|(
name|obj
argument_list|,
name|ARBShaderObjects
operator|.
name|GL_OBJECT_INFO_LOG_LENGTH_ARB
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|readFileAsString
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|Exception
block|{
name|StringBuilder
name|source
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|Exception
name|exception
init|=
literal|null
decl_stmt|;
name|BufferedReader
name|reader
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|Exception
name|innerExc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
name|source
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
name|exception
operator|=
name|exc
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
if|if
condition|(
name|innerExc
operator|==
literal|null
condition|)
name|innerExc
operator|=
name|exc
expr_stmt|;
else|else
name|exc
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|innerExc
operator|!=
literal|null
condition|)
throw|throw
name|innerExc
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
name|exception
operator|=
name|exc
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
name|exception
operator|=
name|exc
expr_stmt|;
else|else
name|exc
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
throw|throw
name|exception
throw|;
block|}
return|return
name|source
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

