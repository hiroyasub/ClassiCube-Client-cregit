begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|render
operator|.
name|texture
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageIO
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|util
operator|.
name|LogUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|render
operator|.
name|TextureManager
import|;
end_import

begin_class
specifier|public
class|class
name|AnimatedTextureFX
extends|extends
name|TextureFX
block|{
specifier|protected
name|int
name|index
init|=
literal|0
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|BufferedImage
argument_list|>
name|atlas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
name|BufferedImage
name|file
decl_stmt|;
specifier|public
name|AnimatedTextureFX
parameter_list|(
name|int
name|targetTextureID
parameter_list|,
name|BufferedImage
name|image
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|super
argument_list|(
name|targetTextureID
argument_list|)
expr_stmt|;
name|file
operator|=
name|image
expr_stmt|;
name|int
name|frames
init|=
name|file
operator|.
name|getHeight
argument_list|()
operator|/
name|file
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|int
name|frameSize
init|=
name|file
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|unStitch
argument_list|(
name|frames
argument_list|,
name|frameSize
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AnimatedTextureFX
parameter_list|(
name|int
name|targetTextureID
parameter_list|,
name|String
name|fileToLoad
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|super
argument_list|(
name|targetTextureID
argument_list|)
expr_stmt|;
try|try
block|{
name|file
operator|=
name|ImageIO
operator|.
name|read
argument_list|(
name|TextureManager
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|fileToLoad
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LogUtil
operator|.
name|logError
argument_list|(
literal|"Error loading texture from "
operator|+
name|fileToLoad
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|scaling
operator|=
name|file
operator|.
name|getWidth
argument_list|()
operator|/
literal|16
expr_stmt|;
name|int
name|frames
init|=
name|file
operator|.
name|getHeight
argument_list|()
operator|/
name|file
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|int
name|frameSize
init|=
name|file
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|unStitch
argument_list|(
name|frames
argument_list|,
name|frameSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|animate
parameter_list|()
block|{
if|if
condition|(
name|atlas
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|BufferedImage
name|image
init|=
name|atlas
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|int
name|width
init|=
name|image
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|int
name|height
init|=
name|image
operator|.
name|getHeight
argument_list|()
decl_stmt|;
name|int
index|[]
name|pixels
init|=
operator|new
name|int
index|[
name|width
operator|*
name|height
index|]
decl_stmt|;
name|image
operator|.
name|getRGB
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|pixels
argument_list|,
literal|0
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|textureData
operator|=
operator|new
name|byte
index|[
name|width
operator|*
name|height
operator|*
literal|4
index|]
expr_stmt|;
name|scaling
operator|=
name|file
operator|.
name|getWidth
argument_list|()
operator|/
literal|16
expr_stmt|;
for|for
control|(
name|int
name|pixel
init|=
literal|0
init|;
name|pixel
operator|<
name|pixels
operator|.
name|length
condition|;
name|pixel
operator|++
control|)
block|{
name|int
name|alpha
init|=
name|pixels
index|[
name|pixel
index|]
operator|>>>
literal|24
decl_stmt|;
name|int
name|red
init|=
name|pixels
index|[
name|pixel
index|]
operator|>>
literal|16
operator|&
literal|0xFF
decl_stmt|;
name|int
name|green
init|=
name|pixels
index|[
name|pixel
index|]
operator|>>
literal|8
operator|&
literal|0xFF
decl_stmt|;
name|int
name|blue
init|=
name|pixels
index|[
name|pixel
index|]
operator|&
literal|0xFF
decl_stmt|;
name|int
name|i
init|=
name|pixel
operator|<<
literal|2
decl_stmt|;
name|textureData
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|red
expr_stmt|;
name|textureData
index|[
name|i
operator|+
literal|1
index|]
operator|=
operator|(
name|byte
operator|)
name|green
expr_stmt|;
name|textureData
index|[
name|i
operator|+
literal|2
index|]
operator|=
operator|(
name|byte
operator|)
name|blue
expr_stmt|;
name|textureData
index|[
name|i
operator|+
literal|3
index|]
operator|=
operator|(
name|byte
operator|)
name|alpha
expr_stmt|;
block|}
name|index
operator|++
expr_stmt|;
if|if
condition|(
name|index
operator|>=
name|atlas
operator|.
name|size
argument_list|()
condition|)
block|{
name|index
operator|=
literal|0
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unStitch
parameter_list|(
name|int
name|frames
parameter_list|,
name|int
name|frameSize
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|frames
condition|;
name|i
operator|++
control|)
block|{
name|BufferedImage
name|image
init|=
operator|new
name|BufferedImage
argument_list|(
name|frameSize
argument_list|,
name|frameSize
argument_list|,
literal|6
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|frameSize
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|frameSize
condition|;
name|k
operator|++
control|)
block|{
name|image
operator|.
name|setRGB
argument_list|(
name|j
argument_list|,
name|k
argument_list|,
name|file
operator|.
name|getRGB
argument_list|(
name|j
argument_list|,
name|k
operator|+
name|i
operator|*
name|frameSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|atlas
operator|.
name|add
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

