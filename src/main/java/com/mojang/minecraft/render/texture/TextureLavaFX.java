begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|render
operator|.
name|texture
package|;
end_package

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|level
operator|.
name|tile
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|util
operator|.
name|MathHelper
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|TextureLavaFX
extends|extends
name|TextureFX
block|{
specifier|private
name|float
index|[]
name|red
init|=
operator|new
name|float
index|[
literal|256
index|]
decl_stmt|;
specifier|private
name|float
index|[]
name|green
init|=
operator|new
name|float
index|[
literal|256
index|]
decl_stmt|;
specifier|private
name|float
index|[]
name|blue
init|=
operator|new
name|float
index|[
literal|256
index|]
decl_stmt|;
specifier|private
name|float
index|[]
name|alpha
init|=
operator|new
name|float
index|[
literal|256
index|]
decl_stmt|;
specifier|public
name|TextureLavaFX
parameter_list|()
block|{
name|super
argument_list|(
name|Block
operator|.
name|lava
operator|.
name|textureId
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|animate
parameter_list|()
block|{
name|int
name|var1
decl_stmt|;
name|int
name|var2
decl_stmt|;
name|float
name|var3
decl_stmt|;
name|int
name|var5
decl_stmt|;
name|int
name|var6
decl_stmt|;
name|int
name|var7
decl_stmt|;
name|int
name|var8
decl_stmt|;
name|int
name|var9
decl_stmt|;
for|for
control|(
name|var1
operator|=
literal|0
init|;
name|var1
operator|<
literal|16
condition|;
operator|++
name|var1
control|)
block|{
for|for
control|(
name|var2
operator|=
literal|0
init|;
name|var2
operator|<
literal|16
condition|;
operator|++
name|var2
control|)
block|{
name|var3
operator|=
literal|0.0F
expr_stmt|;
name|int
name|var4
init|=
operator|(
name|int
operator|)
operator|(
name|MathHelper
operator|.
name|sin
argument_list|(
operator|(
name|float
operator|)
name|var2
operator|*
literal|3.1415927F
operator|*
literal|2.0F
operator|/
literal|16.0F
argument_list|)
operator|*
literal|1.2F
operator|)
decl_stmt|;
name|var5
operator|=
operator|(
name|int
operator|)
operator|(
name|MathHelper
operator|.
name|sin
argument_list|(
operator|(
name|float
operator|)
name|var1
operator|*
literal|3.1415927F
operator|*
literal|2.0F
operator|/
literal|16.0F
argument_list|)
operator|*
literal|1.2F
operator|)
expr_stmt|;
for|for
control|(
name|var6
operator|=
name|var1
operator|-
literal|1
init|;
name|var6
operator|<=
name|var1
operator|+
literal|1
condition|;
operator|++
name|var6
control|)
block|{
for|for
control|(
name|var7
operator|=
name|var2
operator|-
literal|1
init|;
name|var7
operator|<=
name|var2
operator|+
literal|1
condition|;
operator|++
name|var7
control|)
block|{
name|var8
operator|=
name|var6
operator|+
name|var4
operator|&
literal|15
expr_stmt|;
name|var9
operator|=
name|var7
operator|+
name|var5
operator|&
literal|15
expr_stmt|;
name|var3
operator|+=
name|this
operator|.
name|red
index|[
name|var8
operator|+
operator|(
name|var9
operator|<<
literal|4
operator|)
index|]
expr_stmt|;
block|}
block|}
name|this
operator|.
name|green
index|[
name|var1
operator|+
operator|(
name|var2
operator|<<
literal|4
operator|)
index|]
operator|=
name|var3
operator|/
literal|10.0F
operator|+
operator|(
name|this
operator|.
name|blue
index|[
operator|(
name|var1
operator|&
literal|15
operator|)
operator|+
operator|(
operator|(
name|var2
operator|&
literal|15
operator|)
operator|<<
literal|4
operator|)
index|]
operator|+
name|this
operator|.
name|blue
index|[
operator|(
name|var1
operator|+
literal|1
operator|&
literal|15
operator|)
operator|+
operator|(
operator|(
name|var2
operator|&
literal|15
operator|)
operator|<<
literal|4
operator|)
index|]
operator|+
name|this
operator|.
name|blue
index|[
operator|(
name|var1
operator|+
literal|1
operator|&
literal|15
operator|)
operator|+
operator|(
operator|(
name|var2
operator|+
literal|1
operator|&
literal|15
operator|)
operator|<<
literal|4
operator|)
index|]
operator|+
name|this
operator|.
name|blue
index|[
operator|(
name|var1
operator|&
literal|15
operator|)
operator|+
operator|(
operator|(
name|var2
operator|+
literal|1
operator|&
literal|15
operator|)
operator|<<
literal|4
operator|)
index|]
operator|)
operator|/
literal|4.0F
operator|*
literal|0.8F
expr_stmt|;
name|this
operator|.
name|blue
index|[
name|var1
operator|+
operator|(
name|var2
operator|<<
literal|4
operator|)
index|]
operator|+=
name|this
operator|.
name|alpha
index|[
name|var1
operator|+
operator|(
name|var2
operator|<<
literal|4
operator|)
index|]
operator|*
literal|0.01F
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|blue
index|[
name|var1
operator|+
operator|(
name|var2
operator|<<
literal|4
operator|)
index|]
operator|<
literal|0.0F
condition|)
block|{
name|this
operator|.
name|blue
index|[
name|var1
operator|+
operator|(
name|var2
operator|<<
literal|4
operator|)
index|]
operator|=
literal|0.0F
expr_stmt|;
block|}
name|this
operator|.
name|alpha
index|[
name|var1
operator|+
operator|(
name|var2
operator|<<
literal|4
operator|)
index|]
operator|-=
literal|0.06F
expr_stmt|;
if|if
condition|(
name|Math
operator|.
name|random
argument_list|()
operator|<
literal|0.005D
condition|)
block|{
name|this
operator|.
name|alpha
index|[
name|var1
operator|+
operator|(
name|var2
operator|<<
literal|4
operator|)
index|]
operator|=
literal|1.5F
expr_stmt|;
block|}
block|}
block|}
name|float
index|[]
name|var10
init|=
name|this
operator|.
name|green
decl_stmt|;
name|this
operator|.
name|green
operator|=
name|this
operator|.
name|red
expr_stmt|;
name|this
operator|.
name|red
operator|=
name|var10
expr_stmt|;
for|for
control|(
name|var2
operator|=
literal|0
init|;
name|var2
operator|<
literal|256
condition|;
operator|++
name|var2
control|)
block|{
if|if
condition|(
operator|(
name|var3
operator|=
name|this
operator|.
name|red
index|[
name|var2
index|]
operator|*
literal|2.0F
operator|)
operator|>
literal|1.0F
condition|)
block|{
name|var3
operator|=
literal|1.0F
expr_stmt|;
block|}
if|if
condition|(
name|var3
operator|<
literal|0.0F
condition|)
block|{
name|var3
operator|=
literal|0.0F
expr_stmt|;
block|}
name|var5
operator|=
operator|(
name|int
operator|)
operator|(
name|var3
operator|*
literal|100.0F
operator|+
literal|155.0F
operator|)
expr_stmt|;
name|var6
operator|=
operator|(
name|int
operator|)
operator|(
name|var3
operator|*
name|var3
operator|*
literal|255.0F
operator|)
expr_stmt|;
name|var7
operator|=
operator|(
name|int
operator|)
operator|(
name|var3
operator|*
name|var3
operator|*
name|var3
operator|*
name|var3
operator|*
literal|128.0F
operator|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|anaglyph
condition|)
block|{
name|var8
operator|=
operator|(
name|var5
operator|*
literal|30
operator|+
name|var6
operator|*
literal|59
operator|+
name|var7
operator|*
literal|11
operator|)
operator|/
literal|100
expr_stmt|;
name|var9
operator|=
operator|(
name|var5
operator|*
literal|30
operator|+
name|var6
operator|*
literal|70
operator|)
operator|/
literal|100
expr_stmt|;
name|var1
operator|=
operator|(
name|var5
operator|*
literal|30
operator|+
name|var7
operator|*
literal|70
operator|)
operator|/
literal|100
expr_stmt|;
name|var5
operator|=
name|var8
expr_stmt|;
name|var6
operator|=
name|var9
expr_stmt|;
name|var7
operator|=
name|var1
expr_stmt|;
block|}
name|this
operator|.
name|textureData
index|[
name|var2
operator|<<
literal|2
index|]
operator|=
operator|(
name|byte
operator|)
name|var5
expr_stmt|;
name|this
operator|.
name|textureData
index|[
operator|(
name|var2
operator|<<
literal|2
operator|)
operator|+
literal|1
index|]
operator|=
operator|(
name|byte
operator|)
name|var6
expr_stmt|;
name|this
operator|.
name|textureData
index|[
operator|(
name|var2
operator|<<
literal|2
operator|)
operator|+
literal|2
index|]
operator|=
operator|(
name|byte
operator|)
name|var7
expr_stmt|;
name|this
operator|.
name|textureData
index|[
operator|(
name|var2
operator|<<
literal|2
operator|)
operator|+
literal|3
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

