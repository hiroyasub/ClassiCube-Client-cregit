begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|render
package|;
end_package

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|GameSettings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|Minecraft
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|gui
operator|.
name|FontRenderer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|level
operator|.
name|tile
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|net
operator|.
name|NetworkPlayer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|render
operator|.
name|texture
operator|.
name|TextureFX
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|render
operator|.
name|texture
operator|.
name|TextureFireFX
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|render
operator|.
name|texture
operator|.
name|TextureLavaFX
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|render
operator|.
name|texture
operator|.
name|TextureWaterFX
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|render
operator|.
name|texture
operator|.
name|Textures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|util
operator|.
name|LogUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|IntBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lwjgl
operator|.
name|BufferUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lwjgl
operator|.
name|opengl
operator|.
name|ContextCapabilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lwjgl
operator|.
name|opengl
operator|.
name|EXTFramebufferObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lwjgl
operator|.
name|opengl
operator|.
name|EXTTextureFilterAnisotropic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lwjgl
operator|.
name|opengl
operator|.
name|GL11
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lwjgl
operator|.
name|opengl
operator|.
name|GL12
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lwjgl
operator|.
name|opengl
operator|.
name|GL14
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lwjgl
operator|.
name|opengl
operator|.
name|GL30
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lwjgl
operator|.
name|opengl
operator|.
name|GLContext
import|;
end_import

begin_class
specifier|public
class|class
name|TextureManager
block|{
specifier|public
name|boolean
name|applet
decl_stmt|;
specifier|private
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|textures
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|BufferedImage
argument_list|>
name|textureImages
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|IntBuffer
name|idBuffer
init|=
name|BufferUtils
operator|.
name|createIntBuffer
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|ByteBuffer
name|textureBuffer
init|=
name|BufferUtils
operator|.
name|createByteBuffer
argument_list|(
literal|262144
argument_list|)
decl_stmt|;
specifier|public
name|List
argument_list|<
name|TextureFX
argument_list|>
name|animations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|GameSettings
name|settings
decl_stmt|;
comment|// Stores block IDs of side/edge blocks. "-1" means "use default".
specifier|private
name|int
name|sideBlockId
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|int
name|edgeBlockId
init|=
operator|-
literal|1
decl_stmt|;
comment|// If a corresponding *BlockId field is set to non-default value, these fields will
comment|// store a bitmap from the texture atlas corresponding to that block's texture.
comment|// These fields need to be updated (by calling setSideBlock/setEdgeBlock) when
comment|// texture pack is changed.
specifier|public
name|BufferedImage
name|customSideBlock
init|=
literal|null
decl_stmt|;
specifier|public
name|BufferedImage
name|customEdgeBlock
init|=
literal|null
decl_stmt|;
specifier|public
name|List
argument_list|<
name|BufferedImage
argument_list|>
name|textureAtlas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|BufferedImage
name|currentTerrainPng
init|=
literal|null
decl_stmt|;
specifier|public
name|BufferedImage
name|customDirtPng
init|=
literal|null
decl_stmt|;
specifier|public
name|BufferedImage
name|customRainPng
init|=
literal|null
decl_stmt|;
specifier|public
name|BufferedImage
name|customGUI
init|=
literal|null
decl_stmt|;
specifier|public
name|BufferedImage
name|customIcons
init|=
literal|null
decl_stmt|;
specifier|public
name|BufferedImage
name|customFont
init|=
literal|null
decl_stmt|;
specifier|public
name|BufferedImage
name|customClouds
init|=
literal|null
decl_stmt|;
specifier|public
name|BufferedImage
name|customSnow
init|=
literal|null
decl_stmt|;
specifier|public
name|BufferedImage
name|customChicken
init|=
literal|null
decl_stmt|;
specifier|public
name|BufferedImage
name|customCreeper
init|=
literal|null
decl_stmt|;
specifier|public
name|BufferedImage
name|customCrocodile
init|=
literal|null
decl_stmt|;
specifier|public
name|BufferedImage
name|customHumanoid
init|=
literal|null
decl_stmt|;
specifier|public
name|BufferedImage
name|customPig
init|=
literal|null
decl_stmt|;
specifier|public
name|BufferedImage
name|customPrinter
init|=
literal|null
decl_stmt|;
specifier|public
name|BufferedImage
name|customSheep
init|=
literal|null
decl_stmt|;
specifier|public
name|BufferedImage
name|customSkeleton
init|=
literal|null
decl_stmt|;
specifier|public
name|BufferedImage
name|customSpider
init|=
literal|null
decl_stmt|;
specifier|public
name|BufferedImage
name|customZombie
init|=
literal|null
decl_stmt|;
specifier|public
name|File
name|minecraftFolder
decl_stmt|;
specifier|public
name|File
name|texturesFolder
decl_stmt|;
specifier|public
name|int
name|previousMipmapMode
decl_stmt|;
specifier|public
name|TextureManager
parameter_list|(
name|GameSettings
name|settings
parameter_list|,
name|boolean
name|Applet
parameter_list|)
block|{
name|this
operator|.
name|applet
operator|=
name|Applet
expr_stmt|;
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
name|minecraftFolder
operator|=
name|Minecraft
operator|.
name|mcDir
expr_stmt|;
name|texturesFolder
operator|=
operator|new
name|File
argument_list|(
name|minecraftFolder
argument_list|,
literal|"texturepacks"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|texturesFolder
operator|.
name|exists
argument_list|()
condition|)
block|{
name|texturesFolder
operator|.
name|mkdir
argument_list|()
expr_stmt|;
block|}
name|ImageIO
operator|.
name|setUseCache
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|BufferedImage
name|crop
parameter_list|(
name|BufferedImage
name|src
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedImage
name|clipping
init|=
operator|new
name|BufferedImage
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|BufferedImage
operator|.
name|TYPE_INT_ARGB
argument_list|)
decl_stmt|;
comment|// src.getType());
name|Graphics2D
name|area
init|=
operator|(
name|Graphics2D
operator|)
name|clipping
operator|.
name|getGraphics
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|area
operator|.
name|drawImage
argument_list|(
name|src
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|clipping
operator|.
name|getWidth
argument_list|()
argument_list|,
name|clipping
operator|.
name|getHeight
argument_list|()
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|x
operator|+
name|clipping
operator|.
name|getWidth
argument_list|()
argument_list|,
name|y
operator|+
name|clipping
operator|.
name|getHeight
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|area
operator|.
name|dispose
argument_list|()
expr_stmt|;
return|return
name|clipping
return|;
block|}
specifier|public
specifier|static
name|BufferedImage
name|load1
parameter_list|(
name|BufferedImage
name|image
parameter_list|)
block|{
name|int
name|charWidth
init|=
name|image
operator|.
name|getWidth
argument_list|()
operator|/
literal|16
decl_stmt|;
name|BufferedImage
name|image1
init|=
operator|new
name|BufferedImage
argument_list|(
literal|16
argument_list|,
name|image
operator|.
name|getHeight
argument_list|()
operator|*
name|charWidth
argument_list|,
name|BufferedImage
operator|.
name|TYPE_INT_ARGB
argument_list|)
decl_stmt|;
name|Graphics
name|graphics
init|=
name|image1
operator|.
name|getGraphics
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|charWidth
condition|;
name|i
operator|++
control|)
block|{
name|graphics
operator|.
name|drawImage
argument_list|(
name|image
argument_list|,
operator|-
name|i
operator|<<
literal|4
argument_list|,
name|i
operator|*
name|image
operator|.
name|getHeight
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|graphics
operator|.
name|dispose
argument_list|()
expr_stmt|;
return|return
name|image1
return|;
block|}
specifier|public
specifier|static
name|int
name|getMaxAnisotropySetting
parameter_list|()
block|{
name|float
name|maxLevel
init|=
name|GL11
operator|.
name|glGetFloat
argument_list|(
name|EXTTextureFilterAnisotropic
operator|.
name|GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
argument_list|)
decl_stmt|;
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|log
argument_list|(
name|maxLevel
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|BufferedImage
argument_list|>
name|Atlas2dInto1d
parameter_list|(
name|BufferedImage
name|atlas2d
parameter_list|,
name|int
name|tiles
parameter_list|,
name|int
name|atlasSizeLimit
parameter_list|)
block|{
name|int
name|tileSize
init|=
name|atlas2d
operator|.
name|getWidth
argument_list|()
operator|/
name|tiles
decl_stmt|;
name|int
name|atlasesCount
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|tiles
operator|*
name|tiles
operator|*
name|tileSize
operator|/
name|atlasSizeLimit
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BufferedImage
argument_list|>
name|atlases
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// 256 x 1
name|BufferedImage
name|atlas1d
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tiles
operator|*
name|tiles
condition|;
name|i
operator|++
control|)
block|{
name|int
name|x
init|=
name|i
operator|%
name|tiles
decl_stmt|;
name|int
name|y
init|=
name|i
operator|/
name|tiles
decl_stmt|;
name|int
name|tilesInAtlas
init|=
name|tiles
operator|*
name|tiles
operator|/
name|atlasesCount
decl_stmt|;
if|if
condition|(
name|i
operator|%
name|tilesInAtlas
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|atlas1d
operator|!=
literal|null
condition|)
block|{
name|atlases
operator|.
name|add
argument_list|(
name|atlas1d
argument_list|)
expr_stmt|;
block|}
name|atlas1d
operator|=
operator|new
name|BufferedImage
argument_list|(
name|tileSize
argument_list|,
name|atlasSizeLimit
argument_list|,
name|BufferedImage
operator|.
name|TYPE_INT_ARGB
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|atlas1d
operator|=
name|crop
argument_list|(
name|atlas2d
argument_list|,
name|tileSize
argument_list|,
name|tileSize
argument_list|,
name|x
operator|*
name|tileSize
argument_list|,
name|y
operator|*
name|tileSize
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LogUtil
operator|.
name|logWarning
argument_list|(
literal|"Error extracting texture from an atlas."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
name|atlases
operator|.
name|add
argument_list|(
name|atlas1d
argument_list|)
expr_stmt|;
return|return
name|atlases
return|;
block|}
specifier|private
name|int
name|blend
parameter_list|(
name|int
name|c1
parameter_list|,
name|int
name|c2
parameter_list|)
block|{
name|int
name|a1
init|=
operator|(
name|c1
operator|&
literal|0xFF000000
operator|)
operator|>>
literal|24
operator|&
literal|0xFF
decl_stmt|;
name|int
name|a2
init|=
operator|(
name|c2
operator|&
literal|0xFF000000
operator|)
operator|>>
literal|24
operator|&
literal|0xFF
decl_stmt|;
name|int
name|ax
init|=
operator|(
name|a1
operator|+
name|a2
operator|)
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|ax
operator|>
literal|255
condition|)
block|{
name|ax
operator|=
literal|255
expr_stmt|;
block|}
if|if
condition|(
name|a1
operator|+
name|a2
operator|<=
literal|0
condition|)
block|{
name|a1
operator|=
literal|1
expr_stmt|;
name|a2
operator|=
literal|1
expr_stmt|;
name|ax
operator|=
literal|0
expr_stmt|;
block|}
name|int
name|r1
init|=
operator|(
name|c1
operator|>>
literal|16
operator|&
literal|0xFF
operator|)
operator|*
name|a1
decl_stmt|;
name|int
name|g1
init|=
operator|(
name|c1
operator|>>
literal|8
operator|&
literal|0xFF
operator|)
operator|*
name|a1
decl_stmt|;
name|int
name|b1
init|=
operator|(
name|c1
operator|&
literal|0xFF
operator|)
operator|*
name|a1
decl_stmt|;
name|int
name|r2
init|=
operator|(
name|c2
operator|>>
literal|16
operator|&
literal|0xFF
operator|)
operator|*
name|a2
decl_stmt|;
name|int
name|g2
init|=
operator|(
name|c2
operator|>>
literal|8
operator|&
literal|0xFF
operator|)
operator|*
name|a2
decl_stmt|;
name|int
name|b2
init|=
operator|(
name|c2
operator|&
literal|0xFF
operator|)
operator|*
name|a2
decl_stmt|;
name|int
name|rx
init|=
operator|(
name|r1
operator|+
name|r2
operator|)
operator|/
operator|(
name|a1
operator|+
name|a2
operator|)
decl_stmt|;
name|int
name|gx
init|=
operator|(
name|g1
operator|+
name|g2
operator|)
operator|/
operator|(
name|a1
operator|+
name|a2
operator|)
decl_stmt|;
name|int
name|bx
init|=
operator|(
name|b1
operator|+
name|b2
operator|)
operator|/
operator|(
name|a1
operator|+
name|a2
operator|)
decl_stmt|;
return|return
name|ax
operator|<<
literal|24
operator||
name|rx
operator|<<
literal|16
operator||
name|gx
operator|<<
literal|8
operator||
name|bx
return|;
block|}
specifier|public
name|void
name|generateMipMaps
parameter_list|(
name|ByteBuffer
name|data
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|boolean
name|test
parameter_list|)
block|{
name|ByteBuffer
name|mipData
init|=
name|data
decl_stmt|;
for|for
control|(
name|int
name|level
init|=
name|test
condition|?
literal|0
else|:
literal|1
init|;
name|level
operator|<=
literal|4
condition|;
name|level
operator|++
control|)
block|{
name|int
name|parWidth
init|=
name|width
operator|>>
name|level
operator|-
literal|1
decl_stmt|;
name|int
name|mipWidth
init|=
name|width
operator|>>
name|level
decl_stmt|;
name|int
name|mipHeight
init|=
name|height
operator|>>
name|level
decl_stmt|;
if|if
condition|(
name|mipWidth
operator|<=
literal|0
operator|||
name|mipHeight
operator|<=
literal|0
condition|)
block|{
break|break;
block|}
name|ByteBuffer
name|mipData1
init|=
name|BufferUtils
operator|.
name|createByteBuffer
argument_list|(
name|data
operator|.
name|capacity
argument_list|()
argument_list|)
decl_stmt|;
name|mipData1
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|mipX
init|=
literal|0
init|;
name|mipX
operator|<
name|mipWidth
condition|;
name|mipX
operator|++
control|)
block|{
for|for
control|(
name|int
name|mipY
init|=
literal|0
init|;
name|mipY
operator|<
name|mipHeight
condition|;
name|mipY
operator|++
control|)
block|{
name|int
name|p1
init|=
name|mipData
operator|.
name|getInt
argument_list|(
operator|(
name|mipX
operator|*
literal|2
operator|+
literal|0
operator|+
operator|(
name|mipY
operator|*
literal|2
operator|+
literal|0
operator|)
operator|*
name|parWidth
operator|)
operator|*
literal|4
argument_list|)
decl_stmt|;
name|int
name|p2
init|=
name|mipData
operator|.
name|getInt
argument_list|(
operator|(
name|mipX
operator|*
literal|2
operator|+
literal|1
operator|+
operator|(
name|mipY
operator|*
literal|2
operator|+
literal|0
operator|)
operator|*
name|parWidth
operator|)
operator|*
literal|4
argument_list|)
decl_stmt|;
name|int
name|p3
init|=
name|mipData
operator|.
name|getInt
argument_list|(
operator|(
name|mipX
operator|*
literal|2
operator|+
literal|1
operator|+
operator|(
name|mipY
operator|*
literal|2
operator|+
literal|1
operator|)
operator|*
name|parWidth
operator|)
operator|*
literal|4
argument_list|)
decl_stmt|;
name|int
name|p4
init|=
name|mipData
operator|.
name|getInt
argument_list|(
operator|(
name|mipX
operator|*
literal|2
operator|+
literal|0
operator|+
operator|(
name|mipY
operator|*
literal|2
operator|+
literal|1
operator|)
operator|*
name|parWidth
operator|)
operator|*
literal|4
argument_list|)
decl_stmt|;
name|int
name|pixel
init|=
name|blend
argument_list|(
name|blend
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|,
name|blend
argument_list|(
name|p3
argument_list|,
name|p4
argument_list|)
argument_list|)
decl_stmt|;
name|mipData1
operator|.
name|putInt
argument_list|(
operator|(
name|mipX
operator|+
name|mipY
operator|*
name|mipWidth
operator|)
operator|*
literal|4
argument_list|,
name|pixel
argument_list|)
expr_stmt|;
block|}
block|}
name|GL11
operator|.
name|glTexImage2D
argument_list|(
name|GL11
operator|.
name|GL_TEXTURE_2D
argument_list|,
name|level
argument_list|,
name|GL11
operator|.
name|GL_RGBA
argument_list|,
name|mipWidth
argument_list|,
name|mipHeight
argument_list|,
literal|0
argument_list|,
name|GL11
operator|.
name|GL_RGBA
argument_list|,
name|GL11
operator|.
name|GL_UNSIGNED_BYTE
argument_list|,
name|mipData1
argument_list|)
expr_stmt|;
comment|// GL11.glAlphaFunc(GL11.GL_GEQUAL, 0.1F * level); // Create transparency for each level.
name|mipData
operator|=
name|mipData1
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|initAtlas
parameter_list|()
throws|throws
name|IOException
block|{
name|BufferedImage
name|image
decl_stmt|;
if|if
condition|(
name|currentTerrainPng
operator|!=
literal|null
condition|)
block|{
name|image
operator|=
name|currentTerrainPng
expr_stmt|;
block|}
else|else
block|{
name|image
operator|=
name|loadImageFast
argument_list|(
name|TextureManager
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|Textures
operator|.
name|TERRAIN
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|textureAtlas
operator|.
name|clear
argument_list|()
expr_stmt|;
name|textureAtlas
operator|=
name|Atlas2dInto1d
argument_list|(
name|image
argument_list|,
literal|16
argument_list|,
name|image
operator|.
name|getWidth
argument_list|()
operator|/
literal|16
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|load
parameter_list|(
name|BufferedImage
name|image
parameter_list|)
block|{
name|idBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|GL11
operator|.
name|glGenTextures
argument_list|(
name|idBuffer
argument_list|)
expr_stmt|;
name|int
name|textureID
init|=
name|idBuffer
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|load
argument_list|(
name|image
argument_list|,
name|textureID
argument_list|)
expr_stmt|;
name|textureImages
operator|.
name|put
argument_list|(
name|textureID
argument_list|,
name|image
argument_list|)
expr_stmt|;
return|return
name|textureID
return|;
block|}
specifier|public
name|void
name|load
parameter_list|(
name|BufferedImage
name|image
parameter_list|,
name|int
name|textureID
parameter_list|)
block|{
if|if
condition|(
name|image
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|int
name|width
init|=
name|image
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|int
name|height
init|=
name|image
operator|.
name|getHeight
argument_list|()
decl_stmt|;
name|GL11
operator|.
name|glBindTexture
argument_list|(
name|GL11
operator|.
name|GL_TEXTURE_2D
argument_list|,
name|textureID
argument_list|)
expr_stmt|;
if|if
condition|(
name|settings
operator|.
name|smoothing
operator|>
name|GameSettings
operator|.
name|SMOOTHING_OFF
condition|)
block|{
name|GL11
operator|.
name|glTexParameteri
argument_list|(
name|GL11
operator|.
name|GL_TEXTURE_2D
argument_list|,
name|GL11
operator|.
name|GL_TEXTURE_MIN_FILTER
argument_list|,
name|GL11
operator|.
name|GL_NEAREST_MIPMAP_LINEAR
argument_list|)
expr_stmt|;
name|GL11
operator|.
name|glTexParameteri
argument_list|(
name|GL11
operator|.
name|GL_TEXTURE_2D
argument_list|,
name|GL11
operator|.
name|GL_TEXTURE_MAG_FILTER
argument_list|,
name|GL11
operator|.
name|GL_NEAREST
argument_list|)
expr_stmt|;
name|GL11
operator|.
name|glTexParameteri
argument_list|(
name|GL11
operator|.
name|GL_TEXTURE_2D
argument_list|,
name|GL12
operator|.
name|GL_TEXTURE_BASE_LEVEL
argument_list|,
name|GL11
operator|.
name|GL_POINTS
argument_list|)
expr_stmt|;
name|GL11
operator|.
name|glTexParameteri
argument_list|(
name|GL11
operator|.
name|GL_TEXTURE_2D
argument_list|,
name|GL12
operator|.
name|GL_TEXTURE_MAX_LEVEL
argument_list|,
name|GL11
operator|.
name|GL_TRIANGLES
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|GL11
operator|.
name|glTexParameteri
argument_list|(
name|GL11
operator|.
name|GL_TEXTURE_2D
argument_list|,
name|GL11
operator|.
name|GL_TEXTURE_MIN_FILTER
argument_list|,
name|GL11
operator|.
name|GL_NEAREST
argument_list|)
expr_stmt|;
name|GL11
operator|.
name|glTexParameteri
argument_list|(
name|GL11
operator|.
name|GL_TEXTURE_2D
argument_list|,
name|GL11
operator|.
name|GL_TEXTURE_MAG_FILTER
argument_list|,
name|GL11
operator|.
name|GL_NEAREST
argument_list|)
expr_stmt|;
block|}
comment|// GL11.glTexEnvi(GL11.GL_TEXTURE_ENV, GL11.GL_TEXTURE_ENV_MODE, GL11.GL_MODULATE);
name|int
index|[]
name|pixels
init|=
operator|new
name|int
index|[
name|width
operator|*
name|height
index|]
decl_stmt|;
name|byte
index|[]
name|color
init|=
operator|new
name|byte
index|[
name|width
operator|*
name|height
operator|<<
literal|2
index|]
decl_stmt|;
name|image
operator|.
name|getRGB
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|pixels
argument_list|,
literal|0
argument_list|,
name|width
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|pixel
init|=
literal|0
init|;
name|pixel
operator|<
name|pixels
operator|.
name|length
condition|;
name|pixel
operator|++
control|)
block|{
name|int
name|alpha
init|=
name|pixels
index|[
name|pixel
index|]
operator|>>>
literal|24
decl_stmt|;
name|int
name|red
init|=
name|pixels
index|[
name|pixel
index|]
operator|>>
literal|16
operator|&
literal|0xFF
decl_stmt|;
name|int
name|green
init|=
name|pixels
index|[
name|pixel
index|]
operator|>>
literal|8
operator|&
literal|0xFF
decl_stmt|;
name|int
name|blue
init|=
name|pixels
index|[
name|pixel
index|]
operator|&
literal|0xFF
decl_stmt|;
name|int
name|i
init|=
name|pixel
operator|<<
literal|2
decl_stmt|;
name|color
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|red
expr_stmt|;
name|color
index|[
name|i
operator|+
literal|1
index|]
operator|=
operator|(
name|byte
operator|)
name|green
expr_stmt|;
name|color
index|[
name|i
operator|+
literal|2
index|]
operator|=
operator|(
name|byte
operator|)
name|blue
expr_stmt|;
name|color
index|[
name|i
operator|+
literal|3
index|]
operator|=
operator|(
name|byte
operator|)
name|alpha
expr_stmt|;
block|}
if|if
condition|(
name|textureBuffer
operator|.
name|capacity
argument_list|()
operator|!=
name|color
operator|.
name|length
condition|)
block|{
name|textureBuffer
operator|=
name|BufferUtils
operator|.
name|createByteBuffer
argument_list|(
name|color
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|textureBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|textureBuffer
operator|.
name|put
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|textureBuffer
operator|.
name|position
argument_list|(
literal|0
argument_list|)
operator|.
name|limit
argument_list|(
name|color
operator|.
name|length
argument_list|)
expr_stmt|;
name|GL11
operator|.
name|glTexImage2D
argument_list|(
name|GL11
operator|.
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|,
name|GL11
operator|.
name|GL_RGBA
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|0
argument_list|,
name|GL11
operator|.
name|GL_RGBA
argument_list|,
name|GL11
operator|.
name|GL_UNSIGNED_BYTE
argument_list|,
name|textureBuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|settings
operator|.
name|smoothing
operator|>
name|GameSettings
operator|.
name|SMOOTHING_OFF
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|smoothing
operator|==
name|GameSettings
operator|.
name|SMOOTHING_AUTO
condition|)
block|{
name|ContextCapabilities
name|capabilities
init|=
name|GLContext
operator|.
name|getCapabilities
argument_list|()
decl_stmt|;
if|if
condition|(
name|capabilities
operator|.
name|OpenGL30
condition|)
block|{
if|if
condition|(
name|previousMipmapMode
operator|!=
name|settings
operator|.
name|smoothing
condition|)
block|{
name|LogUtil
operator|.
name|logInfo
argument_list|(
literal|"Using OpenGL 3.0 for mipmap generation."
argument_list|)
expr_stmt|;
block|}
name|GL30
operator|.
name|glGenerateMipmap
argument_list|(
name|GL11
operator|.
name|GL_TEXTURE_2D
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|capabilities
operator|.
name|GL_EXT_framebuffer_object
condition|)
block|{
if|if
condition|(
name|previousMipmapMode
operator|!=
name|settings
operator|.
name|smoothing
condition|)
block|{
name|LogUtil
operator|.
name|logInfo
argument_list|(
literal|"Using GL_EXT_framebuffer_object extension for mipmap generation."
argument_list|)
expr_stmt|;
block|}
name|EXTFramebufferObject
operator|.
name|glGenerateMipmapEXT
argument_list|(
name|GL11
operator|.
name|GL_TEXTURE_2D
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|capabilities
operator|.
name|OpenGL14
condition|)
block|{
if|if
condition|(
name|previousMipmapMode
operator|!=
name|settings
operator|.
name|smoothing
condition|)
block|{
name|LogUtil
operator|.
name|logInfo
argument_list|(
literal|"Using OpenGL 1.4 for mipmap generation."
argument_list|)
expr_stmt|;
block|}
name|GL11
operator|.
name|glTexParameteri
argument_list|(
name|GL11
operator|.
name|GL_TEXTURE_2D
argument_list|,
name|GL14
operator|.
name|GL_GENERATE_MIPMAP
argument_list|,
name|GL11
operator|.
name|GL_TRUE
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|settings
operator|.
name|smoothing
operator|==
name|GameSettings
operator|.
name|SMOOTHING_UNIVERSAL
condition|)
block|{
if|if
condition|(
name|previousMipmapMode
operator|!=
name|settings
operator|.
name|smoothing
condition|)
block|{
name|LogUtil
operator|.
name|logInfo
argument_list|(
literal|"Using custom system for mipmap generation."
argument_list|)
expr_stmt|;
block|}
name|generateMipMaps
argument_list|(
name|textureBuffer
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|anisotropy
operator|>
literal|0
condition|)
block|{
name|float
name|desiredLevel
init|=
literal|1
operator|<<
name|settings
operator|.
name|anisotropy
decl_stmt|;
name|float
name|maxLevel
init|=
name|GL11
operator|.
name|glGetFloat
argument_list|(
name|EXTTextureFilterAnisotropic
operator|.
name|GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
argument_list|)
decl_stmt|;
name|float
name|actualLevel
init|=
name|Math
operator|.
name|min
argument_list|(
name|desiredLevel
argument_list|,
name|maxLevel
argument_list|)
decl_stmt|;
name|GL11
operator|.
name|glTexParameterf
argument_list|(
name|GL11
operator|.
name|GL_TEXTURE_2D
argument_list|,
name|EXTTextureFilterAnisotropic
operator|.
name|GL_TEXTURE_MAX_ANISOTROPY_EXT
argument_list|,
name|actualLevel
argument_list|)
expr_stmt|;
block|}
block|}
name|previousMipmapMode
operator|=
name|settings
operator|.
name|smoothing
expr_stmt|;
block|}
specifier|public
name|int
name|load
parameter_list|(
specifier|final
name|String
name|file
parameter_list|)
block|{
name|Integer
name|val
init|=
name|textures
operator|.
name|get
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|int
operator|)
name|val
return|;
block|}
switch|switch
condition|(
name|file
condition|)
block|{
case|case
name|Textures
operator|.
name|CLOUDS
case|:
return|return
name|loadCustom
argument_list|(
name|file
argument_list|,
name|customClouds
argument_list|)
return|;
case|case
name|Textures
operator|.
name|FONT
case|:
comment|// Note: FontRenderer needs to be re-created whenever font texture changes.
return|return
name|loadCustom
argument_list|(
name|file
argument_list|,
name|customFont
argument_list|)
return|;
case|case
name|Textures
operator|.
name|GUI
case|:
return|return
name|loadCustom
argument_list|(
name|file
argument_list|,
name|customGUI
argument_list|)
return|;
case|case
name|Textures
operator|.
name|ICONS
case|:
return|return
name|loadCustom
argument_list|(
name|file
argument_list|,
name|customIcons
argument_list|)
return|;
case|case
name|Textures
operator|.
name|LOADING_BACKGROUND
case|:
return|return
name|loadCustom
argument_list|(
name|file
argument_list|,
name|customDirtPng
argument_list|)
return|;
case|case
name|Textures
operator|.
name|MAP_EDGE
case|:
if|if
condition|(
name|customEdgeBlock
operator|==
literal|null
operator|&&
name|currentTerrainPng
operator|!=
literal|null
condition|)
block|{
comment|// This will fill in MAP_EDGE and MAP_SIDE
name|load
argument_list|(
name|Textures
operator|.
name|TERRAIN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|loadCustom
argument_list|(
name|file
argument_list|,
name|customEdgeBlock
argument_list|)
return|;
block|}
case|case
name|Textures
operator|.
name|MAP_SIDE
case|:
if|if
condition|(
name|customSideBlock
operator|==
literal|null
operator|&&
name|currentTerrainPng
operator|!=
literal|null
condition|)
block|{
comment|// This will fill in MAP_EDGE and MAP_SIDE
name|load
argument_list|(
name|Textures
operator|.
name|TERRAIN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|loadCustom
argument_list|(
name|file
argument_list|,
name|customSideBlock
argument_list|)
return|;
block|}
case|case
name|Textures
operator|.
name|MOB_CHICKEN
case|:
return|return
name|loadCustom
argument_list|(
name|file
argument_list|,
name|customChicken
argument_list|)
return|;
case|case
name|Textures
operator|.
name|MOB_CREEPER
case|:
return|return
name|loadCustom
argument_list|(
name|file
argument_list|,
name|customCreeper
argument_list|)
return|;
case|case
name|Textures
operator|.
name|MOB_CROC
case|:
return|return
name|loadCustom
argument_list|(
name|file
argument_list|,
name|customCrocodile
argument_list|)
return|;
case|case
name|Textures
operator|.
name|MOB_HUMANOID
case|:
return|return
name|loadCustom
argument_list|(
name|file
argument_list|,
name|customHumanoid
argument_list|)
return|;
case|case
name|Textures
operator|.
name|MOB_PIG
case|:
return|return
name|loadCustom
argument_list|(
name|file
argument_list|,
name|customPig
argument_list|)
return|;
case|case
name|Textures
operator|.
name|MOB_PRINTER
case|:
return|return
name|loadCustom
argument_list|(
name|file
argument_list|,
name|customPrinter
argument_list|)
return|;
case|case
name|Textures
operator|.
name|MOB_SHEEP
case|:
return|return
name|loadCustom
argument_list|(
name|file
argument_list|,
name|customSheep
argument_list|)
return|;
case|case
name|Textures
operator|.
name|MOB_SKELETON
case|:
return|return
name|loadCustom
argument_list|(
name|file
argument_list|,
name|customSkeleton
argument_list|)
return|;
case|case
name|Textures
operator|.
name|MOB_SPIDER
case|:
return|return
name|loadCustom
argument_list|(
name|file
argument_list|,
name|customSpider
argument_list|)
return|;
case|case
name|Textures
operator|.
name|MOB_ZOMBIE
case|:
return|return
name|loadCustom
argument_list|(
name|file
argument_list|,
name|customZombie
argument_list|)
return|;
case|case
name|Textures
operator|.
name|RAIN
case|:
return|return
name|loadCustom
argument_list|(
name|file
argument_list|,
name|customRainPng
argument_list|)
return|;
case|case
name|Textures
operator|.
name|SNOW
case|:
return|return
name|loadCustom
argument_list|(
name|file
argument_list|,
name|customSnow
argument_list|)
return|;
case|case
name|Textures
operator|.
name|TERRAIN
case|:
name|int
name|id
init|=
name|loadCustom
argument_list|(
name|file
argument_list|,
name|currentTerrainPng
argument_list|)
decl_stmt|;
try|try
block|{
name|initAtlas
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentTerrainPng
operator|!=
literal|null
condition|)
block|{
comment|// Disable animations for non-standard texture packs
name|animations
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|registerAnimations
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to load texture atlas!"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
if|if
condition|(
name|currentTerrainPng
operator|!=
literal|null
condition|)
block|{
comment|// We can use non-standard "terrain.png" to fill in
comment|// missing custom "rock.png", "water.png", and "dirt.png" textures
comment|// (textures used for map sides, edges, and loading backgrounds)
if|if
condition|(
name|customSideBlock
operator|==
literal|null
condition|)
block|{
name|customSideBlock
operator|=
name|textureAtlas
operator|.
name|get
argument_list|(
name|Block
operator|.
name|BEDROCK
operator|.
name|textureId
argument_list|)
expr_stmt|;
name|loadCustom
argument_list|(
name|Textures
operator|.
name|MAP_SIDE
argument_list|,
name|customSideBlock
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|customEdgeBlock
operator|==
literal|null
condition|)
block|{
name|customEdgeBlock
operator|=
name|textureAtlas
operator|.
name|get
argument_list|(
name|Block
operator|.
name|WATER
operator|.
name|textureId
argument_list|)
expr_stmt|;
name|loadCustom
argument_list|(
name|Textures
operator|.
name|MAP_EDGE
argument_list|,
name|customEdgeBlock
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|customDirtPng
operator|==
literal|null
condition|)
block|{
name|customDirtPng
operator|=
name|textureAtlas
operator|.
name|get
argument_list|(
name|Block
operator|.
name|DIRT
operator|.
name|textureId
argument_list|)
expr_stmt|;
name|loadCustom
argument_list|(
name|Textures
operator|.
name|LOADING_BACKGROUND
argument_list|,
name|customDirtPng
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|id
return|;
default|default:
return|return
name|loadDefault
argument_list|(
name|file
argument_list|)
return|;
block|}
block|}
name|int
name|loadCustom
parameter_list|(
name|String
name|file
parameter_list|,
name|BufferedImage
name|img
parameter_list|)
block|{
name|int
name|id
decl_stmt|;
if|if
condition|(
name|img
operator|!=
literal|null
condition|)
block|{
name|id
operator|=
name|load
argument_list|(
name|img
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|id
operator|=
name|loadDefault
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|textures
operator|.
name|put
argument_list|(
name|file
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
name|int
name|loadDefault
parameter_list|(
name|String
name|file
parameter_list|)
block|{
try|try
block|{
name|idBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|GL11
operator|.
name|glGenTextures
argument_list|(
name|idBuffer
argument_list|)
expr_stmt|;
name|int
name|textureID
init|=
name|idBuffer
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
literal|".png"
argument_list|)
condition|)
block|{
if|if
condition|(
name|file
operator|.
name|startsWith
argument_list|(
literal|"##"
argument_list|)
condition|)
block|{
name|load
argument_list|(
name|load1
argument_list|(
name|loadImageFast
argument_list|(
name|TextureManager
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|file
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|textureID
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|load
argument_list|(
name|loadImageFast
argument_list|(
name|TextureManager
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|,
name|textureID
argument_list|)
expr_stmt|;
block|}
name|textures
operator|.
name|put
argument_list|(
name|file
argument_list|,
name|textureID
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot load texture from "
operator|+
name|file
operator|+
literal|": unsupported format."
argument_list|)
throw|;
block|}
return|return
name|textureID
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to load texture"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|BufferedImage
name|loadImageFast
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ImageIO
operator|.
name|read
argument_list|(
name|inputStream
argument_list|)
return|;
block|}
specifier|private
name|BufferedImage
name|loadImageFromZip
parameter_list|(
name|ZipFile
name|zip
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|properName
init|=
name|fileName
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|fileName
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|fileName
operator|.
name|length
argument_list|()
argument_list|)
else|:
name|fileName
decl_stmt|;
name|ZipEntry
name|entry
init|=
name|zip
operator|.
name|getEntry
argument_list|(
name|properName
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
return|return
name|loadImageFast
argument_list|(
name|zip
operator|.
name|getInputStream
argument_list|(
name|entry
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|void
name|reloadTextures
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|settings
operator|.
name|minecraft
operator|.
name|networkManager
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|NetworkPlayer
name|p
range|:
name|settings
operator|.
name|minecraft
operator|.
name|networkManager
operator|.
name|getPlayers
argument_list|()
control|)
block|{
name|p
operator|.
name|forceTextureReload
argument_list|()
expr_stmt|;
block|}
name|settings
operator|.
name|minecraft
operator|.
name|player
operator|.
name|forceTextureReload
argument_list|()
expr_stmt|;
block|}
name|settings
operator|.
name|minecraft
operator|.
name|fontRenderer
operator|=
operator|new
name|FontRenderer
argument_list|(
name|settings
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// Force to reload custom side/edge textures from the atlas, while keeping block IDs same.
name|load
argument_list|(
name|Textures
operator|.
name|TERRAIN
argument_list|)
expr_stmt|;
name|setSideBlock
argument_list|(
name|sideBlockId
argument_list|)
expr_stmt|;
name|setEdgeBlock
argument_list|(
name|edgeBlockId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|loadTexturePack
parameter_list|(
specifier|final
name|String
name|file
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
literal|".zip"
argument_list|)
condition|)
block|{
name|useDefaultTextures
argument_list|()
expr_stmt|;
try|try
init|(
name|ZipFile
name|zip
init|=
operator|new
name|ZipFile
argument_list|(
operator|new
name|File
argument_list|(
name|minecraftFolder
argument_list|,
literal|"texturepacks/"
operator|+
name|file
argument_list|)
argument_list|)
init|)
block|{
name|currentTerrainPng
operator|=
name|loadImageFromZip
argument_list|(
name|zip
argument_list|,
literal|"terrain.png"
argument_list|)
expr_stmt|;
name|customRainPng
operator|=
name|loadImageFromZip
argument_list|(
name|zip
argument_list|,
literal|"rain.png"
argument_list|)
expr_stmt|;
name|customGUI
operator|=
name|loadImageFromZip
argument_list|(
name|zip
argument_list|,
literal|"gui.png"
argument_list|)
expr_stmt|;
name|customIcons
operator|=
name|loadImageFromZip
argument_list|(
name|zip
argument_list|,
literal|"icons.png"
argument_list|)
expr_stmt|;
name|customFont
operator|=
name|loadImageFromZip
argument_list|(
name|zip
argument_list|,
literal|"default.png"
argument_list|)
expr_stmt|;
name|customSnow
operator|=
name|loadImageFromZip
argument_list|(
name|zip
argument_list|,
literal|"snow.png"
argument_list|)
expr_stmt|;
name|customChicken
operator|=
name|loadImageFromZip
argument_list|(
name|zip
argument_list|,
literal|"chicken.png"
argument_list|)
expr_stmt|;
name|customCreeper
operator|=
name|loadImageFromZip
argument_list|(
name|zip
argument_list|,
literal|"creeper.png"
argument_list|)
expr_stmt|;
name|customCrocodile
operator|=
name|loadImageFromZip
argument_list|(
name|zip
argument_list|,
literal|"croc.png"
argument_list|)
expr_stmt|;
name|customHumanoid
operator|=
name|loadImageFromZip
argument_list|(
name|zip
argument_list|,
literal|"char.png"
argument_list|)
expr_stmt|;
name|customPig
operator|=
name|loadImageFromZip
argument_list|(
name|zip
argument_list|,
literal|"pig.png"
argument_list|)
expr_stmt|;
name|customPrinter
operator|=
name|loadImageFromZip
argument_list|(
name|zip
argument_list|,
literal|"printer.png"
argument_list|)
expr_stmt|;
name|customSheep
operator|=
name|loadImageFromZip
argument_list|(
name|zip
argument_list|,
literal|"sheep.png"
argument_list|)
expr_stmt|;
name|customSkeleton
operator|=
name|loadImageFromZip
argument_list|(
name|zip
argument_list|,
literal|"skeleton.png"
argument_list|)
expr_stmt|;
name|customSpider
operator|=
name|loadImageFromZip
argument_list|(
name|zip
argument_list|,
literal|"spider.png"
argument_list|)
expr_stmt|;
name|customZombie
operator|=
name|loadImageFromZip
argument_list|(
name|zip
argument_list|,
literal|"zombie.png"
argument_list|)
expr_stmt|;
name|customClouds
operator|=
name|loadImageFromZip
argument_list|(
name|zip
argument_list|,
literal|"clouds.png"
argument_list|)
expr_stmt|;
block|}
block|}
name|reloadTextures
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|registerAnimations
parameter_list|()
block|{
name|animations
operator|.
name|clear
argument_list|()
expr_stmt|;
name|animations
operator|.
name|add
argument_list|(
operator|new
name|TextureWaterFX
argument_list|()
argument_list|)
expr_stmt|;
name|animations
operator|.
name|add
argument_list|(
operator|new
name|TextureLavaFX
argument_list|()
argument_list|)
expr_stmt|;
name|animations
operator|.
name|add
argument_list|(
operator|new
name|TextureFireFX
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unloadTexture
parameter_list|(
name|String
name|textureName
parameter_list|)
block|{
if|if
condition|(
name|textures
operator|.
name|containsKey
argument_list|(
name|textureName
argument_list|)
condition|)
block|{
name|LogUtil
operator|.
name|logInfo
argument_list|(
literal|"Unloaded texture: "
operator|+
name|textureName
argument_list|)
expr_stmt|;
name|GL11
operator|.
name|glDeleteTextures
argument_list|(
name|textures
operator|.
name|remove
argument_list|(
name|textureName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unloadTexture
parameter_list|(
name|int
name|textureId
parameter_list|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|textures
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|textureId
argument_list|)
condition|)
block|{
comment|// For logging purposes, find the names of all textures being unloaded.
name|LogUtil
operator|.
name|logInfo
argument_list|(
literal|"Unloaded texture: "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|found
condition|)
block|{
comment|// If any were found, remove them.
while|while
condition|(
name|textures
operator|.
name|values
argument_list|()
operator|.
name|remove
argument_list|(
name|textureId
argument_list|)
condition|)
block|{
block|}
name|GL11
operator|.
name|glDeleteTextures
argument_list|(
name|textureId
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Resets all custom textures to their defaults.
comment|// Frees all previosly-loaded textures (including the font).
comment|// Does *not* affect block types for map edges/sides.
comment|// Use resetSideBlock/resetEdgeBlock for that.
specifier|public
name|void
name|useDefaultTextures
parameter_list|()
block|{
name|currentTerrainPng
operator|=
literal|null
expr_stmt|;
name|customEdgeBlock
operator|=
literal|null
expr_stmt|;
name|customSideBlock
operator|=
literal|null
expr_stmt|;
name|customDirtPng
operator|=
literal|null
expr_stmt|;
name|customRainPng
operator|=
literal|null
expr_stmt|;
name|customGUI
operator|=
literal|null
expr_stmt|;
name|customIcons
operator|=
literal|null
expr_stmt|;
name|customFont
operator|=
literal|null
expr_stmt|;
name|customClouds
operator|=
literal|null
expr_stmt|;
name|unloadTexture
argument_list|(
name|Textures
operator|.
name|TERRAIN
argument_list|)
expr_stmt|;
name|unloadTexture
argument_list|(
name|Textures
operator|.
name|MAP_EDGE
argument_list|)
expr_stmt|;
name|unloadTexture
argument_list|(
name|Textures
operator|.
name|MAP_SIDE
argument_list|)
expr_stmt|;
name|unloadTexture
argument_list|(
name|Textures
operator|.
name|LOADING_BACKGROUND
argument_list|)
expr_stmt|;
name|unloadTexture
argument_list|(
name|Textures
operator|.
name|RAIN
argument_list|)
expr_stmt|;
name|unloadTexture
argument_list|(
name|Textures
operator|.
name|GUI
argument_list|)
expr_stmt|;
name|unloadTexture
argument_list|(
name|Textures
operator|.
name|ICONS
argument_list|)
expr_stmt|;
name|unloadTexture
argument_list|(
name|Textures
operator|.
name|FONT
argument_list|)
expr_stmt|;
name|unloadTexture
argument_list|(
name|Textures
operator|.
name|CLOUDS
argument_list|)
expr_stmt|;
name|customChicken
operator|=
literal|null
expr_stmt|;
name|customCreeper
operator|=
literal|null
expr_stmt|;
name|customCrocodile
operator|=
literal|null
expr_stmt|;
name|customHumanoid
operator|=
literal|null
expr_stmt|;
name|customPig
operator|=
literal|null
expr_stmt|;
name|customPrinter
operator|=
literal|null
expr_stmt|;
name|customSheep
operator|=
literal|null
expr_stmt|;
name|customSkeleton
operator|=
literal|null
expr_stmt|;
name|customSpider
operator|=
literal|null
expr_stmt|;
name|customZombie
operator|=
literal|null
expr_stmt|;
name|unloadTexture
argument_list|(
name|Textures
operator|.
name|MOB_CHICKEN
argument_list|)
expr_stmt|;
name|unloadTexture
argument_list|(
name|Textures
operator|.
name|MOB_CREEPER
argument_list|)
expr_stmt|;
name|unloadTexture
argument_list|(
name|Textures
operator|.
name|MOB_CROC
argument_list|)
expr_stmt|;
name|unloadTexture
argument_list|(
name|Textures
operator|.
name|MOB_HUMANOID
argument_list|)
expr_stmt|;
name|unloadTexture
argument_list|(
name|Textures
operator|.
name|MOB_PIG
argument_list|)
expr_stmt|;
name|unloadTexture
argument_list|(
name|Textures
operator|.
name|MOB_PRINTER
argument_list|)
expr_stmt|;
name|unloadTexture
argument_list|(
name|Textures
operator|.
name|MOB_SHEEP
argument_list|)
expr_stmt|;
name|unloadTexture
argument_list|(
name|Textures
operator|.
name|MOB_SKELETON
argument_list|)
expr_stmt|;
name|unloadTexture
argument_list|(
name|Textures
operator|.
name|MOB_SPIDER
argument_list|)
expr_stmt|;
name|unloadTexture
argument_list|(
name|Textures
operator|.
name|MOB_ZOMBIE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getSideBlock
parameter_list|()
block|{
return|return
name|sideBlockId
return|;
block|}
specifier|public
name|void
name|setSideBlock
parameter_list|(
name|int
name|blockId
parameter_list|)
block|{
name|sideBlockId
operator|=
name|blockId
expr_stmt|;
if|if
condition|(
name|blockId
operator|<
literal|0
operator|||
name|blockId
operator|>
name|Block
operator|.
name|blocks
operator|.
name|length
condition|)
block|{
name|resetSideBlock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|int
name|texId
init|=
name|Block
operator|.
name|blocks
index|[
name|blockId
index|]
operator|.
name|textureId
decl_stmt|;
name|unloadTexture
argument_list|(
name|Textures
operator|.
name|MAP_SIDE
argument_list|)
expr_stmt|;
name|customSideBlock
operator|=
name|textureAtlas
operator|.
name|get
argument_list|(
name|texId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|resetSideBlock
parameter_list|()
block|{
name|sideBlockId
operator|=
operator|-
literal|1
expr_stmt|;
name|customSideBlock
operator|=
literal|null
expr_stmt|;
name|unloadTexture
argument_list|(
name|Textures
operator|.
name|MAP_SIDE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getEdgeBlock
parameter_list|()
block|{
return|return
name|edgeBlockId
return|;
block|}
specifier|public
name|void
name|setEdgeBlock
parameter_list|(
name|int
name|blockId
parameter_list|)
block|{
name|edgeBlockId
operator|=
name|blockId
expr_stmt|;
if|if
condition|(
name|blockId
operator|<
literal|0
operator|||
name|blockId
operator|>
name|Block
operator|.
name|blocks
operator|.
name|length
condition|)
block|{
name|resetEdgeBlock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|int
name|texId
init|=
name|Block
operator|.
name|blocks
index|[
name|blockId
index|]
operator|.
name|textureId
decl_stmt|;
name|unloadTexture
argument_list|(
name|Textures
operator|.
name|MAP_EDGE
argument_list|)
expr_stmt|;
name|customEdgeBlock
operator|=
name|textureAtlas
operator|.
name|get
argument_list|(
name|texId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|resetEdgeBlock
parameter_list|()
block|{
name|edgeBlockId
operator|=
operator|-
literal|1
expr_stmt|;
name|customEdgeBlock
operator|=
literal|null
expr_stmt|;
name|unloadTexture
argument_list|(
name|Textures
operator|.
name|MAP_EDGE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setTerrainTexture
parameter_list|(
name|BufferedImage
name|newImage
parameter_list|)
block|{
name|currentTerrainPng
operator|=
name|newImage
expr_stmt|;
name|unloadTexture
argument_list|(
name|Textures
operator|.
name|TERRAIN
argument_list|)
expr_stmt|;
name|unloadTexture
argument_list|(
name|Textures
operator|.
name|MAP_EDGE
argument_list|)
expr_stmt|;
name|unloadTexture
argument_list|(
name|Textures
operator|.
name|MAP_SIDE
argument_list|)
expr_stmt|;
name|load
argument_list|(
name|Textures
operator|.
name|TERRAIN
argument_list|)
expr_stmt|;
name|setSideBlock
argument_list|(
name|sideBlockId
argument_list|)
expr_stmt|;
name|setEdgeBlock
argument_list|(
name|edgeBlockId
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

