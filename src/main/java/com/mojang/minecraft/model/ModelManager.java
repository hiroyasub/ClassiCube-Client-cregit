begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|model
package|;
end_package

begin_import
import|import
name|com
operator|.
name|mojang
operator|.
name|minecraft
operator|.
name|SessionData
import|;
end_import

begin_comment
comment|/**  * Manages the Models built into the Client.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ModelManager
block|{
specifier|private
name|HumanoidModel
name|human
init|=
operator|new
name|HumanoidModel
argument_list|(
literal|0.0F
argument_list|)
decl_stmt|;
specifier|private
name|HumanoidModel
name|armoredHuman
init|=
operator|new
name|HumanoidModel
argument_list|(
literal|1.0F
argument_list|)
decl_stmt|;
specifier|private
name|CreeperModel
name|creeper
init|=
operator|new
name|CreeperModel
argument_list|()
decl_stmt|;
specifier|private
name|SkeletonModel
name|skeleton
init|=
operator|new
name|SkeletonModel
argument_list|()
decl_stmt|;
specifier|private
name|ZombieModel
name|zombie
init|=
operator|new
name|ZombieModel
argument_list|()
decl_stmt|;
specifier|private
name|AnimalModel
name|pig
init|=
operator|new
name|PigModel
argument_list|()
decl_stmt|;
specifier|private
name|AnimalModel
name|sheep
init|=
operator|new
name|SheepModel
argument_list|()
decl_stmt|;
specifier|private
name|SpiderModel
name|spider
init|=
operator|new
name|SpiderModel
argument_list|()
decl_stmt|;
specifier|private
name|SheepFurModel
name|sheepFur
init|=
operator|new
name|SheepFurModel
argument_list|()
decl_stmt|;
specifier|private
name|ChickenModel
name|chicken
init|=
operator|new
name|ChickenModel
argument_list|()
decl_stmt|;
specifier|private
name|PrinterModel
name|printer
init|=
operator|new
name|PrinterModel
argument_list|()
decl_stmt|;
specifier|private
name|CrocModel
name|croc
init|=
operator|new
name|CrocModel
argument_list|()
decl_stmt|;
comment|/** 	 * Gets a model from its name. You can also get block models by providing 	 * their ID. 	 *  	 * @param modelName 	 *			String representing the name of the model 	 * @return The Model with the name that was requested or null if not found. 	 */
specifier|public
specifier|final
name|Model
name|getModel
parameter_list|(
name|String
name|modelName
parameter_list|)
block|{
comment|// Try to match with a Block ID
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|SessionData
operator|.
name|allowedBlocks
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|modelName
operator|.
name|equals
argument_list|(
literal|""
operator|+
name|i
argument_list|)
condition|)
block|{
return|return
operator|new
name|BlockModel
argument_list|()
return|;
block|}
block|}
return|return
name|modelName
operator|.
name|equals
argument_list|(
literal|"humanoid"
argument_list|)
condition|?
name|human
else|:
name|modelName
operator|.
name|equals
argument_list|(
literal|"humanoid.armor"
argument_list|)
condition|?
name|armoredHuman
else|:
name|modelName
operator|.
name|equals
argument_list|(
literal|"creeper"
argument_list|)
condition|?
name|creeper
else|:
name|modelName
operator|.
name|equals
argument_list|(
literal|"chicken"
argument_list|)
condition|?
name|chicken
else|:
name|modelName
operator|.
name|equals
argument_list|(
literal|"skeleton"
argument_list|)
condition|?
name|skeleton
else|:
name|modelName
operator|.
name|equals
argument_list|(
literal|"printer"
argument_list|)
condition|?
name|printer
else|:
name|modelName
operator|.
name|equals
argument_list|(
literal|"croc"
argument_list|)
condition|?
name|croc
else|:
name|modelName
operator|.
name|equals
argument_list|(
literal|"zombie"
argument_list|)
condition|?
name|zombie
else|:
name|modelName
operator|.
name|equals
argument_list|(
literal|"pig"
argument_list|)
condition|?
name|pig
else|:
name|modelName
operator|.
name|equals
argument_list|(
literal|"sheep"
argument_list|)
condition|?
name|sheep
else|:
name|modelName
operator|.
name|equals
argument_list|(
literal|"spider"
argument_list|)
condition|?
name|spider
else|:
name|modelName
operator|.
name|equals
argument_list|(
literal|"sheep.fur"
argument_list|)
condition|?
name|sheepFur
else|:
literal|null
return|;
block|}
block|}
end_class

end_unit

