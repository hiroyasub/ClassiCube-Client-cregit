begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * $ProjectName$  * $ProjectRevision$  * -----------------------------------------------------------  * $Id: CachedUrlStream.java,v 1.1 2003/04/10 19:48:22 jarnbjo Exp $  * -----------------------------------------------------------  *  * $Author: jarnbjo $  *  * Description:  *  * Copyright 2002-2003 Tor-Einar Jarnbjo  * -----------------------------------------------------------  *  * Change History  * -----------------------------------------------------------  * $Log: CachedUrlStream.java,v $  * Revision 1.1  2003/04/10 19:48:22  jarnbjo  * no message  *  *  */
end_comment

begin_package
package|package
name|de
operator|.
name|jarnbjo
operator|.
name|ogg
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * Implementation of the<code>PhysicalOggStream</code> interface for reading  * and caching an Ogg stream from a URL. This class reads the data as fast as  * possible from the URL, caches it locally either in memory or on disk, and  * supports seeking within the available data.  */
end_comment

begin_class
specifier|public
class|class
name|CachedUrlStream
implements|implements
name|PhysicalOggStream
block|{
specifier|public
class|class
name|LoaderThread
implements|implements
name|Runnable
block|{
specifier|private
name|InputStream
name|source
decl_stmt|;
specifier|private
name|RandomAccessFile
name|drain
decl_stmt|;
specifier|private
name|byte
index|[]
name|memoryCache
decl_stmt|;
specifier|private
name|boolean
name|bosDone
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|pageNumber
decl_stmt|;
specifier|public
name|LoaderThread
parameter_list|(
name|InputStream
name|source
parameter_list|,
name|RandomAccessFile
name|drain
parameter_list|,
name|byte
index|[]
name|memoryCache
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|drain
operator|=
name|drain
expr_stmt|;
name|this
operator|.
name|memoryCache
operator|=
name|memoryCache
expr_stmt|;
block|}
specifier|public
name|boolean
name|isBosDone
parameter_list|()
block|{
return|return
name|bosDone
return|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|boolean
name|eos
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|eos
condition|)
block|{
name|OggPage
name|op
init|=
name|OggPage
operator|.
name|create
argument_list|(
name|source
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|drainLock
init|)
block|{
name|int
name|listSize
init|=
name|pageOffsets
operator|.
name|size
argument_list|()
decl_stmt|;
name|long
name|pos
init|=
name|listSize
operator|>
literal|0
condition|?
operator|(
operator|(
name|Long
operator|)
name|pageOffsets
operator|.
name|get
argument_list|(
name|listSize
operator|-
literal|1
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
operator|+
operator|(
operator|(
name|Long
operator|)
name|pageLengths
operator|.
name|get
argument_list|(
name|listSize
operator|-
literal|1
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
else|:
literal|0
decl_stmt|;
name|byte
index|[]
name|arr1
init|=
name|op
operator|.
name|getHeader
argument_list|()
decl_stmt|;
name|byte
index|[]
name|arr2
init|=
name|op
operator|.
name|getSegmentTable
argument_list|()
decl_stmt|;
name|byte
index|[]
name|arr3
init|=
name|op
operator|.
name|getData
argument_list|()
decl_stmt|;
if|if
condition|(
name|drain
operator|!=
literal|null
condition|)
block|{
name|drain
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|drain
operator|.
name|write
argument_list|(
name|arr1
argument_list|)
expr_stmt|;
name|drain
operator|.
name|write
argument_list|(
name|arr2
argument_list|)
expr_stmt|;
name|drain
operator|.
name|write
argument_list|(
name|arr3
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|arr1
argument_list|,
literal|0
argument_list|,
name|memoryCache
argument_list|,
operator|(
name|int
operator|)
name|pos
argument_list|,
name|arr1
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|arr2
argument_list|,
literal|0
argument_list|,
name|memoryCache
argument_list|,
operator|(
name|int
operator|)
name|pos
operator|+
name|arr1
operator|.
name|length
argument_list|,
name|arr2
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|arr3
argument_list|,
literal|0
argument_list|,
name|memoryCache
argument_list|,
operator|(
name|int
operator|)
name|pos
operator|+
name|arr1
operator|.
name|length
operator|+
name|arr2
operator|.
name|length
argument_list|,
name|arr3
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|pageOffsets
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
name|pos
argument_list|)
argument_list|)
expr_stmt|;
name|pageLengths
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
name|arr1
operator|.
name|length
operator|+
name|arr2
operator|.
name|length
operator|+
name|arr3
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|op
operator|.
name|isBos
argument_list|()
condition|)
block|{
name|bosDone
operator|=
literal|true
expr_stmt|;
comment|// System.out.println("bosDone=true;");
block|}
if|if
condition|(
name|op
operator|.
name|isEos
argument_list|()
condition|)
block|{
name|eos
operator|=
literal|true
expr_stmt|;
block|}
name|LogicalOggStreamImpl
name|los
init|=
operator|(
name|LogicalOggStreamImpl
operator|)
name|getLogicalStream
argument_list|(
name|op
operator|.
name|getStreamSerialNumber
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|los
operator|==
literal|null
condition|)
block|{
name|los
operator|=
operator|new
name|LogicalOggStreamImpl
argument_list|(
name|CachedUrlStream
operator|.
name|this
argument_list|)
expr_stmt|;
name|logicalStreams
operator|.
name|put
argument_list|(
operator|new
name|Integer
argument_list|(
name|op
operator|.
name|getStreamSerialNumber
argument_list|()
argument_list|)
argument_list|,
name|los
argument_list|)
expr_stmt|;
name|los
operator|.
name|checkFormat
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|los
operator|.
name|addPageNumberMapping
argument_list|(
name|pageNumber
argument_list|)
expr_stmt|;
name|los
operator|.
name|addGranulePosition
argument_list|(
name|op
operator|.
name|getAbsoluteGranulePosition
argument_list|()
argument_list|)
expr_stmt|;
name|pageNumber
operator|++
expr_stmt|;
name|cacheLength
operator|=
name|op
operator|.
name|getAbsoluteGranulePosition
argument_list|()
expr_stmt|;
comment|// System.out.println("read page: "+pageNumber);
block|}
block|}
catch|catch
parameter_list|(
name|EndOfOggStreamException
name|e
parameter_list|)
block|{
comment|// ok
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
specifier|private
name|URLConnection
name|source
decl_stmt|;
specifier|private
name|InputStream
name|sourceStream
decl_stmt|;
specifier|private
name|Object
name|drainLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|RandomAccessFile
name|drain
decl_stmt|;
specifier|private
name|byte
index|[]
name|memoryCache
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|pageOffsets
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|pageLengths
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|long
name|cacheLength
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|LogicalOggStreamImpl
argument_list|>
name|logicalStreams
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|LogicalOggStreamImpl
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|LoaderThread
name|loaderThread
decl_stmt|;
comment|/**      * Creates an instance of this class, using a memory cache.      */
specifier|public
name|CachedUrlStream
parameter_list|(
name|URL
name|source
parameter_list|)
throws|throws
name|OggFormatException
throws|,
name|IOException
block|{
name|this
argument_list|(
name|source
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates an instance of this class, using the specified file as cache. The      * file is not automatically deleted when this class is disposed.      */
specifier|public
name|CachedUrlStream
parameter_list|(
name|URL
name|source
parameter_list|,
name|RandomAccessFile
name|drain
parameter_list|)
throws|throws
name|OggFormatException
throws|,
name|IOException
block|{
name|this
operator|.
name|source
operator|=
name|source
operator|.
name|openConnection
argument_list|()
expr_stmt|;
if|if
condition|(
name|drain
operator|==
literal|null
condition|)
block|{
name|int
name|contentLength
init|=
name|this
operator|.
name|source
operator|.
name|getContentLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentLength
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The URLConncetion's content length must be set when operating with a in-memory cache."
argument_list|)
throw|;
block|}
name|memoryCache
operator|=
operator|new
name|byte
index|[
name|contentLength
index|]
expr_stmt|;
block|}
name|this
operator|.
name|drain
operator|=
name|drain
expr_stmt|;
name|this
operator|.
name|sourceStream
operator|=
name|this
operator|.
name|source
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|loaderThread
operator|=
operator|new
name|LoaderThread
argument_list|(
name|sourceStream
argument_list|,
name|drain
argument_list|,
name|memoryCache
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|(
name|loaderThread
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|loaderThread
operator|.
name|isBosDone
argument_list|()
operator|||
name|pageOffsets
operator|.
name|size
argument_list|()
operator|<
literal|20
condition|)
block|{
comment|// System.out.print("pageOffsets.size(): "+pageOffsets.size()+"\r");
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
block|}
block|}
comment|// System.out.println();
comment|// System.out.println("caching "+pageOffsets.size()+"/20 pages\r");
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closed
operator|=
literal|true
expr_stmt|;
name|sourceStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|long
name|getCacheLength
parameter_list|()
block|{
return|return
name|cacheLength
return|;
block|}
specifier|private
name|LogicalOggStream
name|getLogicalStream
parameter_list|(
name|int
name|serialNumber
parameter_list|)
block|{
return|return
operator|(
name|LogicalOggStream
operator|)
name|logicalStreams
operator|.
name|get
argument_list|(
operator|new
name|Integer
argument_list|(
name|serialNumber
argument_list|)
argument_list|)
return|;
block|}
comment|/*      * private OggPage getNextPage() throws EndOfOggStreamException,      * IOException, OggFormatException { return getNextPage(false); }      *      * private OggPage getNextPage(boolean skipData) throws      * EndOfOggStreamException, IOException, OggFormatException { return      * OggPage.create(sourceStream, skipData); }      */
specifier|public
name|Collection
argument_list|<
name|LogicalOggStreamImpl
argument_list|>
name|getLogicalStreams
parameter_list|()
block|{
return|return
name|logicalStreams
operator|.
name|values
argument_list|()
return|;
block|}
specifier|public
name|OggPage
name|getOggPage
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|drainLock
init|)
block|{
name|Long
name|offset
init|=
operator|(
name|Long
operator|)
name|pageOffsets
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|Long
name|length
init|=
operator|(
name|Long
operator|)
name|pageLengths
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|offset
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|drain
operator|!=
literal|null
condition|)
block|{
name|drain
operator|.
name|seek
argument_list|(
name|offset
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|OggPage
operator|.
name|create
argument_list|(
name|drain
argument_list|)
return|;
block|}
else|else
block|{
name|byte
index|[]
name|tmpArray
init|=
operator|new
name|byte
index|[
name|length
operator|.
name|intValue
argument_list|()
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|memoryCache
argument_list|,
name|offset
operator|.
name|intValue
argument_list|()
argument_list|,
name|tmpArray
argument_list|,
literal|0
argument_list|,
name|length
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|OggPage
operator|.
name|create
argument_list|(
name|tmpArray
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|public
name|boolean
name|isOpen
parameter_list|()
block|{
return|return
operator|!
name|closed
return|;
block|}
specifier|public
name|boolean
name|isSeekable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|setTime
parameter_list|(
name|long
name|granulePosition
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Iterator
argument_list|<
name|LogicalOggStreamImpl
argument_list|>
name|iter
init|=
name|logicalStreams
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|LogicalOggStream
name|los
init|=
operator|(
name|LogicalOggStream
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|los
operator|.
name|setTime
argument_list|(
name|granulePosition
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

