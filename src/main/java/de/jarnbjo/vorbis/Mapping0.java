begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * $ProjectName$  * $ProjectRevision$  * -----------------------------------------------------------  * $Id: Mapping0.java,v 1.2 2003/03/16 01:11:12 jarnbjo Exp $  * -----------------------------------------------------------  *  * $Author: jarnbjo $  *  * Description:  *  * Copyright 2002-2003 Tor-Einar Jarnbjo  * -----------------------------------------------------------  *  * Change History  * -----------------------------------------------------------  * $Log: Mapping0.java,v $  * Revision 1.2  2003/03/16 01:11:12  jarnbjo  * no message  *  *  */
end_comment

begin_package
package|package
name|de
operator|.
name|jarnbjo
operator|.
name|vorbis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|de
operator|.
name|jarnbjo
operator|.
name|util
operator|.
name|io
operator|.
name|BitInputStream
import|;
end_import

begin_class
class|class
name|Mapping0
extends|extends
name|Mapping
block|{
specifier|private
name|int
index|[]
name|magnitudes
decl_stmt|,
name|angles
decl_stmt|,
name|mux
decl_stmt|,
name|submapFloors
decl_stmt|,
name|submapResidues
decl_stmt|;
specifier|protected
name|Mapping0
parameter_list|(
name|VorbisStream
name|vorbis
parameter_list|,
name|BitInputStream
name|source
parameter_list|,
name|SetupHeader
name|header
parameter_list|)
throws|throws
name|VorbisFormatException
throws|,
name|IOException
block|{
name|int
name|submaps
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|source
operator|.
name|getBit
argument_list|()
condition|)
block|{
name|submaps
operator|=
name|source
operator|.
name|getInt
argument_list|(
literal|4
argument_list|)
operator|+
literal|1
expr_stmt|;
block|}
comment|// System.out.println("submaps: "+submaps);
name|int
name|channels
init|=
name|vorbis
operator|.
name|getIdentificationHeader
argument_list|()
operator|.
name|getChannels
argument_list|()
decl_stmt|;
name|int
name|ilogChannels
init|=
name|Util
operator|.
name|ilog
argument_list|(
name|channels
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// System.out.println("ilogChannels: "+ilogChannels);
if|if
condition|(
name|source
operator|.
name|getBit
argument_list|()
condition|)
block|{
name|int
name|couplingSteps
init|=
name|source
operator|.
name|getInt
argument_list|(
literal|8
argument_list|)
operator|+
literal|1
decl_stmt|;
name|magnitudes
operator|=
operator|new
name|int
index|[
name|couplingSteps
index|]
expr_stmt|;
name|angles
operator|=
operator|new
name|int
index|[
name|couplingSteps
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|couplingSteps
condition|;
name|i
operator|++
control|)
block|{
name|magnitudes
index|[
name|i
index|]
operator|=
name|source
operator|.
name|getInt
argument_list|(
name|ilogChannels
argument_list|)
expr_stmt|;
name|angles
index|[
name|i
index|]
operator|=
name|source
operator|.
name|getInt
argument_list|(
name|ilogChannels
argument_list|)
expr_stmt|;
if|if
condition|(
name|magnitudes
index|[
name|i
index|]
operator|==
name|angles
index|[
name|i
index|]
operator|||
name|magnitudes
index|[
name|i
index|]
operator|>=
name|channels
operator|||
name|angles
index|[
name|i
index|]
operator|>=
name|channels
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|magnitudes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|angles
index|[
name|i
index|]
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|VorbisFormatException
argument_list|(
literal|"The channel magnitude and/or angle mismatch."
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|magnitudes
operator|=
operator|new
name|int
index|[
literal|0
index|]
expr_stmt|;
name|angles
operator|=
operator|new
name|int
index|[
literal|0
index|]
expr_stmt|;
block|}
if|if
condition|(
name|source
operator|.
name|getInt
argument_list|(
literal|2
argument_list|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|VorbisFormatException
argument_list|(
literal|"A reserved mapping field has an invalid value."
argument_list|)
throw|;
block|}
name|mux
operator|=
operator|new
name|int
index|[
name|channels
index|]
expr_stmt|;
if|if
condition|(
name|submaps
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|channels
condition|;
name|i
operator|++
control|)
block|{
name|mux
index|[
name|i
index|]
operator|=
name|source
operator|.
name|getInt
argument_list|(
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|mux
index|[
name|i
index|]
operator|>
name|submaps
condition|)
block|{
throw|throw
operator|new
name|VorbisFormatException
argument_list|(
literal|"A mapping mux value is higher than the number of submaps"
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|channels
condition|;
name|i
operator|++
control|)
block|{
name|mux
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|submapFloors
operator|=
operator|new
name|int
index|[
name|submaps
index|]
expr_stmt|;
name|submapResidues
operator|=
operator|new
name|int
index|[
name|submaps
index|]
expr_stmt|;
name|int
name|floorCount
init|=
name|header
operator|.
name|getFloors
argument_list|()
operator|.
name|length
decl_stmt|;
name|int
name|residueCount
init|=
name|header
operator|.
name|getResidues
argument_list|()
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|submaps
condition|;
name|i
operator|++
control|)
block|{
name|source
operator|.
name|getInt
argument_list|(
literal|8
argument_list|)
expr_stmt|;
comment|// discard time placeholder
name|submapFloors
index|[
name|i
index|]
operator|=
name|source
operator|.
name|getInt
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|submapResidues
index|[
name|i
index|]
operator|=
name|source
operator|.
name|getInt
argument_list|(
literal|8
argument_list|)
expr_stmt|;
if|if
condition|(
name|submapFloors
index|[
name|i
index|]
operator|>
name|floorCount
condition|)
block|{
throw|throw
operator|new
name|VorbisFormatException
argument_list|(
literal|"A mapping floor value is higher than the number of floors."
argument_list|)
throw|;
block|}
if|if
condition|(
name|submapResidues
index|[
name|i
index|]
operator|>
name|residueCount
condition|)
block|{
throw|throw
operator|new
name|VorbisFormatException
argument_list|(
literal|"A mapping residue value is higher than the number of residues."
argument_list|)
throw|;
block|}
block|}
block|}
specifier|protected
name|int
name|getType
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|protected
name|int
index|[]
name|getAngles
parameter_list|()
block|{
return|return
name|angles
return|;
block|}
specifier|protected
name|int
index|[]
name|getMagnitudes
parameter_list|()
block|{
return|return
name|magnitudes
return|;
block|}
specifier|protected
name|int
index|[]
name|getMux
parameter_list|()
block|{
return|return
name|mux
return|;
block|}
specifier|protected
name|int
index|[]
name|getSubmapFloors
parameter_list|()
block|{
return|return
name|submapFloors
return|;
block|}
specifier|protected
name|int
index|[]
name|getSubmapResidues
parameter_list|()
block|{
return|return
name|submapResidues
return|;
block|}
specifier|protected
name|int
name|getCouplingSteps
parameter_list|()
block|{
return|return
name|angles
operator|.
name|length
return|;
block|}
specifier|protected
name|int
name|getSubmaps
parameter_list|()
block|{
return|return
name|submapFloors
operator|.
name|length
return|;
block|}
block|}
end_class

end_unit

