begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|de
operator|.
name|jarnbjo
operator|.
name|vorbis
package|;
end_package

begin_comment
comment|/*  * $ProjectName$  * $ProjectRevision$  * -----------------------------------------------------------  * $Id: VorbisAudioFileReader.java,v 1.1 2003/08/08 19:48:22 jarnbjo Exp $  * -----------------------------------------------------------  *  * $Author: jarnbjo $  *  * Description:  *  * Copyright 2002-2003 Tor-Einar Jarnbjo  * -----------------------------------------------------------  *  * Change History  * -----------------------------------------------------------  * $Log: VorbisAudioFileReader.java,v $  *  */
end_comment

begin_import
import|import
name|de
operator|.
name|jarnbjo
operator|.
name|ogg
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sound
operator|.
name|sampled
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sound
operator|.
name|sampled
operator|.
name|spi
operator|.
name|AudioFileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_class
specifier|public
class|class
name|VorbisAudioFileReader
extends|extends
name|AudioFileReader
block|{
specifier|public
specifier|static
class|class
name|VorbisFormatType
extends|extends
name|AudioFileFormat
operator|.
name|Type
block|{
specifier|private
specifier|static
specifier|final
name|VorbisFormatType
name|instance
init|=
operator|new
name|VorbisFormatType
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|AudioFileFormat
operator|.
name|Type
name|getInstance
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
specifier|private
name|VorbisFormatType
parameter_list|()
block|{
name|super
argument_list|(
literal|"VORBIS"
argument_list|,
literal|"ogg"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|VorbisInputStream
extends|extends
name|InputStream
block|{
specifier|private
name|VorbisStream
name|source
decl_stmt|;
specifier|public
name|VorbisInputStream
parameter_list|(
name|VorbisStream
name|source
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
return|;
block|}
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|source
operator|.
name|readPcm
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|EndOfOggStreamException
name|e
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
specifier|public
name|VorbisAudioFileReader
parameter_list|()
block|{
block|}
specifier|public
name|AudioFileFormat
name|getAudioFileFormat
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedAudioFileException
block|{
try|try
block|{
return|return
name|getAudioFileFormat
argument_list|(
operator|new
name|FileStream
argument_list|(
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"r"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OggFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedAudioFileException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|AudioFileFormat
name|getAudioFileFormat
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedAudioFileException
block|{
try|try
block|{
return|return
name|getAudioFileFormat
argument_list|(
operator|new
name|BasicStream
argument_list|(
name|stream
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OggFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedAudioFileException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|AudioFileFormat
name|getAudioFileFormat
parameter_list|(
name|PhysicalOggStream
name|oggStream
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedAudioFileException
block|{
try|try
block|{
name|Collection
argument_list|<
name|LogicalOggStreamImpl
argument_list|>
name|streams
init|=
name|oggStream
operator|.
name|getLogicalStreams
argument_list|()
decl_stmt|;
if|if
condition|(
name|streams
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|UnsupportedAudioFileException
argument_list|(
literal|"Only Ogg files with one logical Vorbis stream are supported."
argument_list|)
throw|;
block|}
name|LogicalOggStream
name|los
init|=
name|streams
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|los
operator|.
name|getFormat
argument_list|()
operator|.
name|equals
argument_list|(
name|LogicalOggStream
operator|.
name|FORMAT_VORBIS
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedAudioFileException
argument_list|(
literal|"Only Ogg files with one logical Vorbis stream are supported."
argument_list|)
throw|;
block|}
name|VorbisStream
name|vs
init|=
operator|new
name|VorbisStream
argument_list|(
name|los
argument_list|)
decl_stmt|;
name|AudioFormat
name|audioFormat
init|=
operator|new
name|AudioFormat
argument_list|(
operator|(
name|float
operator|)
name|vs
operator|.
name|getIdentificationHeader
argument_list|()
operator|.
name|getSampleRate
argument_list|()
argument_list|,
literal|16
argument_list|,
name|vs
operator|.
name|getIdentificationHeader
argument_list|()
operator|.
name|getChannels
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
operator|new
name|AudioFileFormat
argument_list|(
name|VorbisFormatType
operator|.
name|getInstance
argument_list|()
argument_list|,
name|audioFormat
argument_list|,
name|AudioSystem
operator|.
name|NOT_SPECIFIED
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OggFormatException
decl||
name|VorbisFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedAudioFileException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|AudioFileFormat
name|getAudioFileFormat
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedAudioFileException
block|{
try|try
block|{
return|return
name|getAudioFileFormat
argument_list|(
operator|new
name|UncachedUrlStream
argument_list|(
name|url
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OggFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedAudioFileException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|AudioInputStream
name|getAudioInputStream
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedAudioFileException
block|{
try|try
block|{
return|return
name|getAudioInputStream
argument_list|(
operator|new
name|FileStream
argument_list|(
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"r"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OggFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedAudioFileException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|AudioInputStream
name|getAudioInputStream
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedAudioFileException
block|{
try|try
block|{
return|return
name|getAudioInputStream
argument_list|(
operator|new
name|BasicStream
argument_list|(
name|stream
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OggFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedAudioFileException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|AudioInputStream
name|getAudioInputStream
parameter_list|(
name|PhysicalOggStream
name|oggStream
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedAudioFileException
block|{
try|try
block|{
name|Collection
argument_list|<
name|LogicalOggStreamImpl
argument_list|>
name|streams
init|=
name|oggStream
operator|.
name|getLogicalStreams
argument_list|()
decl_stmt|;
if|if
condition|(
name|streams
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|UnsupportedAudioFileException
argument_list|(
literal|"Only Ogg files with one logical Vorbis stream are supported."
argument_list|)
throw|;
block|}
name|LogicalOggStream
name|los
init|=
name|streams
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|los
operator|.
name|getFormat
argument_list|()
operator|.
name|equals
argument_list|(
name|LogicalOggStream
operator|.
name|FORMAT_VORBIS
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedAudioFileException
argument_list|(
literal|"Only Ogg files with one logical Vorbis stream are supported."
argument_list|)
throw|;
block|}
name|VorbisStream
name|vs
init|=
operator|new
name|VorbisStream
argument_list|(
name|los
argument_list|)
decl_stmt|;
name|AudioFormat
name|audioFormat
init|=
operator|new
name|AudioFormat
argument_list|(
operator|(
name|float
operator|)
name|vs
operator|.
name|getIdentificationHeader
argument_list|()
operator|.
name|getSampleRate
argument_list|()
argument_list|,
literal|16
argument_list|,
name|vs
operator|.
name|getIdentificationHeader
argument_list|()
operator|.
name|getChannels
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
operator|new
name|AudioInputStream
argument_list|(
operator|new
name|VorbisInputStream
argument_list|(
name|vs
argument_list|)
argument_list|,
name|audioFormat
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OggFormatException
decl||
name|VorbisFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedAudioFileException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|AudioInputStream
name|getAudioInputStream
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedAudioFileException
block|{
try|try
block|{
return|return
name|getAudioInputStream
argument_list|(
operator|new
name|UncachedUrlStream
argument_list|(
name|url
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OggFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedAudioFileException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

