begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * $ProjectName$  * $ProjectRevision$  * -----------------------------------------------------------  * $Id: IdentificationHeader.java,v 1.3 2003/03/31 00:20:16 jarnbjo Exp $  * -----------------------------------------------------------  *  * $Author: jarnbjo $  *  * Description:  *  * Copyright 2002-2003 Tor-Einar Jarnbjo  * -----------------------------------------------------------  *  * Change History  * -----------------------------------------------------------  * $Log: IdentificationHeader.java,v $  * Revision 1.3  2003/03/31 00:20:16  jarnbjo  * no message  *  * Revision 1.2  2003/03/16 01:11:12  jarnbjo  * no message  *  *  */
end_comment

begin_package
package|package
name|de
operator|.
name|jarnbjo
operator|.
name|vorbis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|de
operator|.
name|jarnbjo
operator|.
name|util
operator|.
name|io
operator|.
name|BitInputStream
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|IdentificationHeader
block|{
specifier|private
name|int
name|version
decl_stmt|,
name|channels
decl_stmt|,
name|sampleRate
decl_stmt|,
name|bitrateMaximum
decl_stmt|,
name|bitrateNominal
decl_stmt|,
name|bitrateMinimum
decl_stmt|,
name|blockSize0
decl_stmt|,
name|blockSize1
decl_stmt|;
specifier|private
name|MdctFloat
index|[]
name|mdct
init|=
operator|new
name|MdctFloat
index|[
literal|2
index|]
decl_stmt|;
comment|// private MdctLong[] mdctInt=new MdctLong[2];
specifier|private
specifier|static
specifier|final
name|long
name|HEADER
init|=
literal|0x736962726f76L
decl_stmt|;
comment|// 'vorbis'
specifier|public
name|IdentificationHeader
parameter_list|(
name|BitInputStream
name|source
parameter_list|)
throws|throws
name|VorbisFormatException
throws|,
name|IOException
block|{
comment|// equalizer=new Equalizer();
comment|// equalizer.pack();
comment|// equalizer.show();
name|long
name|leading
init|=
name|source
operator|.
name|getLong
argument_list|(
literal|48
argument_list|)
decl_stmt|;
if|if
condition|(
name|leading
operator|!=
name|HEADER
condition|)
block|{
throw|throw
operator|new
name|VorbisFormatException
argument_list|(
literal|"The identification header has an illegal leading."
argument_list|)
throw|;
block|}
name|version
operator|=
name|source
operator|.
name|getInt
argument_list|(
literal|32
argument_list|)
expr_stmt|;
name|channels
operator|=
name|source
operator|.
name|getInt
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|sampleRate
operator|=
name|source
operator|.
name|getInt
argument_list|(
literal|32
argument_list|)
expr_stmt|;
name|bitrateMaximum
operator|=
name|source
operator|.
name|getInt
argument_list|(
literal|32
argument_list|)
expr_stmt|;
name|bitrateNominal
operator|=
name|source
operator|.
name|getInt
argument_list|(
literal|32
argument_list|)
expr_stmt|;
name|bitrateMinimum
operator|=
name|source
operator|.
name|getInt
argument_list|(
literal|32
argument_list|)
expr_stmt|;
name|int
name|bs
init|=
name|source
operator|.
name|getInt
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|blockSize0
operator|=
literal|1
operator|<<
operator|(
name|bs
operator|&
literal|0xf
operator|)
expr_stmt|;
name|blockSize1
operator|=
literal|1
operator|<<
operator|(
name|bs
operator|>>
literal|4
operator|)
expr_stmt|;
name|mdct
index|[
literal|0
index|]
operator|=
operator|new
name|MdctFloat
argument_list|(
name|blockSize0
argument_list|)
expr_stmt|;
name|mdct
index|[
literal|1
index|]
operator|=
operator|new
name|MdctFloat
argument_list|(
name|blockSize1
argument_list|)
expr_stmt|;
comment|// mdctInt[0]=new MdctLong(blockSize0);
comment|// mdctInt[1]=new MdctLong(blockSize1);
block|}
specifier|public
name|int
name|getBlockSize0
parameter_list|()
block|{
return|return
name|blockSize0
return|;
block|}
specifier|public
name|int
name|getBlockSize1
parameter_list|()
block|{
return|return
name|blockSize1
return|;
block|}
specifier|public
name|int
name|getChannels
parameter_list|()
block|{
return|return
name|channels
return|;
block|}
specifier|public
name|int
name|getMaximumBitrate
parameter_list|()
block|{
return|return
name|bitrateMaximum
return|;
block|}
specifier|protected
name|MdctFloat
name|getMdct0
parameter_list|()
block|{
return|return
name|mdct
index|[
literal|0
index|]
return|;
block|}
specifier|protected
name|MdctFloat
name|getMdct1
parameter_list|()
block|{
return|return
name|mdct
index|[
literal|1
index|]
return|;
block|}
specifier|public
name|int
name|getMinimumBitrate
parameter_list|()
block|{
return|return
name|bitrateMinimum
return|;
block|}
specifier|public
name|int
name|getNominalBitrate
parameter_list|()
block|{
return|return
name|bitrateNominal
return|;
block|}
specifier|public
name|int
name|getSampleRate
parameter_list|()
block|{
return|return
name|sampleRate
return|;
block|}
specifier|public
name|int
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
block|}
end_class

end_unit

