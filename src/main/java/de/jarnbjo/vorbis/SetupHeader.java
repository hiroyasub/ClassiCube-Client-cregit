begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * $ProjectName$  * $ProjectRevision$  * -----------------------------------------------------------  * $Id: SetupHeader.java,v 1.2 2003/03/16 01:11:12 jarnbjo Exp $  * -----------------------------------------------------------  *  * $Author: jarnbjo $  *  * Description:  *  * Copyright 2002-2003 Tor-Einar Jarnbjo  * -----------------------------------------------------------  *  * Change History  * -----------------------------------------------------------  * $Log: SetupHeader.java,v $  * Revision 1.2  2003/03/16 01:11:12  jarnbjo  * no message  *  *  */
end_comment

begin_package
package|package
name|de
operator|.
name|jarnbjo
operator|.
name|vorbis
package|;
end_package

begin_import
import|import
name|de
operator|.
name|jarnbjo
operator|.
name|util
operator|.
name|io
operator|.
name|BitInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
class|class
name|SetupHeader
block|{
specifier|private
specifier|static
specifier|final
name|long
name|HEADER
init|=
literal|0x736962726f76L
decl_stmt|;
comment|// 'vorbis'
specifier|private
name|CodeBook
index|[]
name|codeBooks
decl_stmt|;
specifier|private
name|Floor
index|[]
name|floors
decl_stmt|;
specifier|private
name|Residue
index|[]
name|residues
decl_stmt|;
specifier|private
name|Mapping
index|[]
name|mappings
decl_stmt|;
specifier|private
name|Mode
index|[]
name|modes
decl_stmt|;
specifier|public
name|SetupHeader
parameter_list|(
name|VorbisStream
name|vorbis
parameter_list|,
name|BitInputStream
name|source
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|source
operator|.
name|getLong
argument_list|(
literal|48
argument_list|)
operator|!=
name|HEADER
condition|)
block|{
throw|throw
operator|new
name|VorbisFormatException
argument_list|(
literal|"The setup header has an illegal leading."
argument_list|)
throw|;
block|}
comment|// read code books
name|int
name|codeBookCount
init|=
name|source
operator|.
name|getInt
argument_list|(
literal|8
argument_list|)
operator|+
literal|1
decl_stmt|;
name|codeBooks
operator|=
operator|new
name|CodeBook
index|[
name|codeBookCount
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|codeBooks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|codeBooks
index|[
name|i
index|]
operator|=
operator|new
name|CodeBook
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
comment|// read the time domain transformations,
comment|// these should all be 0
name|int
name|timeCount
init|=
name|source
operator|.
name|getInt
argument_list|(
literal|6
argument_list|)
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|timeCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|source
operator|.
name|getInt
argument_list|(
literal|16
argument_list|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|VorbisFormatException
argument_list|(
literal|"Time domain transformation != 0"
argument_list|)
throw|;
block|}
block|}
comment|// read floor entries
name|int
name|floorCount
init|=
name|source
operator|.
name|getInt
argument_list|(
literal|6
argument_list|)
operator|+
literal|1
decl_stmt|;
name|floors
operator|=
operator|new
name|Floor
index|[
name|floorCount
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|floorCount
condition|;
name|i
operator|++
control|)
block|{
name|floors
index|[
name|i
index|]
operator|=
name|Floor
operator|.
name|createInstance
argument_list|(
name|source
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|// read residue entries
name|int
name|residueCount
init|=
name|source
operator|.
name|getInt
argument_list|(
literal|6
argument_list|)
operator|+
literal|1
decl_stmt|;
name|residues
operator|=
operator|new
name|Residue
index|[
name|residueCount
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|residueCount
condition|;
name|i
operator|++
control|)
block|{
name|residues
index|[
name|i
index|]
operator|=
name|Residue
operator|.
name|createInstance
argument_list|(
name|source
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|// read mapping entries
name|int
name|mappingCount
init|=
name|source
operator|.
name|getInt
argument_list|(
literal|6
argument_list|)
operator|+
literal|1
decl_stmt|;
name|mappings
operator|=
operator|new
name|Mapping
index|[
name|mappingCount
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mappingCount
condition|;
name|i
operator|++
control|)
block|{
name|mappings
index|[
name|i
index|]
operator|=
name|Mapping
operator|.
name|createInstance
argument_list|(
name|vorbis
argument_list|,
name|source
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|// read mode entries
name|int
name|modeCount
init|=
name|source
operator|.
name|getInt
argument_list|(
literal|6
argument_list|)
operator|+
literal|1
decl_stmt|;
name|modes
operator|=
operator|new
name|Mode
index|[
name|modeCount
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|modeCount
condition|;
name|i
operator|++
control|)
block|{
name|modes
index|[
name|i
index|]
operator|=
operator|new
name|Mode
argument_list|(
name|source
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|source
operator|.
name|getBit
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|VorbisFormatException
argument_list|(
literal|"The setup header framing bit is incorrect."
argument_list|)
throw|;
block|}
block|}
specifier|public
name|CodeBook
index|[]
name|getCodeBooks
parameter_list|()
block|{
return|return
name|codeBooks
return|;
block|}
specifier|public
name|Floor
index|[]
name|getFloors
parameter_list|()
block|{
return|return
name|floors
return|;
block|}
specifier|public
name|Mapping
index|[]
name|getMappings
parameter_list|()
block|{
return|return
name|mappings
return|;
block|}
specifier|public
name|Mode
index|[]
name|getModes
parameter_list|()
block|{
return|return
name|modes
return|;
block|}
specifier|public
name|Residue
index|[]
name|getResidues
parameter_list|()
block|{
return|return
name|residues
return|;
block|}
block|}
end_class

end_unit

