begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * $ProjectName$  * $ProjectRevision$  * -----------------------------------------------------------  * $Id: MdctFloat.java,v 1.3 2003/04/10 19:49:04 jarnbjo Exp $  * -----------------------------------------------------------  *  * $Author: jarnbjo $  *  * Description:  *  * Copyright 2002-2003 Tor-Einar Jarnbjo  * -----------------------------------------------------------  *  * Change History  * -----------------------------------------------------------  * $Log: MdctFloat.java,v $  * Revision 1.3  2003/04/10 19:49:04  jarnbjo  * no message  *  * Revision 1.2  2003/03/16 01:11:12  jarnbjo  * no message  *  *  */
end_comment

begin_package
package|package
name|de
operator|.
name|jarnbjo
operator|.
name|vorbis
package|;
end_package

begin_class
class|class
name|MdctFloat
block|{
specifier|private
name|int
name|n
decl_stmt|;
specifier|private
name|int
name|log2n
decl_stmt|;
specifier|private
name|float
index|[]
name|trig
decl_stmt|;
specifier|private
name|int
index|[]
name|bitrev
decl_stmt|;
specifier|private
name|float
index|[]
name|equalizer
decl_stmt|;
specifier|private
name|float
name|dtmp1
decl_stmt|,
name|dtmp2
decl_stmt|,
name|dtmp3
decl_stmt|,
name|dtmp4
decl_stmt|;
specifier|private
name|float
index|[]
name|_x
init|=
operator|new
name|float
index|[
literal|1024
index|]
decl_stmt|;
comment|// void clear(){
comment|// }
comment|// void forward(float[] in, float[] out){
comment|// }
specifier|private
name|float
index|[]
name|_w
init|=
operator|new
name|float
index|[
literal|1024
index|]
decl_stmt|;
specifier|protected
name|MdctFloat
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|bitrev
operator|=
operator|new
name|int
index|[
name|n
operator|/
literal|4
index|]
expr_stmt|;
name|trig
operator|=
operator|new
name|float
index|[
name|n
operator|+
name|n
operator|/
literal|4
index|]
expr_stmt|;
name|log2n
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|rint
argument_list|(
name|Math
operator|.
name|log
argument_list|(
name|n
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|n
operator|=
name|n
expr_stmt|;
name|int
name|AE
init|=
literal|0
decl_stmt|;
name|int
name|AO
init|=
literal|1
decl_stmt|;
name|int
name|BE
init|=
name|AE
operator|+
name|n
operator|/
literal|2
decl_stmt|;
name|int
name|BO
init|=
name|BE
operator|+
literal|1
decl_stmt|;
name|int
name|CE
init|=
name|BE
operator|+
name|n
operator|/
literal|2
decl_stmt|;
name|int
name|CO
init|=
name|CE
operator|+
literal|1
decl_stmt|;
comment|// trig lookups...
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
operator|/
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|trig
index|[
name|AE
operator|+
name|i
operator|*
literal|2
index|]
operator|=
operator|(
name|float
operator|)
name|Math
operator|.
name|cos
argument_list|(
operator|(
name|Math
operator|.
name|PI
operator|/
name|n
operator|)
operator|*
operator|(
literal|4
operator|*
name|i
operator|)
argument_list|)
expr_stmt|;
name|trig
index|[
name|AO
operator|+
name|i
operator|*
literal|2
index|]
operator|=
operator|(
name|float
operator|)
operator|-
name|Math
operator|.
name|sin
argument_list|(
operator|(
name|Math
operator|.
name|PI
operator|/
name|n
operator|)
operator|*
operator|(
literal|4
operator|*
name|i
operator|)
argument_list|)
expr_stmt|;
name|trig
index|[
name|BE
operator|+
name|i
operator|*
literal|2
index|]
operator|=
operator|(
name|float
operator|)
name|Math
operator|.
name|cos
argument_list|(
operator|(
name|Math
operator|.
name|PI
operator|/
operator|(
literal|2
operator|*
name|n
operator|)
operator|)
operator|*
operator|(
literal|2
operator|*
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
name|trig
index|[
name|BO
operator|+
name|i
operator|*
literal|2
index|]
operator|=
operator|(
name|float
operator|)
name|Math
operator|.
name|sin
argument_list|(
operator|(
name|Math
operator|.
name|PI
operator|/
operator|(
literal|2
operator|*
name|n
operator|)
operator|)
operator|*
operator|(
literal|2
operator|*
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
operator|/
literal|8
condition|;
name|i
operator|++
control|)
block|{
name|trig
index|[
name|CE
operator|+
name|i
operator|*
literal|2
index|]
operator|=
operator|(
name|float
operator|)
name|Math
operator|.
name|cos
argument_list|(
operator|(
name|Math
operator|.
name|PI
operator|/
name|n
operator|)
operator|*
operator|(
literal|4
operator|*
name|i
operator|+
literal|2
operator|)
argument_list|)
expr_stmt|;
name|trig
index|[
name|CO
operator|+
name|i
operator|*
literal|2
index|]
operator|=
operator|(
name|float
operator|)
operator|-
name|Math
operator|.
name|sin
argument_list|(
operator|(
name|Math
operator|.
name|PI
operator|/
name|n
operator|)
operator|*
operator|(
literal|4
operator|*
name|i
operator|+
literal|2
operator|)
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|mask
init|=
operator|(
literal|1
operator|<<
operator|(
name|log2n
operator|-
literal|1
operator|)
operator|)
operator|-
literal|1
decl_stmt|;
name|int
name|msb
init|=
literal|1
operator|<<
operator|(
name|log2n
operator|-
literal|2
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
operator|/
literal|8
condition|;
name|i
operator|++
control|)
block|{
name|int
name|acc
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|msb
operator|>>>
name|j
operator|!=
literal|0
condition|;
name|j
operator|++
control|)
if|if
condition|(
operator|(
operator|(
name|msb
operator|>>>
name|j
operator|)
operator|&
name|i
operator|)
operator|!=
literal|0
condition|)
name|acc
operator||=
literal|1
operator|<<
name|j
expr_stmt|;
name|bitrev
index|[
name|i
operator|*
literal|2
index|]
operator|=
operator|(
operator|(
operator|~
name|acc
operator|)
operator|&
name|mask
operator|)
expr_stmt|;
comment|// bitrev[i*2]=((~acc)&mask)-1;
name|bitrev
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
name|acc
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|float
index|[]
name|getEqualizer
parameter_list|()
block|{
return|return
name|equalizer
return|;
block|}
specifier|protected
specifier|synchronized
name|void
name|imdct
parameter_list|(
specifier|final
name|float
index|[]
name|frq
parameter_list|,
specifier|final
name|float
index|[]
name|window
parameter_list|,
specifier|final
name|int
index|[]
name|pcm
parameter_list|)
block|{
comment|// , float[] out){
name|float
index|[]
name|in
init|=
name|frq
decl_stmt|;
comment|// , out=buf;
if|if
condition|(
name|_x
operator|.
name|length
operator|<
name|n
operator|/
literal|2
condition|)
block|{
name|_x
operator|=
operator|new
name|float
index|[
name|n
operator|/
literal|2
index|]
expr_stmt|;
block|}
if|if
condition|(
name|_w
operator|.
name|length
operator|<
name|n
operator|/
literal|2
condition|)
block|{
name|_w
operator|=
operator|new
name|float
index|[
name|n
operator|/
literal|2
index|]
expr_stmt|;
block|}
specifier|final
name|float
index|[]
name|x
init|=
name|_x
decl_stmt|;
specifier|final
name|float
index|[]
name|w
init|=
name|_w
decl_stmt|;
name|int
name|n2
init|=
name|n
operator|>>
literal|1
decl_stmt|;
name|int
name|n4
init|=
name|n
operator|>>
literal|2
decl_stmt|;
name|int
name|n8
init|=
name|n
operator|>>
literal|3
decl_stmt|;
if|if
condition|(
name|equalizer
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|frq
index|[
name|i
index|]
operator|*=
name|equalizer
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
comment|// rotate + step 1
block|{
name|int
name|inO
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|xO
init|=
literal|0
decl_stmt|;
name|int
name|A
init|=
name|n2
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|n8
condition|;
name|i
operator|++
control|)
block|{
name|dtmp1
operator|=
name|in
index|[
name|inO
operator|+=
literal|2
index|]
expr_stmt|;
name|dtmp2
operator|=
name|in
index|[
name|inO
operator|+=
literal|2
index|]
expr_stmt|;
name|dtmp3
operator|=
name|trig
index|[
operator|--
name|A
index|]
expr_stmt|;
name|dtmp4
operator|=
name|trig
index|[
operator|--
name|A
index|]
expr_stmt|;
name|x
index|[
name|xO
operator|++
index|]
operator|=
operator|-
name|dtmp2
operator|*
name|dtmp3
operator|-
name|dtmp1
operator|*
name|dtmp4
expr_stmt|;
name|x
index|[
name|xO
operator|++
index|]
operator|=
name|dtmp1
operator|*
name|dtmp3
operator|-
name|dtmp2
operator|*
name|dtmp4
expr_stmt|;
comment|// A-=2;
comment|// x[xO++]=-in[inO+2]*trig[A+1] - in[inO]*trig[A];
comment|// x[xO++]= in[inO]*trig[A+1] - in[inO+2]*trig[A];
comment|// inO+=4;
block|}
name|inO
operator|=
name|n2
expr_stmt|;
comment|// -4;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|n8
condition|;
name|i
operator|++
control|)
block|{
name|dtmp1
operator|=
name|in
index|[
name|inO
operator|-=
literal|2
index|]
expr_stmt|;
name|dtmp2
operator|=
name|in
index|[
name|inO
operator|-=
literal|2
index|]
expr_stmt|;
name|dtmp3
operator|=
name|trig
index|[
operator|--
name|A
index|]
expr_stmt|;
name|dtmp4
operator|=
name|trig
index|[
operator|--
name|A
index|]
expr_stmt|;
name|x
index|[
name|xO
operator|++
index|]
operator|=
name|dtmp2
operator|*
name|dtmp3
operator|+
name|dtmp1
operator|*
name|dtmp4
expr_stmt|;
name|x
index|[
name|xO
operator|++
index|]
operator|=
name|dtmp2
operator|*
name|dtmp4
operator|-
name|dtmp1
operator|*
name|dtmp3
expr_stmt|;
comment|// A-=2;
comment|// x[xO++]=in[inO]*trig[A+1] + in[inO+2]*trig[A];
comment|// x[xO++]=in[inO]*trig[A] - in[inO+2]*trig[A+1];
comment|// inO-=4;
block|}
block|}
name|float
index|[]
name|xxx
init|=
name|kernel
argument_list|(
name|x
argument_list|,
name|w
argument_list|,
name|n
argument_list|,
name|n2
argument_list|,
name|n4
argument_list|,
name|n8
argument_list|)
decl_stmt|;
name|int
name|xx
init|=
literal|0
decl_stmt|;
comment|// step 8
block|{
name|int
name|B
init|=
name|n2
decl_stmt|;
name|int
name|o1
init|=
name|n4
decl_stmt|,
name|o2
init|=
name|o1
operator|-
literal|1
decl_stmt|;
name|int
name|o3
init|=
name|n4
operator|+
name|n2
decl_stmt|,
name|o4
init|=
name|o3
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n4
condition|;
name|i
operator|++
control|)
block|{
name|dtmp1
operator|=
name|xxx
index|[
name|xx
operator|++
index|]
expr_stmt|;
name|dtmp2
operator|=
name|xxx
index|[
name|xx
operator|++
index|]
expr_stmt|;
name|dtmp3
operator|=
name|trig
index|[
name|B
operator|++
index|]
expr_stmt|;
name|dtmp4
operator|=
name|trig
index|[
name|B
operator|++
index|]
expr_stmt|;
name|float
name|temp1
init|=
operator|(
name|dtmp1
operator|*
name|dtmp4
operator|-
name|dtmp2
operator|*
name|dtmp3
operator|)
decl_stmt|;
name|float
name|temp2
init|=
operator|-
operator|(
name|dtmp1
operator|*
name|dtmp3
operator|+
name|dtmp2
operator|*
name|dtmp4
operator|)
decl_stmt|;
comment|/* 		 * float temp1= (xxx[xx] * trig[B+1] - xxx[xx+1] * 		 * trig[B]);//*32767.0f; float temp2=-(xxx[xx] * trig[B] + 		 * xxx[xx+1] * trig[B+1]);//*32767.0f; 		 */
comment|// if(temp1>32767.0f) temp1=32767.0f;
comment|// if(temp1<-32768.0f) temp1=-32768.0f;
comment|// if(temp2>32767.0f) temp2=32767.0f;
comment|// if(temp2<-32768.0f) temp2=-32768.0f;
name|pcm
index|[
name|o1
index|]
operator|=
operator|(
name|int
operator|)
operator|(
operator|-
name|temp1
operator|*
name|window
index|[
name|o1
index|]
operator|)
expr_stmt|;
name|pcm
index|[
name|o2
index|]
operator|=
operator|(
name|int
operator|)
operator|(
name|temp1
operator|*
name|window
index|[
name|o2
index|]
operator|)
expr_stmt|;
name|pcm
index|[
name|o3
index|]
operator|=
operator|(
name|int
operator|)
operator|(
name|temp2
operator|*
name|window
index|[
name|o3
index|]
operator|)
expr_stmt|;
name|pcm
index|[
name|o4
index|]
operator|=
operator|(
name|int
operator|)
operator|(
name|temp2
operator|*
name|window
index|[
name|o4
index|]
operator|)
expr_stmt|;
name|o1
operator|++
expr_stmt|;
name|o2
operator|--
expr_stmt|;
name|o3
operator|++
expr_stmt|;
name|o4
operator|--
expr_stmt|;
comment|// xx+=2;
comment|// B+=2;
block|}
block|}
block|}
specifier|private
name|float
index|[]
name|kernel
parameter_list|(
name|float
index|[]
name|x
parameter_list|,
name|float
index|[]
name|w
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|n2
parameter_list|,
name|int
name|n4
parameter_list|,
name|int
name|n8
parameter_list|)
block|{
comment|// step 2
name|int
name|xA
init|=
name|n4
decl_stmt|;
name|int
name|xB
init|=
literal|0
decl_stmt|;
name|int
name|w2
init|=
name|n4
decl_stmt|;
name|int
name|A
init|=
name|n2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n4
condition|;
control|)
block|{
name|float
name|x0
init|=
name|x
index|[
name|xA
index|]
operator|-
name|x
index|[
name|xB
index|]
decl_stmt|;
name|float
name|x1
decl_stmt|;
name|w
index|[
name|w2
operator|+
name|i
index|]
operator|=
name|x
index|[
name|xA
operator|++
index|]
operator|+
name|x
index|[
name|xB
operator|++
index|]
expr_stmt|;
name|x1
operator|=
name|x
index|[
name|xA
index|]
operator|-
name|x
index|[
name|xB
index|]
expr_stmt|;
name|A
operator|-=
literal|4
expr_stmt|;
name|w
index|[
name|i
operator|++
index|]
operator|=
name|x0
operator|*
name|trig
index|[
name|A
index|]
operator|+
name|x1
operator|*
name|trig
index|[
name|A
operator|+
literal|1
index|]
expr_stmt|;
name|w
index|[
name|i
index|]
operator|=
name|x1
operator|*
name|trig
index|[
name|A
index|]
operator|-
name|x0
operator|*
name|trig
index|[
name|A
operator|+
literal|1
index|]
expr_stmt|;
name|w
index|[
name|w2
operator|+
name|i
index|]
operator|=
name|x
index|[
name|xA
operator|++
index|]
operator|+
name|x
index|[
name|xB
operator|++
index|]
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
comment|// step 3
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|log2n
operator|-
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|int
name|k0
init|=
name|n
operator|>>>
operator|(
name|i
operator|+
literal|2
operator|)
decl_stmt|;
name|int
name|k1
init|=
literal|1
operator|<<
operator|(
name|i
operator|+
literal|3
operator|)
decl_stmt|;
name|int
name|wbase
init|=
name|n2
operator|-
literal|2
decl_stmt|;
name|A
operator|=
literal|0
expr_stmt|;
name|float
index|[]
name|temp
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
operator|(
name|k0
operator|>>>
literal|2
operator|)
condition|;
name|r
operator|++
control|)
block|{
name|int
name|w1
init|=
name|wbase
decl_stmt|;
name|w2
operator|=
name|w1
operator|-
operator|(
name|k0
operator|>>
literal|1
operator|)
expr_stmt|;
name|float
name|AEv
init|=
name|trig
index|[
name|A
index|]
decl_stmt|,
name|wA
decl_stmt|;
name|float
name|AOv
init|=
name|trig
index|[
name|A
operator|+
literal|1
index|]
decl_stmt|,
name|wB
decl_stmt|;
name|wbase
operator|-=
literal|2
expr_stmt|;
name|k0
operator|++
expr_stmt|;
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
operator|(
literal|2
operator|<<
name|i
operator|)
condition|;
name|s
operator|++
control|)
block|{
name|dtmp1
operator|=
name|w
index|[
name|w1
index|]
expr_stmt|;
name|dtmp2
operator|=
name|w
index|[
name|w2
index|]
expr_stmt|;
name|wB
operator|=
name|dtmp1
operator|-
name|dtmp2
expr_stmt|;
name|x
index|[
name|w1
index|]
operator|=
name|dtmp1
operator|+
name|dtmp2
expr_stmt|;
name|dtmp1
operator|=
name|w
index|[
operator|++
name|w1
index|]
expr_stmt|;
name|dtmp2
operator|=
name|w
index|[
operator|++
name|w2
index|]
expr_stmt|;
name|wA
operator|=
name|dtmp1
operator|-
name|dtmp2
expr_stmt|;
name|x
index|[
name|w1
index|]
operator|=
name|dtmp1
operator|+
name|dtmp2
expr_stmt|;
name|x
index|[
name|w2
index|]
operator|=
name|wA
operator|*
name|AEv
operator|-
name|wB
operator|*
name|AOv
expr_stmt|;
name|x
index|[
name|w2
operator|-
literal|1
index|]
operator|=
name|wB
operator|*
name|AEv
operator|+
name|wA
operator|*
name|AOv
expr_stmt|;
comment|/* 			 * wB =w[w1] -w[w2]; x[w1] =w[w1] +w[w2]; 			 *  			 * wA =w[++w1] -w[++w2]; x[w1] =w[w1] +w[w2]; 			 *  			 * x[w2] =wA*AEv - wB*AOv; x[w2-1]=wB*AEv + wA*AOv; 			 */
name|w1
operator|-=
name|k0
expr_stmt|;
name|w2
operator|-=
name|k0
expr_stmt|;
block|}
name|k0
operator|--
expr_stmt|;
name|A
operator|+=
name|k1
expr_stmt|;
block|}
name|temp
operator|=
name|w
expr_stmt|;
name|w
operator|=
name|x
expr_stmt|;
name|x
operator|=
name|temp
expr_stmt|;
block|}
block|}
comment|// step 4, 5, 6, 7
block|{
name|int
name|C
init|=
name|n
decl_stmt|;
name|int
name|bit
init|=
literal|0
decl_stmt|;
name|int
name|x1
init|=
literal|0
decl_stmt|;
name|int
name|x2
init|=
name|n2
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n8
condition|;
name|i
operator|++
control|)
block|{
name|int
name|t1
init|=
name|bitrev
index|[
name|bit
operator|++
index|]
decl_stmt|;
name|int
name|t2
init|=
name|bitrev
index|[
name|bit
operator|++
index|]
decl_stmt|;
name|float
name|wA
init|=
name|w
index|[
name|t1
index|]
operator|-
name|w
index|[
name|t2
operator|+
literal|1
index|]
decl_stmt|;
name|float
name|wB
init|=
name|w
index|[
name|t1
operator|-
literal|1
index|]
operator|+
name|w
index|[
name|t2
index|]
decl_stmt|;
name|float
name|wC
init|=
name|w
index|[
name|t1
index|]
operator|+
name|w
index|[
name|t2
operator|+
literal|1
index|]
decl_stmt|;
name|float
name|wD
init|=
name|w
index|[
name|t1
operator|-
literal|1
index|]
operator|-
name|w
index|[
name|t2
index|]
decl_stmt|;
name|float
name|wACE
init|=
name|wA
operator|*
name|trig
index|[
name|C
index|]
decl_stmt|;
name|float
name|wBCE
init|=
name|wB
operator|*
name|trig
index|[
name|C
operator|++
index|]
decl_stmt|;
name|float
name|wACO
init|=
name|wA
operator|*
name|trig
index|[
name|C
index|]
decl_stmt|;
name|float
name|wBCO
init|=
name|wB
operator|*
name|trig
index|[
name|C
operator|++
index|]
decl_stmt|;
name|x
index|[
name|x1
operator|++
index|]
operator|=
operator|(
name|wC
operator|+
name|wACO
operator|+
name|wBCE
operator|)
operator|*
literal|16383.0f
expr_stmt|;
name|x
index|[
name|x2
operator|--
index|]
operator|=
operator|(
operator|-
name|wD
operator|+
name|wBCO
operator|-
name|wACE
operator|)
operator|*
literal|16383.0f
expr_stmt|;
name|x
index|[
name|x1
operator|++
index|]
operator|=
operator|(
name|wD
operator|+
name|wBCO
operator|-
name|wACE
operator|)
operator|*
literal|16383.0f
expr_stmt|;
name|x
index|[
name|x2
operator|--
index|]
operator|=
operator|(
name|wC
operator|-
name|wACO
operator|-
name|wBCE
operator|)
operator|*
literal|16383.0f
expr_stmt|;
block|}
block|}
return|return
name|x
return|;
block|}
specifier|protected
name|void
name|setEqualizer
parameter_list|(
name|float
index|[]
name|equalizer
parameter_list|)
block|{
name|this
operator|.
name|equalizer
operator|=
name|equalizer
expr_stmt|;
block|}
block|}
end_class

end_unit

