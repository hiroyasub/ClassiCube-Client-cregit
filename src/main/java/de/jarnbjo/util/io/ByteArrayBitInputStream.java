begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * $ProjectName$  * $ProjectRevision$  * -----------------------------------------------------------  * $Id: ByteArrayBitInputStream.java,v 1.3 2003/04/10 19:48:31 jarnbjo Exp $  * -----------------------------------------------------------  *  * $Author: jarnbjo $  *  * Description:  *  * Copyright 2002-2003 Tor-Einar Jarnbjo  * -----------------------------------------------------------  *  * Change History  * -----------------------------------------------------------  * $Log: ByteArrayBitInputStream.java,v $  * Revision 1.3  2003/04/10 19:48:31  jarnbjo  * no message  *  * Revision 1.2  2003/03/16 01:11:39  jarnbjo  * no message  *  * Revision 1.1  2003/03/03 21:02:20  jarnbjo  * no message  *  */
end_comment

begin_package
package|package
name|de
operator|.
name|jarnbjo
operator|.
name|util
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Implementation of the<code>BitInputStream</code> interface, using a byte  * array as data source.  */
end_comment

begin_class
specifier|public
class|class
name|ByteArrayBitInputStream
implements|implements
name|BitInputStream
block|{
specifier|private
name|byte
index|[]
name|source
decl_stmt|;
specifier|private
name|byte
name|currentByte
decl_stmt|;
specifier|private
name|int
name|endian
decl_stmt|;
specifier|private
name|int
name|byteIndex
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|bitIndex
init|=
literal|0
decl_stmt|;
specifier|public
name|ByteArrayBitInputStream
parameter_list|(
name|byte
index|[]
name|source
parameter_list|)
block|{
name|this
argument_list|(
name|source
argument_list|,
name|LITTLE_ENDIAN
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ByteArrayBitInputStream
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|int
name|endian
parameter_list|)
block|{
name|this
operator|.
name|endian
operator|=
name|endian
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|currentByte
operator|=
name|source
index|[
literal|0
index|]
expr_stmt|;
name|bitIndex
operator|=
operator|(
name|endian
operator|==
name|LITTLE_ENDIAN
operator|)
condition|?
literal|0
else|:
literal|7
expr_stmt|;
block|}
specifier|public
name|void
name|align
parameter_list|()
block|{
if|if
condition|(
name|endian
operator|==
name|BIG_ENDIAN
operator|&&
name|bitIndex
operator|>=
literal|0
condition|)
block|{
name|bitIndex
operator|=
literal|7
expr_stmt|;
name|byteIndex
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|endian
operator|==
name|LITTLE_ENDIAN
operator|&&
name|bitIndex
operator|<=
literal|7
condition|)
block|{
name|bitIndex
operator|=
literal|0
expr_stmt|;
name|byteIndex
operator|++
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|getBit
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|endian
operator|==
name|LITTLE_ENDIAN
condition|)
block|{
if|if
condition|(
name|bitIndex
operator|>
literal|7
condition|)
block|{
name|bitIndex
operator|=
literal|0
expr_stmt|;
name|currentByte
operator|=
name|source
index|[
operator|++
name|byteIndex
index|]
expr_stmt|;
block|}
return|return
operator|(
name|currentByte
operator|&
operator|(
literal|1
operator|<<
operator|(
name|bitIndex
operator|++
operator|)
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
else|else
block|{
if|if
condition|(
name|bitIndex
operator|<
literal|0
condition|)
block|{
name|bitIndex
operator|=
literal|7
expr_stmt|;
name|currentByte
operator|=
name|source
index|[
operator|++
name|byteIndex
index|]
expr_stmt|;
block|}
return|return
operator|(
name|currentByte
operator|&
operator|(
literal|1
operator|<<
operator|(
name|bitIndex
operator|--
operator|)
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
block|}
specifier|public
name|int
name|getInt
parameter_list|(
name|HuffmanNode
name|root
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|root
operator|.
name|value
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|bitIndex
operator|>
literal|7
condition|)
block|{
name|bitIndex
operator|=
literal|0
expr_stmt|;
name|currentByte
operator|=
name|source
index|[
operator|++
name|byteIndex
index|]
expr_stmt|;
block|}
name|root
operator|=
operator|(
name|currentByte
operator|&
operator|(
literal|1
operator|<<
operator|(
name|bitIndex
operator|++
operator|)
operator|)
operator|)
operator|!=
literal|0
condition|?
name|root
operator|.
name|o1
else|:
name|root
operator|.
name|o0
expr_stmt|;
block|}
return|return
name|root
operator|.
name|value
operator|.
name|intValue
argument_list|()
return|;
block|}
specifier|public
name|int
name|getInt
parameter_list|(
name|int
name|bits
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bits
operator|>
literal|32
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Argument \"bits\" must be<= 32"
argument_list|)
throw|;
block|}
name|int
name|res
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|endian
operator|==
name|LITTLE_ENDIAN
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bits
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|getBit
argument_list|()
condition|)
block|{
name|res
operator||=
operator|(
literal|1
operator|<<
name|i
operator|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|bitIndex
operator|<
literal|0
condition|)
block|{
name|bitIndex
operator|=
literal|7
expr_stmt|;
name|currentByte
operator|=
name|source
index|[
operator|++
name|byteIndex
index|]
expr_stmt|;
block|}
if|if
condition|(
name|bits
operator|<=
name|bitIndex
operator|+
literal|1
condition|)
block|{
name|int
name|ci
init|=
operator|(
operator|(
name|int
operator|)
name|currentByte
operator|)
operator|&
literal|0xff
decl_stmt|;
name|int
name|offset
init|=
literal|1
operator|+
name|bitIndex
operator|-
name|bits
decl_stmt|;
name|int
name|mask
init|=
operator|(
operator|(
literal|1
operator|<<
name|bits
operator|)
operator|-
literal|1
operator|)
operator|<<
name|offset
decl_stmt|;
name|res
operator|=
operator|(
name|ci
operator|&
name|mask
operator|)
operator|>>
name|offset
expr_stmt|;
name|bitIndex
operator|-=
name|bits
expr_stmt|;
block|}
else|else
block|{
name|res
operator|=
operator|(
operator|(
operator|(
name|int
operator|)
name|currentByte
operator|)
operator|&
literal|0xff
operator|&
operator|(
operator|(
literal|1
operator|<<
operator|(
name|bitIndex
operator|+
literal|1
operator|)
operator|)
operator|-
literal|1
operator|)
operator|)
operator|<<
operator|(
name|bits
operator|-
name|bitIndex
operator|-
literal|1
operator|)
expr_stmt|;
name|bits
operator|-=
name|bitIndex
operator|+
literal|1
expr_stmt|;
name|currentByte
operator|=
name|source
index|[
operator|++
name|byteIndex
index|]
expr_stmt|;
while|while
condition|(
name|bits
operator|>=
literal|8
condition|)
block|{
name|bits
operator|-=
literal|8
expr_stmt|;
name|res
operator||=
operator|(
operator|(
operator|(
name|int
operator|)
name|source
index|[
name|byteIndex
index|]
operator|)
operator|&
literal|0xff
operator|)
operator|<<
name|bits
expr_stmt|;
name|currentByte
operator|=
name|source
index|[
operator|++
name|byteIndex
index|]
expr_stmt|;
block|}
if|if
condition|(
name|bits
operator|>
literal|0
condition|)
block|{
name|int
name|ci
init|=
operator|(
operator|(
name|int
operator|)
name|source
index|[
name|byteIndex
index|]
operator|)
operator|&
literal|0xff
decl_stmt|;
name|res
operator||=
operator|(
name|ci
operator|>>
operator|(
literal|8
operator|-
name|bits
operator|)
operator|)
operator|&
operator|(
operator|(
literal|1
operator|<<
name|bits
operator|)
operator|-
literal|1
operator|)
expr_stmt|;
name|bitIndex
operator|=
literal|7
operator|-
name|bits
expr_stmt|;
block|}
else|else
block|{
name|currentByte
operator|=
name|source
index|[
operator|--
name|byteIndex
index|]
expr_stmt|;
name|bitIndex
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
block|}
return|return
name|res
return|;
block|}
specifier|public
name|long
name|getLong
parameter_list|(
name|int
name|bits
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bits
operator|>
literal|64
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Argument \"bits\" must be<= 64"
argument_list|)
throw|;
block|}
name|long
name|res
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|endian
operator|==
name|LITTLE_ENDIAN
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bits
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|getBit
argument_list|()
condition|)
block|{
name|res
operator||=
operator|(
literal|1L
operator|<<
name|i
operator|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
name|bits
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|getBit
argument_list|()
condition|)
block|{
name|res
operator||=
operator|(
literal|1L
operator|<<
name|i
operator|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|res
return|;
block|}
specifier|public
name|int
name|getSignedInt
parameter_list|(
name|int
name|bits
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|raw
init|=
name|getInt
argument_list|(
name|bits
argument_list|)
decl_stmt|;
if|if
condition|(
name|raw
operator|>=
literal|1
operator|<<
operator|(
name|bits
operator|-
literal|1
operator|)
condition|)
block|{
name|raw
operator|-=
literal|1
operator|<<
name|bits
expr_stmt|;
block|}
return|return
name|raw
return|;
block|}
comment|/**      * @return the byte array used as a source for this instance      */
specifier|public
name|byte
index|[]
name|getSource
parameter_list|()
block|{
return|return
name|source
return|;
block|}
comment|/**      *<p>      * reads an integer encoded as "signed rice" as described in the FLAC audio      * format specification      *</p>      *       *<p>      *<b>not supported for little endian</b>      *</p>      *       * @param order      * @return the decoded integer value read from the stream      *       * @throws IOException      *             if an I/O error occurs      * @throws UnsupportedOperationException      *             if the method is not supported by the implementation      */
specifier|public
name|int
name|readSignedRice
parameter_list|(
name|int
name|order
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|msbs
init|=
operator|-
literal|1
decl_stmt|,
name|lsbs
init|=
literal|0
decl_stmt|,
name|res
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|endian
operator|==
name|LITTLE_ENDIAN
condition|)
block|{
comment|// little endian
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ByteArrayBitInputStream.readSignedRice() is only supported in big endian mode"
argument_list|)
throw|;
block|}
else|else
block|{
comment|// big endian
name|byte
name|cb
init|=
name|source
index|[
name|byteIndex
index|]
decl_stmt|;
do|do
block|{
name|msbs
operator|++
expr_stmt|;
if|if
condition|(
name|bitIndex
operator|<
literal|0
condition|)
block|{
name|bitIndex
operator|=
literal|7
expr_stmt|;
name|byteIndex
operator|++
expr_stmt|;
name|cb
operator|=
name|source
index|[
name|byteIndex
index|]
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|(
name|cb
operator|&
operator|(
literal|1
operator|<<
name|bitIndex
operator|--
operator|)
operator|)
operator|==
literal|0
condition|)
do|;
name|int
name|bits
init|=
name|order
decl_stmt|;
if|if
condition|(
name|bitIndex
operator|<
literal|0
condition|)
block|{
name|bitIndex
operator|=
literal|7
expr_stmt|;
name|byteIndex
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|bits
operator|<=
name|bitIndex
operator|+
literal|1
condition|)
block|{
name|int
name|ci
init|=
operator|(
operator|(
name|int
operator|)
name|source
index|[
name|byteIndex
index|]
operator|)
operator|&
literal|0xff
decl_stmt|;
name|int
name|offset
init|=
literal|1
operator|+
name|bitIndex
operator|-
name|bits
decl_stmt|;
name|int
name|mask
init|=
operator|(
operator|(
literal|1
operator|<<
name|bits
operator|)
operator|-
literal|1
operator|)
operator|<<
name|offset
decl_stmt|;
name|lsbs
operator|=
operator|(
name|ci
operator|&
name|mask
operator|)
operator|>>
name|offset
expr_stmt|;
name|bitIndex
operator|-=
name|bits
expr_stmt|;
block|}
else|else
block|{
name|lsbs
operator|=
operator|(
operator|(
operator|(
name|int
operator|)
name|source
index|[
name|byteIndex
index|]
operator|)
operator|&
literal|0xff
operator|&
operator|(
operator|(
literal|1
operator|<<
operator|(
name|bitIndex
operator|+
literal|1
operator|)
operator|)
operator|-
literal|1
operator|)
operator|)
operator|<<
operator|(
name|bits
operator|-
name|bitIndex
operator|-
literal|1
operator|)
expr_stmt|;
name|bits
operator|-=
name|bitIndex
operator|+
literal|1
expr_stmt|;
name|byteIndex
operator|++
expr_stmt|;
while|while
condition|(
name|bits
operator|>=
literal|8
condition|)
block|{
name|bits
operator|-=
literal|8
expr_stmt|;
name|lsbs
operator||=
operator|(
operator|(
operator|(
name|int
operator|)
name|source
index|[
name|byteIndex
index|]
operator|)
operator|&
literal|0xff
operator|)
operator|<<
name|bits
expr_stmt|;
name|byteIndex
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|bits
operator|>
literal|0
condition|)
block|{
name|int
name|ci
init|=
operator|(
operator|(
name|int
operator|)
name|source
index|[
name|byteIndex
index|]
operator|)
operator|&
literal|0xff
decl_stmt|;
name|lsbs
operator||=
operator|(
name|ci
operator|>>
operator|(
literal|8
operator|-
name|bits
operator|)
operator|)
operator|&
operator|(
operator|(
literal|1
operator|<<
name|bits
operator|)
operator|-
literal|1
operator|)
expr_stmt|;
name|bitIndex
operator|=
literal|7
operator|-
name|bits
expr_stmt|;
block|}
else|else
block|{
name|byteIndex
operator|--
expr_stmt|;
name|bitIndex
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
name|res
operator|=
operator|(
name|msbs
operator|<<
name|order
operator|)
operator||
name|lsbs
expr_stmt|;
block|}
return|return
operator|(
name|res
operator|&
literal|1
operator|)
operator|==
literal|1
condition|?
operator|-
operator|(
name|res
operator|>>
literal|1
operator|)
operator|-
literal|1
else|:
operator|(
name|res
operator|>>
literal|1
operator|)
return|;
block|}
comment|/**      *<p>      * fills the array from<code>offset</code> with<code>len</code> integers      * encoded as "signed rice" as described in the FLAC audio format      * specification      *</p>      *       *<p>      *<b>not supported for little endian</b>      *</p>      *       * @param order      * @param buffer      * @param offset      * @param len      * @return the decoded integer value read from the stream      *       * @throws IOException      *             if an I/O error occurs      * @throws UnsupportedOperationException      *             if the method is not supported by the implementation      */
specifier|public
name|void
name|readSignedRice
parameter_list|(
name|int
name|order
parameter_list|,
name|int
index|[]
name|buffer
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|endian
operator|==
name|LITTLE_ENDIAN
condition|)
block|{
comment|// little endian
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ByteArrayBitInputStream.readSignedRice() is only supported in big endian mode"
argument_list|)
throw|;
block|}
else|else
block|{
comment|// big endian
for|for
control|(
name|int
name|i
init|=
name|off
init|;
name|i
operator|<
name|off
operator|+
name|len
condition|;
name|i
operator|++
control|)
block|{
name|int
name|msbs
init|=
operator|-
literal|1
decl_stmt|,
name|lsbs
init|=
literal|0
decl_stmt|;
name|byte
name|cb
init|=
name|source
index|[
name|byteIndex
index|]
decl_stmt|;
do|do
block|{
name|msbs
operator|++
expr_stmt|;
if|if
condition|(
name|bitIndex
operator|<
literal|0
condition|)
block|{
name|bitIndex
operator|=
literal|7
expr_stmt|;
name|byteIndex
operator|++
expr_stmt|;
name|cb
operator|=
name|source
index|[
name|byteIndex
index|]
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|(
name|cb
operator|&
operator|(
literal|1
operator|<<
name|bitIndex
operator|--
operator|)
operator|)
operator|==
literal|0
condition|)
do|;
name|int
name|bits
init|=
name|order
decl_stmt|;
if|if
condition|(
name|bitIndex
operator|<
literal|0
condition|)
block|{
name|bitIndex
operator|=
literal|7
expr_stmt|;
name|byteIndex
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|bits
operator|<=
name|bitIndex
operator|+
literal|1
condition|)
block|{
name|int
name|ci
init|=
operator|(
operator|(
name|int
operator|)
name|source
index|[
name|byteIndex
index|]
operator|)
operator|&
literal|0xff
decl_stmt|;
name|int
name|offset
init|=
literal|1
operator|+
name|bitIndex
operator|-
name|bits
decl_stmt|;
name|int
name|mask
init|=
operator|(
operator|(
literal|1
operator|<<
name|bits
operator|)
operator|-
literal|1
operator|)
operator|<<
name|offset
decl_stmt|;
name|lsbs
operator|=
operator|(
name|ci
operator|&
name|mask
operator|)
operator|>>
name|offset
expr_stmt|;
name|bitIndex
operator|-=
name|bits
expr_stmt|;
block|}
else|else
block|{
name|lsbs
operator|=
operator|(
operator|(
operator|(
name|int
operator|)
name|source
index|[
name|byteIndex
index|]
operator|)
operator|&
literal|0xff
operator|&
operator|(
operator|(
literal|1
operator|<<
operator|(
name|bitIndex
operator|+
literal|1
operator|)
operator|)
operator|-
literal|1
operator|)
operator|)
operator|<<
operator|(
name|bits
operator|-
name|bitIndex
operator|-
literal|1
operator|)
expr_stmt|;
name|bits
operator|-=
name|bitIndex
operator|+
literal|1
expr_stmt|;
name|byteIndex
operator|++
expr_stmt|;
while|while
condition|(
name|bits
operator|>=
literal|8
condition|)
block|{
name|bits
operator|-=
literal|8
expr_stmt|;
name|lsbs
operator||=
operator|(
operator|(
operator|(
name|int
operator|)
name|source
index|[
name|byteIndex
index|]
operator|)
operator|&
literal|0xff
operator|)
operator|<<
name|bits
expr_stmt|;
name|byteIndex
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|bits
operator|>
literal|0
condition|)
block|{
name|int
name|ci
init|=
operator|(
operator|(
name|int
operator|)
name|source
index|[
name|byteIndex
index|]
operator|)
operator|&
literal|0xff
decl_stmt|;
name|lsbs
operator||=
operator|(
name|ci
operator|>>
operator|(
literal|8
operator|-
name|bits
operator|)
operator|)
operator|&
operator|(
operator|(
literal|1
operator|<<
name|bits
operator|)
operator|-
literal|1
operator|)
expr_stmt|;
name|bitIndex
operator|=
literal|7
operator|-
name|bits
expr_stmt|;
block|}
else|else
block|{
name|byteIndex
operator|--
expr_stmt|;
name|bitIndex
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
name|int
name|res
init|=
operator|(
name|msbs
operator|<<
name|order
operator|)
operator||
name|lsbs
decl_stmt|;
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|res
operator|&
literal|1
operator|)
operator|==
literal|1
condition|?
operator|-
operator|(
name|res
operator|>>
literal|1
operator|)
operator|-
literal|1
else|:
operator|(
name|res
operator|>>
literal|1
operator|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setEndian
parameter_list|(
name|int
name|endian
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|endian
operator|==
name|BIG_ENDIAN
operator|&&
name|endian
operator|==
name|LITTLE_ENDIAN
condition|)
block|{
name|bitIndex
operator|=
literal|0
expr_stmt|;
name|byteIndex
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|this
operator|.
name|endian
operator|==
name|LITTLE_ENDIAN
operator|&&
name|endian
operator|==
name|BIG_ENDIAN
condition|)
block|{
name|bitIndex
operator|=
literal|7
expr_stmt|;
name|byteIndex
operator|++
expr_stmt|;
block|}
name|this
operator|.
name|endian
operator|=
name|endian
expr_stmt|;
block|}
block|}
end_class

end_unit

