begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * $ProjectName$  * $ProjectRevision$  * -----------------------------------------------------------  * $Id: HuffmanNode.java,v 1.2 2003/04/10 19:48:31 jarnbjo Exp $  * -----------------------------------------------------------  *  * $Author: jarnbjo $  *  * Description:  *  * Copyright 2002-2003 Tor-Einar Jarnbjo  * -----------------------------------------------------------  *  * Change History  * -----------------------------------------------------------  * $Log: HuffmanNode.java,v $  * Revision 1.2  2003/04/10 19:48:31  jarnbjo  * no message  *  */
end_comment

begin_package
package|package
name|de
operator|.
name|jarnbjo
operator|.
name|util
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|de
operator|.
name|jarnbjo
operator|.
name|util
operator|.
name|io
operator|.
name|BitInputStream
import|;
end_import

begin_comment
comment|/**  * Representation of a node in a Huffman tree, used to read Huffman compressed  * codewords from e.g. a Vorbis stream.  */
end_comment

begin_class
specifier|final
specifier|public
class|class
name|HuffmanNode
block|{
specifier|private
name|int
name|depth
init|=
literal|0
decl_stmt|;
specifier|protected
name|HuffmanNode
name|o0
decl_stmt|,
name|o1
decl_stmt|;
specifier|protected
name|Integer
name|value
decl_stmt|;
specifier|private
name|boolean
name|full
init|=
literal|false
decl_stmt|;
comment|/**      * creates a new Huffman tree root node      */
specifier|public
name|HuffmanNode
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|HuffmanNode
parameter_list|(
name|HuffmanNode
name|parent
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|depth
operator|=
name|parent
operator|.
name|getDepth
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
block|}
specifier|protected
name|HuffmanNode
parameter_list|(
name|HuffmanNode
name|parent
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|this
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
operator|new
name|Integer
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|full
operator|=
literal|true
expr_stmt|;
block|}
specifier|protected
name|int
name|read
parameter_list|(
name|BitInputStream
name|bis
parameter_list|)
throws|throws
name|IOException
block|{
name|HuffmanNode
name|iter
init|=
name|this
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|value
operator|==
literal|null
condition|)
block|{
name|iter
operator|=
name|bis
operator|.
name|getBit
argument_list|()
condition|?
name|iter
operator|.
name|o1
else|:
name|iter
operator|.
name|o0
expr_stmt|;
block|}
return|return
name|iter
operator|.
name|value
operator|.
name|intValue
argument_list|()
return|;
block|}
specifier|protected
name|HuffmanNode
name|get0
parameter_list|()
block|{
return|return
name|o0
operator|==
literal|null
condition|?
name|set0
argument_list|(
operator|new
name|HuffmanNode
argument_list|(
name|this
argument_list|)
argument_list|)
else|:
name|o0
return|;
block|}
specifier|protected
name|HuffmanNode
name|get1
parameter_list|()
block|{
return|return
name|o1
operator|==
literal|null
condition|?
name|set1
argument_list|(
operator|new
name|HuffmanNode
argument_list|(
name|this
argument_list|)
argument_list|)
else|:
name|o1
return|;
block|}
specifier|protected
name|Integer
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|protected
name|int
name|getDepth
parameter_list|()
block|{
return|return
name|depth
return|;
block|}
specifier|private
name|boolean
name|isFull
parameter_list|()
block|{
return|return
name|full
condition|?
literal|true
else|:
operator|(
name|full
operator|=
name|o0
operator|!=
literal|null
operator|&&
name|o0
operator|.
name|isFull
argument_list|()
operator|&&
name|o1
operator|!=
literal|null
operator|&&
name|o1
operator|.
name|isFull
argument_list|()
operator|)
return|;
block|}
specifier|private
name|HuffmanNode
name|set0
parameter_list|(
name|HuffmanNode
name|value
parameter_list|)
block|{
return|return
name|o0
operator|=
name|value
return|;
block|}
specifier|private
name|HuffmanNode
name|set1
parameter_list|(
name|HuffmanNode
name|value
parameter_list|)
block|{
return|return
name|o1
operator|=
name|value
return|;
block|}
comment|/**      * creates a new tree node at the first free location at the given depth,      * and assigns the value to it      *       * @param depth      *            the tree depth of the new node (codeword length in bits)      * @param value      *            the node's new value      */
specifier|public
name|boolean
name|setNewValue
parameter_list|(
name|int
name|depth
parameter_list|,
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|isFull
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|depth
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|o0
operator|==
literal|null
condition|)
block|{
name|set0
argument_list|(
operator|new
name|HuffmanNode
argument_list|(
name|this
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|o1
operator|==
literal|null
condition|)
block|{
name|set1
argument_list|(
operator|new
name|HuffmanNode
argument_list|(
name|this
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
name|get0
argument_list|()
operator|.
name|setNewValue
argument_list|(
name|depth
operator|-
literal|1
argument_list|,
name|value
argument_list|)
condition|?
literal|true
else|:
name|get1
argument_list|()
operator|.
name|setNewValue
argument_list|(
name|depth
operator|-
literal|1
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

